<?php

/*
 * Created on 13 Jan 2010
 *
 * @author greg.harvey - Greg Harvey - http://www.drupaler.co.uk
 * @file
 * Module for providing a rule to automatically create a draft of a node
 * in other languages when translation is enabled.
 */

/**
 * Implementation of hook_init().
 */
function i18n_auto_init() {
  // Add the Google API so we can pull the branding and stop Google getting up tight.
  drupal_set_html_head('<script type="text/javascript" src="http://www.google.com/jsapi"></script>');
  // Add the Google CSS.
  drupal_add_css(base_path() . drupal_get_path('module', 'i18n_auto') . '/google.css', 'module');
}

/**
 * Implementation of hook_block().
 */
function i18n_auto_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list' :
      $blocks[0]['info'] = t('Google Translate branding block');
      return $blocks;
      break;
    case 'view' :
      $block = array();
      switch ($delta) {
        case 0:
          $block['title'] = t('Powered by Google'); 
          $block['content'] = theme('i18n_auto_google_block');
          return $block;
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function i18n_auto_theme() {
  return array(
    'i18n_auto_google_block' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Theme function for rendering the Google block.
 * 
 * Code taken from:
 * http://code.google.com/apis/ajaxlanguage/documentation/#Branding
 * http://www.google.com/uds/samples/language/branding.html
 */
function theme_i18n_auto_google_block() {
  $output = '  <div id="google-branding"></div>
  <script type="text/javascript"> 
 
    google.load(\'language\', "1");
    google.setOnLoadCallback(initialize);
    function initialize() {
      var v = {type:\'vertical\'};
      google.language.getBranding(\'google-branding\', v);
    }
 
  </script> ';
  return $output;
}

/**
 * Implementation of hook_rules_action_info().
 */
function i18n_auto_rules_action_info() {
  return array(
    'i18n_auto_action_node_translate' => array(
      'label' => t('Translate a node into every enabled language'),
      'arguments' => array(
        'node' => array(
          'type' => 'node',
          'label' => t('Content')),
        ),
      'module' => 'Node',
    ),
  );
}

/**
 * Creates a translation for a Node in every enabled language.
 */
function i18n_auto_action_node_translate($node) {

  // If this is not a source node, don't do automatic translations.
  // TODO: actually there's no real reason for this - we could translate
  // nodes that are non-source  too, but we'd need to look up the source
  // node for $node->tnid.

// OPENWAVE translation should not work when user adding issues , check moderator issue status
if($node->type == 'poll'){
    if($node->field_mod_status[0]['value'] == 0 || !isset($node->field_mod_status[0]['value'])){
        return false;
    }
}
  // Do a variable check to ensure this content type should be translated.
  // Additional check to make sure there *is* a node body - not always the case.
  if (!$node->translation_source && variable_get('language_content_type_'. $node->type, 0) == 2 && $node->body) {
    $node->language = i18n_get_lang(); // set language of source node to current language
    $node->tnid = $node->nid; // source node must point to itself

    // create a translation of the node for each enabled language
    // other than the source node language
    $languages = i18n_language_list();
    unset($languages[$node->language]); // exclude the language of the new node

    foreach ($languages as $langcode => $language) {
      module_load_include('inc', 'node', 'node.pages'); // needed for node_object_prepare()

      // Prepare the new node.
      $new_node = (object)array();
      node_object_prepare($new_node);

      $new_node->name  = $node->name;
      $new_node->type  = $node->type;
      $new_node->language = $langcode;
      $new_node->tnid = $node->nid;
      $new_node->format = $node->format;
      $new_node->status = $node->status;
      // Mark the automated translation as out of date for review.
      $new_node->translate = 1;
      // Respect comment settings, if applicable.
      if (module_exists('comment')) {
        $new_node->comment = $node->comment;
      }


      // TODO: chunks of this next bit should probably be separate functions

      // set our flag
      $body_split = FALSE;
      
      // make sure translated body and title are empty strings
      $tbody = '';
      $ttitle = '';
      
      // if the node body is too long, split it up
      if (strlen($node->body) > 1000) {
        // we need to send HTML to Google to not lose formatting
        $body_markup = check_markup($node->body);
        // split up the string in to our array
        $body_array = str_split($body_markup, 1000);
        // set flag so translating logic knows we split the string
        $body_split = TRUE;
        // make a copy of the array for manipulating safely
        $tmp_array = $body_array;
        // get the number of keys
        $tmp_keys = array_keys($tmp_array);
        // unset the first key, we don't need it
        unset($tmp_keys[0]);
        
        // cycle through remaining keys
        foreach ($tmp_keys as $key) {
          // find where the next real sentence ends
          $pos = strpos($body_array[$key], '. ');
          // complete the sentence of the previous chunk
          $body_array[$key - 1] = $body_array[$key - 1] . substr($body_array[$key], 0, $pos + 1);
          // get rid of the sentence fragment in the current chunk
          $body_array[$key] = substr_replace($body_array[$key], '', 0, $pos + 1);
        }
      }
      
      // get a translation from Google
      require_once("gtranslate-api-php/GTranslate.php");
      $func = $node->language . '_to_' . $langcode;
      
      if ($body_split) {
        // define variables
        $tbody_array = array();
        $chunk_failed = FALSE;
        
        foreach ($body_array as $key => $chunk) {
          try {
            $gt = new Gtranslate;
            $tbody_array[$key] = $gt->$func($chunk);
          }
          catch (GTranslateException $ge) {
            // if there was a problem, pass the error to watchdog.
            $message = t('From GTranslate: ') . $ge->getMessage();
            watchdog(t('auto translate'), $message, array(), WATCHDOG_ERROR);
            // flag chunk failure
            $chunk_failed = TRUE;
          }
        }
        
        if ($chunk_failed) {
          $new_node->body = $node->body;
        }
        else {
          foreach ($tbody_array as $tchunk) {
            $tbody .= $tchunk;
          }
          // attempt to turn mark-up back in to real line breaks
          // TODO: I'm sure this can be nicer! See http://drupal.org/node/684340
          $tbody = str_replace('<p>', '', $tbody);
          $tbody = str_replace('</p>', "\n\n", $tbody);
          $tbody = str_replace('<br>', "\n", $tbody);
          $tbody = str_replace('<br/>', "\n", $tbody);
          $tbody = str_replace('<br />', "\n", $tbody);
          $new_node->body = $tbody;
        }
        
      }
      else {
        try {
          $gt = new Gtranslate;
          // we need to send HTML to Google to not lose formatting
          $body_markup = check_markup($node->body);
          $tbody = $gt->$func($body_markup);
          // attempt to turn mark-up back in to real line breaks
          // TODO: I'm sure this can be nicer! See http://drupal.org/node/684340
          $tbody = str_replace('<p>', '', $tbody);
          $tbody = str_replace('</p>', "\n\n", $tbody);
          $tbody = str_replace('<br>', "\n", $tbody);
          $tbody = str_replace('<br/>', "\n", $tbody);
          $tbody = str_replace('<br />', "\n", $tbody);
          $new_node->body = $tbody;
        }
        catch (GTranslateException $ge) {
          // if there was a problem, pass the error to watchdog.
          $message = t('From GTranslate: ') . $ge->getMessage();
          watchdog(t('auto translate'), $message, array(), WATCHDOG_ERROR);
          // fall back to original node body.
          $new_node->body = $node->body;
        }
      }


      try {
        $gt = new Gtranslate;
        $ttitle = $gt->$func($node->title);
        // get rid of any HTML encoded data Google might send
        $new_node->title = html_entity_decode($ttitle, ENT_QUOTES);
      }
      catch (GTranslateException $ge) {
        // if there was a problem, pass the error to watchdog.
        $message = t('From GTranslate: ') . $ge->getMessage();
        watchdog(t('auto translate'), $message, array(), WATCHDOG_ERROR);
        // fall back to original title.
        $new_node->title = $node->title;
      }


      // OPENWAVE traslate poll choices
      if($node->type == 'poll'){       
          foreach($node->choice as $key=>$choice){
             $chtext = $choice['chtext'];
             $chorder = $choice['chorder'];
             $chvotes = $choice['chvotes'];
             try {
                $gt = new Gtranslate;
                $choiceVal = $gt->$func($chtext);
                // get rid of any HTML encoded data Google might send
                $new_node->choice[$key]['chtext'] = html_entity_decode($choiceVal, ENT_QUOTES); 
              }
              catch (GTranslateException $ge) {
                // if there was a problem, pass the error to watchdog.
                $message = t('From GTranslate: ') . $ge->getMessage();
                watchdog(t('auto translate'), $message, array(), WATCHDOG_ERROR);
                // fall back to original title.
                $new_node->choice[$key]['chtext'] = $node->choice[$key]['chtext'];
              }
              $new_node->choice[$key]['chorder'] = $chorder;
              $new_node->choice[$key]['chvotes'] = $chvotes;              
         }
      }
    // OPENWAVE traslate poll choices ends

//    // set translated nid as node reference for translated forums (debate, resource)
//    if($node->type == 'forum'){
//    $mainRefId = db_result(db_query("SELECT field_ref_qid_nid FROM {content_type_forum} WHERE nid = '$node->nid'"));
//    $tnid = db_result(db_query("SELECT nid FROM {node} WHERE tnid = '$mainRefId' AND language = '$langcode'"));
//    $fType = db_result(db_query("SELECT field_type_value FROM {content_type_forum} WHERE nid = '$node->nid'"));
//
//    $new_node->field_ref_qid[0]['nid'] = $tnid;
//    $new_node->field_private[0]['value'] ='';
//    $new_node->field_type[0]['value'] = $fType;
//
//    if($fType == 1){
//    $tid = get_taxonomy_id('forum','Debate');
//    }elseif($fType == 2){
//    $tid = get_taxonomy_id('forum','Resource');
//    }
//    $new_node->taxonomy = array($tid);
//    }
     $new_node->uid = $node->uid;
      // TODO: Look up CCK fields and cycle through and translate too.

      // create the new translation node
    //node_save(node_submit($new_node));
    node_save($new_node);
     // set alias url
    $dst = clean_url(myTruncate($new_node->title, 100, ''), '', '-', $new_node->nid);
    $url = 'node/' . $new_node->nid;
    db_query("INSERT INTO {url_alias} (src, dst, language) VALUES ('%s', '%s', '%s')", $url, $dst, $langcode);
    
      // inform user of new translation
      drupal_set_message(t('New translation draft with language code of %language created in node %nid.', array('%language' => $new_node->language, '%nid' => $new_node->nid)));
  }
    // Return outside of the foreach loop, returning too early causes attached files to be lost.
    return array('node' => $node);
  }
}

/**
 * Implementation of hook_rules_defaults.
 */
function i18n_auto_rules_defaults() {
  return array(
    'rules' => 
    array (
      'rules_1' => 
      array (
        '#type' => 'rule',
        '#set' => 'event_node_insert',
        '#label' => 'Auto translate',
        '#active' => 1,
        '#weight' => '0',
        '#categories' => 
        array (
          0 => 'i18n',
        ),
        '#status' => 'custom',
        '#conditions' => 
        array (
          0 => 
          array (
            '#type' => 'condition',
            '#settings' => 
            array (
              '#argument map' => 
              array (
                'node' => 'node',
              ),
            ),
            '#name' => 'rules_condition_content_is_new',
            '#info' => 
            array (
              'label' => 'Created content is new',
              'arguments' => 
              array (
                'node' => 
                array (
                  'type' => 'node',
                  'label' => 'Content',
                ),
              ),
              'module' => 'Node',
            ),
            '#weight' => 0,
          ),
        ),
        '#actions' => 
        array (
          0 => 
          array (
            '#weight' => 0,
            '#info' => 
            array (
              'label' => 'Translate a node into every enabled language',
              'arguments' => 
              array (
                'node' => 
                array (
                  'type' => 'node',
                  'label' => 'Content',
                ),
              ),
              'module' => 'Node',
            ),
            '#name' => 'i18n_auto_action_node_translate',
            '#settings' => 
            array (
              '#argument map' => 
              array (
                'node' => 'node',
              ),
            ),
            '#type' => 'action',
          ),
        ),
        '#version' => 6003,
      ),
    ),
  );
}
