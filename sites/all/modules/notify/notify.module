<?php

/**
 * Implementation of hook_perm().
 */
function notify_perm() {
  return array(
    'notify',
    'Notify Report',
    'Notify Report Content',
    'Notify Report Content2',
    'Notify Report Content3',
    'Admin Notification',
    'happening now'
  );
}

/**
 * Implementation of hook_menu().
 */
function notify_menu() {

    $items['admin/notification'] = array(
        'title' => 'Change Notification Mail',
        'page callback' => 'admin_notify',
        'type' => MENU_SUGGESTED_ITEM,
        'access arguments' => array('Admin Notification'),
        'file' => 'notify.pages.inc',
    );

    $items['admin/notify/settings'] = array(
        'title' => 'Notification Settings',
        'page callback' => 'notify_settings',
        'type' => MENU_SUGGESTED_ITEM,
        'access arguments' => array('Admin Notification'),
        'file' => 'notify.pages.inc',
    );
    $items['admin/notify/messages'] = array(
        'title' => 'Notification Messages',
        'page callback' => 'notify_messages',
        'type' => MENU_SUGGESTED_ITEM,
        'access arguments' => array('Admin Notification'),
        'file' => 'notify.pages.inc',
    );

    $items['admin/save_notify'] = array(
        'title' => 'Notification',
        'page callback' => 'admin_notify_save',
        'type' => MENU_CALLBACK,
        'access arguments' => array('Admin Notification'),
        'file' => 'notify.pages.inc',
    );

    $items['notify/stream/%'] = array(
        'title' => 'Notification',
        'page callback' => 'notify_stream',
        'type' => MENU_CALLBACK,
        'page arguments' => array(2),
        'access arguments' => array('notify'),
        'file' => 'notify.pages.inc',
    );

    $items['happening/stream/%'] = array(
        'title' => 'Happening Now Stream',
        'page callback' => 'happening_stream',
        'type' => MENU_CALLBACK,
        'page arguments' => array(2),
        'access arguments' => array('happening now'),
        'file' => 'notify.pages.inc',
    );


    return $items;
}



function notify_messages() {

    return drupal_get_form('notify_messages_form');
}

function notify_messages_form(&$form_state) {
    global $base_url, $user;
    $limit = 3;
    // Our form array
    $form = array();
    $status = array();

    $query = "SELECT * FROM {notify_activity} AS n LEFT JOIN {notify_messages} AS m ON n.message_id=m.message_id  ORDER BY n.naid ASC";
    //$rs = db_query($query);

    $count = db_result(db_query("SELECT count(*) FROM {notify_activity} as n left join {notify_messages} as m on n.message_id=m.message_id"));
    $result = pager_query(db_rewrite_sql($query), $limit);

    while ($note = db_fetch_object($result)) {
        // Store the nid for our checkboxes 'options'
        $msgids[$note->naid] = '';
        // We're just going to grab a few fields for now to make things simple
        // but this data could be anything from any database table
        // The important thing to note is that we're just putting this data
        // in the form as markup
        $form['message'][$note->naid] = array(
            '#type' => 'markup',
            '#value' => $note->message,
        );
        $form['desc'][$note->naid] = array(
            '#type' => 'markup',
            '#value' => theme('notify_' . $note->message_id, $note),
        );
        $userdet = user_load($note->uid);
        $form['muser'][$note->naid] = array(
            '#type' => 'markup',
            '#value' => l($userdet->name, $userpath),
        );
        if ($note->status)
            $status[] = '';
    }
    // This is the checkboxes form element.
    // We're passing in the $nodes array which is just an array of the
    // Node nids that we looped through above. This will produce a checkbox
    // for each node
    $form['status'] = array(
        '#type' => 'checkboxes',
        '#options' => $msgids,
        '#default_value' => $status
    );

    // The update button
    $form['update'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
    );
    $form['pager'] = array('#value' => theme('pager', NULL, $limit, 0));
    $form['#theme'] = 'notify_message_form';
    //   echo '<pre>';print_r($form);
    return $form;
}

function theme_notify_message_form($form) {
    // Our header information
    $header = array(
        // This is the magic that creates the 'select all' box
        theme('table_select_header_cell'),
        array('data' => t('Message ')),
        array('data' => t('Description')),
        array('data' => t(' Done by ')),
    );

    // A variable to hold the row information for each table row
    $rows = array();
    $form['pager']['#value'] = !empty($form['pager']['#value']) ? $form['pager']['#value'] : '';

    // element_children filters out any form properties from an array
    // (i.e. items whose keys have a '#' before them) and leaves us
    // with an array of the leftover keys
    // So, this next bit will loop through the available nids that we're
    // using to numerate our form data and create render out the data
    // to our table. To get an idea of what your form data looks like
    // uncomment the following lines (make sure you have the devel module on!)
    // dpm($form);
    // dpm($form['title']);
    // dpm(element_children($form['title']));
    foreach (element_children($form['message']) as $key) {
        $rows[] = array(//row
            'data' => array(//row data
                array(//Cell1
                    // $form['nodes'] now contains individual checkbox form elements!
                    'data' => drupal_render($form['status'][$key]),
                    'class' => '',
                ),
                array(//Cell2
                    'data' => drupal_render($form['message'][$key]),
                    'class' => '',
                ),
                array(//Cell3
                    'data' => drupal_render($form['desc'][$key]),
                    'class' => '',
                ),
                array(//Cell4
                    'data' => drupal_render($form['muser'][$key]),
                    'class' => '',
                ),
            ), //endrow
            'class' => '', //row class
        ); //endrow
    }

    // With our data all formatted nicely, we can just use theme_table
    // To produce our table
    $output = theme('table', $header, $rows, array('class' => 'delete_nodes'));

    // The function drupal_render() Keeps track of all rendered elements
    // And makes sure it doesn't render the same item twice. Running
    // drupal_render on the form at the end just renders what's left:
    // the delete button
    $output .= drupal_render($form);
    if ($form['pager']['#value']) {
        $output .= drupal_render($form['pager']);
    }

    // And we return the output
    return $output;
}

function notify_messages_form_submit($form, &$form_state) {
    // array_filter will remove any array items that evaluate to FALSE
    $form_values = $form['values'];
    $featured = $form_values['status'];
    $nodes = $form_state['values']['status'];

    foreach ($nodes as $key => $value) {

        if ($value) {
            db_query("delete from {notify_activity} where naid='$key' ");
        }
    }
    drupal_set_message(t('Selected Messages has been deleted successfully!'));
}

function notify_settings() {

    return drupal_get_form('notify_activity_form');
}

function notify_activity_form(&$form_state) {
    global $base_url, $user;

    // Our form array
    $form = array();
    $status = array();
 
    $query = "SELECT * from {notify_messages} order by mid ASC";
    $rs = db_query($query);


    while ($note = db_fetch_object($rs)) {
        // Store the nid for our checkboxes 'options'
        $msgids[$note->mid] = '';
        // We're just going to grab a few fields for now to make things simple
        // but this data could be anything from any database table
        // The important thing to note is that we're just putting this data
        // in the form as markup
        $form['message'][$note->mid] = array(
            '#type' => 'markup',
            '#value' => $note->message,
        );
        $form['desc'][$note->mid] = array(
            '#type' => 'markup',
            '#value' => $note->description,
        );
        if ($note->status)
            $status[] = $note->mid;
    }
    // This is the checkboxes form element.
    // We're passing in the $nodes array which is just an array of the
    // Node nids that we looped through above. This will produce a checkbox
    // for each node
    $form['status'] = array(
        '#type' => 'checkboxes',
        '#options' => $msgids,
        '#default_value' => $status
    );

    // The update button
    $form['update'] = array(
        '#type' => 'submit',
        '#value' => t('Update Message Status'),
    );

    $form['#theme'] = 'notify_settings_form';
    return $form;
}

function notify_activity_form_submit($form, &$form_state) {
    // array_filter will remove any array items that evaluate to FALSE
    $form_values = $form['values'];
    $featured = $form_values['status'];


    $nodes = $form_state['values']['status'];

    foreach ($nodes as $key => $value) {

        if ($value) {
            db_query("update {notify_messages} set status='1' where mid='$key' ");
        } else {
            db_query("update {notify_messages} set status='0' where mid='$key' ");
        }
    }

    drupal_set_message(t('Notification status has been updated!'));

    drupal_goto('admin/notify/settings');
}

function theme_notify_settings_form($form) {
    // Our header information
    $header = array(
        // This is the magic that creates the 'select all' box
        theme('table_select_header_cell'),
        array('data' => t('Message ')),
        array('data' => t('Description')),
    );

    // A variable to hold the row information for each table row
    $rows = array();
    // element_children filters out any form properties from an array
    // (i.e. items whose keys have a '#' before them) and leaves us
    // with an array of the leftover keys
    // So, this next bit will loop through the available nids that we're
    // using to numerate our form data and create render out the data
    // to our table. To get an idea of what your form data looks like
    // uncomment the following lines (make sure you have the devel module on!)
    // dpm($form);
    // dpm($form['title']);
    // dpm(element_children($form['title']));
    foreach (element_children($form['message']) as $key) {
        $rows[] = array(//row
            'data' => array(//row data
                array(//Cell1
                    // $form['nodes'] now contains individual checkbox form elements!
                    'data' => drupal_render($form['status'][$key]),
                    'class' => '',
                ),
                array(//Cell2
                    'data' => drupal_render($form['message'][$key]),
                    'class' => '',
                ),
                array(//Cell3
                    'data' => drupal_render($form['desc'][$key]),
                    'class' => '',
                ),
            ), //endrow
            'class' => '', //row class
        ); //endrow
    }

    // With our data all formatted nicely, we can just use theme_table
    // To produce our table
    $output = theme('table', $header, $rows, array('class' => 'delete_nodes'));

    // The function drupal_render() Keeps track of all rendered elements
    // And makes sure it doesn't render the same item twice. Running
    // drupal_render on the form at the end just renders what's left:
    // the delete button
    $output .= drupal_render($form);

    // And we return the output
    return $output;
}




/* BOF SET NOTIFY LOG apr 19 2011 */

function set_notify_log($uid = '', $nid ='', $message_id = '', $variables = '') {
    global $language;
    $curLanguage = $language->language;
    $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = '%d'", $uid));
    $message = db_result(db_query("SELECT message FROM {notify_messages} WHERE message_id = '%s'", $message_id));
    $variables = serialize($variables);
    $sql = "INSERT INTO {notify_activity} SET uid = '%d', nid = '%d', message_id = '%s', timestamp = '%d', variables = '%s'";
    db_query($sql, $uid, $nid, $message_id, time(), $variables);

    // send notification sumary email
    hm_mails('', '', 'notify_summary');

}

/* EOF SET NOTIFY LOG apr 19 2011 */

function notify_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks[0] = array(
                'info' => t('Following activity Stream'),
            );
            $blocks[1] = array(
                'info' => t('Happening Right Now'),
            );
            $blocks[2] = array(
                'info' => t('User Activity Starem'),
            );
            return $blocks;

        case 'view':
            switch ($delta) {
                case '0':
                    $block['subject'] = t("Following activity Stream");
                    $block['content'] = _following_activity($uid);
                    break;
                case '1':
                    $block['subject'] = t("HAPPENING NOW");
                    $block['content'] = _happening_now();
                    break;
                case '2':
                    $block['subject'] = t("User activity Stream");
                    $block['content'] = _user_activity_stream();
                    break;
            }
            return $block;
    }
}

function notify_theme() {
    return array(
        'notify_settings_form' => array('arguments' => array('form' => NULL),),
        'notify_message_form' => array('arguments' => array('form' => NULL),),
        'notify_activity_stream' => array(
            'template' => 'notify-activity-stream',
            'arguments' => array('udetails' => NULL, 'userPicture' => NULL, 'data' => NULL, 'message' => NULL, 'message_id' => NULL, 'submitted' => NULL),
        ),
        'user_activity_stream' => array(
            'template' => 'user-activity-stream',
            'arguments' => array('filters' => NULL, 'output' => NULL, 'pagination' => NULL),
        ),
        'user_activity_stream_thread' => array(
            'template' => 'user-activity-stream-thread',
            'arguments' => array('udetails' => NULL, 'userPicture' => NULL, 'data' => NULL, 'message' => NULL, 'message_id' => NULL, 'submitted' => NULL),
        ),
        'following_activity_stream' => array(
            'template' => 'following-activity-stream',
            'arguments' => array('filters' => NULL, 'output' => NULL, 'pagination' => NULL),
        ),
    );
}



function _following_activity($uid = '') {
    global $user;
    drupal_add_js(drupal_get_path('module', 'notify') . '/scripts/script.js');
    
    //drupal_set_html_head('<script type="text/javascript" src="https://getfirebug.com/firebug-lite-debug.js"></script>');
    $uarray = array();
    $start = variable_get(arg(1), '0');
   
    $uarray = _activity_heartbeat_related_uid_info($user->uid);
    $filter = $_GET['filter'];
    $filterPath = '?filter=';
    if (!empty($uarray)) {
        $limit = 15;
        // filteration url html
       $filterPath = '?filter=';
        $filter = $_GET['filter'];
        if($filter=='all' || $filter==''){
            $aclass = 'class="active"';
            $vclass = '';
            $dclass = '';
            $iclass = '';
            $rclass = '';
        }else if($filter=='votes'){
            $aclass = '';
            $vclass = 'class="active"';
            $dclass = '';
            $iclass = '';
            $rclass = '';
        }else if($filter=='debates'){
            $aclass = '';
            $vclass = '';
            $dclass = 'class="active"';
            $iclass = '';
            $rclass = '';
        }else if($filter=='issues'){
            $aclass = '';
            $vclass = '';
            $dclass = '';
            $iclass = 'class="active"';
            $rclass = '';
        }else if($filter=='resources'){
            $aclass = '';
            $vclass = '';
            $dclass = '';
            $iclass = '';
            $rclass = 'class="active"';
        }else{
            $class = '';
        }
        //filter where conditions
        $filters = '<a '.$aclass.' href="'.$filterPath.'all"> '.t('All').'</a> |
                    <a '.$vclass.' href="'.$filterPath.'votes">'.t('Votes').'</a> |
                    <a '.$dclass.' href="'.$filterPath.'debates">'.t('Arguments').'</a> |
                    <a '.$iclass.' href="'.$filterPath.'issues">'.t('Issues Added').'</a> |
                    <a '.$rclass.' href="'.$filterPath.'resources">'.t('References').'</a>';

        $where = notify_user_stream_filter_where($filter);
        
        // open ids
        $open_msgids = "'add_question', 'add_debate', 'add_resource', 'deb_agree', 'deb_disagree', 'res_reply_agree', 'res_reply_disagree', 'add_vote', 'resource_reply', 'user_follow'";
        //users whom u r following
        $uids = implode(',', $uarray);
        //data query
        $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = b.`uid`
     WHERE b.`uid`IN ($uids) AND a.status = 1 AND `b`.`message_id` IN($open_msgids) $where ORDER BY b.naid DESC";
       
//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
        $query = pager_query($sql, $limit);
        
        //printf($sql, $uids, $uids, $start,$limit);
        $i = 0;
      
        
        while ($result = db_fetch_object($query)) {

            //$output.= theme('notify_' . $result->message_id, $result);
            $udetails = user_load($result->uid);
            $data = unserialize($result->variables);
            $submitted = ago(date("Y-m-d H:i:s", $result->timestamp));
            $userPicture = UserPicture_small_src($result->uid);
            $message = $result->message;
            $message_id = $result->message_id;
            $output .= theme('notify_activity_stream', $udetails, $userPicture, $data, $message, $message_id, $submitted);
           
            $i++;
        }
        if (!$i) {
            $output.= t('No User Activity Foundss!');
        }
         $pagination = theme('pager', NULL, $limit, 0);
        
    } else {
        $output.= t('No User Activity Found!');
    }
    
    
    
    return theme('following_activity_stream', $filters, $output, $pagination);
}

function notify_stream($start='') {

    global $user;
    $max = 50;
    $limit = 15;


    $filter = $_GET['filter'];
    $where = notify_filter_where($filter);
    $json = array();
    $uarray = array();
    $json['more'] = true;
    $json['error'] = false;
    if (($start + $limit) > $max) {
        $limit = max(0, $max - $start);
        $json['more'] = false;
    }

    $uarray = _activity_heartbeat_related_uid_info($user->uid);
    // $start=variable_get(arg(1),'0');
    if ($_GET['action'] == 'more') {

        if (!empty($uarray)) {
            $uids = implode(',', $uarray);
            //data query
            $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` IN (%s)
     WHERE b.`uid`IN (%s) AND a.status = 1 $where ORDER BY b.naid DESC LIMIT %d, %d";
            //count query
//            $count = db_result(db_query("SELECT count(distinct b.naid) FROM `notify_activity` b
//INNER JOIN `notify_messages` a
//        ON `b`.`message_id` = `a`.`message_id`
//INNER JOIN `users` u
//        ON `u`.`uid` IN (%s)
//     WHERE b.`uid`IN (%s) AND a.status = 1 $where ORDER BY b.timestamp DESC LIMIT %d,%d  ",$uids,$uids,$start,$limit));
//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
            $query = db_query($sql, $uids, $uids, $start, $limit);
            $i = 0;

            while ($result = db_fetch_object($query)) {
                $output.= '<div id="msg-' . $result->naid . '">';
                $output.= theme('notify_' . $result->message_id, $result);
                $output.= '</div>';
                $i++;
            }


            if ($i < $limit) {
                $json['more'] = false;
            }
            if (!$i) {
                $json['error'] = true;
                $json['more'] = false;
                $output = 'No User Activity Found!';
            }
        } else {
            $output = 'No User Activity Found!';
        }
        $json['status'] = true;

        $json['content'] = $output;
        $json['count'] = $i;

        $json['start'] = $start + $limit;
        print json_encode($json);
    }
    if ($_GET['action'] == 'new') {
        $firstid = $_GET['firstid'];
        if (!empty($uarray)) {
            $uids = implode(',', $uarray);
            //data query
            $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` IN (%s)
     WHERE b.`uid`IN (%s) AND a.status = 1 AND b.naid>$firstid $where ORDER BY b.naid DESC LIMIT %d, %d";
            //count query
            $count = db_result(db_query("SELECT count(distinct b.naid) FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` IN (%s)
     WHERE b.`uid`IN (%s) AND a.status = 1  $where ORDER BY b.timestamp DESC LIMIT %d,%d  ", $uids, $uids, 0, $limit));

//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
            $query = db_query($sql, $uids, $uids, 0, $limit);

            $i = 0;

            while ($result = db_fetch_object($query)) {
                $output.= '<div id="msg-' . $result->naid . '">';
                $output.= theme('notify_' . $result->message_id, $result);
                $output.= '</div>';
                $i++;
            }

            if ($i == 0) {
                $json['error'] = true;
                $output = 'No User Activity Found!';
            }
        } else {
            $output = 'No User Activity Found!';
        }
        $json['status'] = true;
        $json['content'] = $output;
        $json['count'] = $count;

        $json['start'] = $start + $limit;
        print json_encode($json);
    }
}

function _activity_heartbeat_related_uid_info($uid) {
    static $uids = array();

    if (!isset($uids[$uid])) {
        $uids[$uid] = _activity_get_friends($uid);
    }

    return $uids[$uid];
}

function notify_filter_where($filter='') {

    $where = '';
    if ($filter == 'votes') {
        $where .= "AND (a.message_id = 'add_vote' OR a.message_id = 'change_answer')";
    } else if ($filter == 'issues') {
        $where .= "AND (a.message_id = 'add_question' OR a.message_id = 'question_flag')";
    } else if ($filter == 'debates') {
        $where .= "AND (a.message_id = 'add_debate' OR a.message_id = 'debate_reply' OR a.message_id = 'flag_debate')";
    } else if ($filter == 'resources') {
        $where .= "AND (a.message_id = 'add_resource' OR a.message_id = 'resource_reply' OR a.message_id = 'flag_resource')";
    } else if ($filter == 'agrees') {
        $where .= "AND (a.message_id = 'deb_agree' OR a.message_id = 'deb_disagree' OR a.message_id = 'res_agree'
                    OR a.message_id = 'res_disagree' OR a.message_id = 'deb_reply_agree'
                    OR a.message_id = 'deb_reply_disagree' OR a.message_id = 'res_reply_agree'
                    OR a.message_id = 'res_reply_disagree')";
    } else if ($filter == 'badges') {
        $where .= "AND (a.message_id = 'add_badge')";
    }
    // filteration


    return $where;
}

function notify_user_stream_filter_where($filter='') {
    $where = '';
    if ($filter == 'votes') {
        $where .= "AND (a.message_id = 'add_vote')";
    } else if ($filter == 'issues') {
        $where .= "AND (a.message_id = 'add_question')";
    } else if ($filter == 'debates') {
        $where .= "AND (a.message_id = 'add_debate' OR a.message_id = 'deb_agree' OR a.message_id = 'deb_disagree')";
    } else if ($filter == 'resources') {
        $where .= "AND (a.message_id = 'add_resource' OR a.message_id = 'resource_reply' OR a.message_id = 'res_reply_agree' OR a.message_id = 'res_reply_disagree')";
    } else if ($filter == 'badges') {
        $where .= "AND (a.message_id = 'add_badge')";
    }
    // filteration
    return $where;
}

/**
 * Generate the view of people that a user is following
 */
function _activity_get_friends($uid) {

    $uids = array();
    //$api = variable_get('heartbeat_relations_api', 'user_relationships_api');
    $api = 'user_relationships_api';

    if ($api == 'friendlist_api') {

        /* COMMENTED BY RAM ON HEARTBEAT FRNDS
          $sql = "SELECT fr.requestee_id as 'uid' FROM {friendlist_relations} as fr
          INNER JOIN {friendlist_statuses} fs ON fs.rid = fr.rid
          WHERE fr.requester_id = %d AND fs.status = '%s' ORDER BY fs.last_update_time DESC, fr.rid DESC";
          $result = db_query($sql, $uid, 'TW_BOTH'); */

        $sql = " select distinct follower_id as 'uid' from follower where follower_status=1 and uid<>0 and follower_id<>0 and uid=$uid";
        $result = db_query($sql);
        while ($row = db_fetch_object($result)) {
            $uids[] = $row->uid;
        }
    } elseif ($api == 'user_relationships_api') {

        // If the current user is fan, following, ..., has a one way relation
        // to the other user, or if he has a two way relation to the user ...
        // fetch them
        $sql = "SELECT DISTINCT ur.requestee_id FROM {user_relationships} ur
    INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid
    WHERE
    (
      ur.requester_id = %d AND urt.is_oneway = 0
    OR
      ur.requester_id = %d AND ur.approved = 1 AND urt.is_oneway <> 0
    )";
        $result = db_query($sql, $uid, $uid);
        if (!empty($result)) {
            while ($row = db_fetch_object($result)) {
                $uids[] = $row->requestee_id;
            }
        }
    } elseif ($api == 'flag_friend_api') {

        $uids = array_keys(flag_friend_get_friends($uid));
    } else {
        $sql = " select distinct follower_id as 'uid' from follower where follower_status=1 and uid<>0 and follower_id<>0 and uid=$uid";
        $result = db_query($sql);
        while ($row = db_fetch_object($result)) {
            $uids[] = $row->uid;
        }
    }

    return $uids;
}

// phase VI happening now
function _happening_now() {

    global $base_url, $user, $gDocPath, $base_root;
    drupal_add_js(drupal_get_path('module', 'notify') . '/scripts/script.js');
    $data = '
var streamtimer = setInterval(function() {
      load_stream(jQuery("div.more-link a"),"new");
}, 10000);
setTimeout(function(){clearInterval(streamtimer);}, 240000);
';
    drupal_add_js($data, $type = 'inline');
    //drupal_set_html_head('<script type="text/javascript" src="https://getfirebug.com/firebug-lite-debug.js"></script>');

    $start = variable_get(arg(1), '0');
    $limit = 10;


    
    //$restrict_msgids = "'add_coins', 'lose_coins', 'user_logout', 'user_login', 'add_points'";
    $open_msgids = "'add_question', 'add_debate', 'add_resource', 'deb_agree', 'deb_disagree', 'res_reply_agree', 'res_reply_disagree', 'add_vote', 'resource_reply', 'user_follow'";

    //data query
    $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = `b`.`uid`
     WHERE  a.status = 1 AND `b`.`message_id` IN($open_msgids) ORDER BY b.naid DESC LIMIT %d, %d";
    //count query
//       $count = db_result(db_query("SELECT count(distinct b.naid) FROM `notify_activity` b
//INNER JOIN `notify_messages` a
//        ON `b`.`message_id` = `a`.`message_id`
//INNER JOIN `users` u
//        ON `u`.`uid` = `b`.`uid`
//     WHERE a.status = 1 AND `b`.`message_id` NOT IN($restrict_msgids) ORDER BY b.naid DESC"));
//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
    $query = db_query($sql, $start, $limit);

    //printf($sql, $uids, $uids, $start,$limit);
    $i = 0;

// restricted message ids.. these should not display in happening now
    $count = db_affected_rows($query);

    $showCnt = 6;
    $hideCnt = $count - $showCnt;

    $output.='<div class="uactivity" id="uactivity">';
    while ($result = db_fetch_object($query)) {
        $style = $i >= $hideCnt ? "display:block" : "display:none";
        $output.= '<div id="msg-' . $result->naid . '" style="' . $style . '" class="activity-stream">';
        //$output.= theme('notify_' . $result->message_id, $result);
        // stream theme
        $udetails = user_load($result->uid);
        $data = unserialize($result->variables);
        $submitted = ago(date("Y-m-d H:i:s", $result->timestamp));
        $userPicture = UserPicture_small_src($result->uid);
        $message = $result->message;
        $message_id = $result->message_id;
        $output .= theme('notify_activity_stream', $udetails, $userPicture, $data, $message, $message_id, $submitted);

        $output.= '</div>';
        $i++;
    }
    if (!$i) {
        $output.='No User Activity Found!';
    }

    $output.='</div>';
    if ($count > $limit) {
        $style = 'style="display:none"';
    } else {
        $style = 'style="display:none"';
    }

    $output.='<div ' . $style . ' class="more-link"><a id="' . ($start + $limit) . '" href="' . $base_url . '/happening/stream/">More Activity</a></div>';
    return $output;
}

function happening_stream($start='') {

    global $base_url, $user;
    $max = 50;
    $limit = 10;



    $json = array();

    $json['more'] = true;
    $json['error'] = false;
    if (($start + $limit) > $max) {
        $limit = max(0, $max - $start);
        $json['more'] = false;
    }

    //$restrict_msgids = "'add_coins', 'lose_coins', 'user_logout', 'user_login', 'add_points'";
    $open_msgids = "'add_question', 'add_debate', 'add_resource', 'deb_agree', 'deb_disagree', 'res_reply_agree', 'res_reply_disagree', 'add_vote', 'resource_reply', 'user_follow'";

    // $start=variable_get(arg(1),'0');
    if ($_GET['action'] == 'more') {



        //data query
        $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = `b`.`uid`
     WHERE a.status = 1 AND `b`.`message_id` IN($open_msgids) ORDER BY b.naid DESC LIMIT %d, %d";
        //count query
//            $count = db_result(db_query("SELECT count(distinct b.naid) FROM `notify_activity` b
//INNER JOIN `notify_messages` a
//        ON `b`.`message_id` = `a`.`message_id`
//INNER JOIN `users` u
//        ON `u`.`uid` IN (%s)
//     WHERE b.`uid`IN (%s) AND a.status = 1 $where ORDER BY b.timestamp DESC LIMIT %d,%d  ",$uids,$uids,$start,$limit));
//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
        $query = db_query($sql, $start, $limit);

        $i = 0;

        while ($result = db_fetch_object($query)) {
                $output.= '<div id="msg-' . $result->naid . '">';
                $output.= theme('notify_' . $result->message_id, $result);
                $output.= '</div>';
                $i++;
        }


        if ($i < $limit) {
            $json['more'] = false;
        }
        if (!$i) {
            $json['error'] = true;
            $json['more'] = false;
            $output = 'No User Activity Found!';
        }

        $json['status'] = true;

        $json['content'] = $output;
        $json['count'] = $i;

        $json['start'] = $start + $limit;
        print json_encode($json);
    }
    if ($_GET['action'] == 'new') {
        $firstid = $_GET['firstid'];
        //data query
        $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = `b`.`uid`
     WHERE a.status = 1 AND b.naid>$firstid AND `b`.`message_id` IN($open_msgids) ORDER BY b.naid DESC LIMIT %d, %d";
        //count query
        $count = db_result(db_query("SELECT count(distinct b.naid) FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = `b`.`uid`
     WHERE a.status = 1 AND b.naid>$firstid AND `b`.`message_id` IN($open_msgids)  ORDER BY b.timestamp DESC LIMIT %d,%d  ", 0, $limit));

//$query=db_query_range(db_rewrite_sql($sql), $uids, $uids, $start,$limit);
        $query = db_query($sql, 0, $limit);


        $i = 0;

        while ($result = db_fetch_object($query)) {
           
                $output.= '<div id="msg-' . $result->naid . '" class="activity-stream" style="display:none">';
               // $output.= theme('notify_' . $result->message_id, $result);
                 // stream theme
                $udetails = user_load($result->uid);
                $data = unserialize($result->variables);
                $submitted = ago(date("Y-m-d H:i:s", $result->timestamp));
                $userPicture = UserPicture_small_src($result->uid);
                $message = $result->message;
                $message_id = $result->message_id;
                $output .= theme('notify_activity_stream', $udetails, $userPicture, $data, $message, $message_id, $submitted);
                $output.= '</div>';
                $i++;
            
        }

        if ($i == 0) {
            $json['error'] = true;
            $output = 'No User Activity Found!';
        }

        $json['status'] = true;
        $json['content'] = $output;
        $json['count'] = $count;

        $json['start'] = $start + $limit;
        print json_encode($json);
    }
}

function get_translated_node($nid = '', $lang = '') {
    global $language;
    $curLanguage = $language->language;
    $obj = db_query("SELECT nid, title FROM {node} WHERE tnid = '$nid' AND language = '$curLanguage'");
    $cnt = db_affected_rows($obj);
    if ($cnt > 0) {
        $trans = db_fetch_object($obj);
    } else {
        $trans = node_load($nid);
    }
    return $trans;
}

function _user_activity_stream(){
    global $user;

    $filterPath = '?filter=';
    $filter = $_GET['filter'];
    if($filter=='all' || $filter==''){
        $aclass = 'class="active"';
        $vclass = '';
        $dclass = '';
        $iclass = '';
        $rclass = '';
    }else if($filter=='votes'){
        $aclass = '';
        $vclass = 'class="active"';
        $dclass = '';
        $iclass = '';
        $rclass = '';
    }else if($filter=='debates'){
        $aclass = '';
        $vclass = '';
        $dclass = 'class="active"';
        $iclass = '';
        $rclass = '';
    }else if($filter=='issues'){
        $aclass = '';
        $vclass = '';
        $dclass = '';
        $iclass = 'class="active"';
        $rclass = '';
    }else if($filter=='resources'){
        $aclass = '';
        $vclass = '';
        $dclass = '';
        $iclass = '';
        $rclass = 'class="active"';
    }else{
        $class = '';
    }
    $filters = '<a '.$aclass.' href="'.$filterPath.'all"> '.t('All').'</a> |
                <a '.$vclass.' href="'.$filterPath.'votes">'.t('Votes').'</a> |
                <a '.$dclass.' href="'.$filterPath.'debates">'.t('Arguments').'</a> |
                <a '.$iclass.' href="'.$filterPath.'issues">'.t('Issues Added').'</a> |
                <a '.$rclass.' href="'.$filterPath.'resources">'.t('References').'</a>';
    
    $where = notify_user_stream_filter_where($filter);
    
    $start = variable_get(arg(1), '0');
    $limit = 10;

    // messages should not show in user profile activity stream
    //$restrict_msgids = "'add_coins', 'lose_coins', 'user_logout', 'user_login', 'add_points'";
    $open_msgids = "'add_question', 'add_debate', 'add_resource', 'deb_agree', 'deb_disagree', 'res_reply_agree', 'res_reply_disagree', 'add_vote', 'resource_reply', 'user_follow'";

    // get user profile id for a particular user
    $uid = get_user_profile_id();
    
    //data query
   $sql = "SELECT distinct b.naid,b.*,a.message
      FROM `notify_activity` b
INNER JOIN `notify_messages` a
        ON `b`.`message_id` = `a`.`message_id`
INNER JOIN `users` u
        ON `u`.`uid` = `b`.`uid`
     WHERE  a.status = 1 AND `b`.`message_id` IN($open_msgids) AND b.uid = '$uid' $where ORDER BY b.naid DESC";
    
    $query = pager_query($sql, $limit);

    
    $i = 0;

// restricted message ids.. these should not display in happening now
    $count = db_affected_rows($query);

    $showCnt = 6;
    $hideCnt = $count - $showCnt;
    $udetails = user_load($uid);
    
    while ($result = db_fetch_object($query)) {
        // stream theme
        
        $data = unserialize($result->variables);
        $submitted = ago(date("Y-m-d H:i:s", $result->timestamp));
        $userPicture = UserPicture_small_src($result->uid);
        $message = $result->message;
        $message_id = $result->message_id;
        $output .= theme('user_activity_stream_thread', $udetails, $userPicture, $data, $message, $message_id, $submitted);
        $i++;
    }
    if (!$i) {
        $output.='No User Activity Found!';
    }

    $pagination = theme('pager', NULL, $limit, 0);

   return theme('user_activity_stream', $filters, $output, $pagination);
}



/*
 * User events' notifications
 */
function user_notify($event, $params = array()) {
  global $user;
  switch($event) {
    case 'like' : // TODO -- not completely compatible with notifications
      if( isset($params['nid']) ) {
        # add notification
        db_query("INSERT INTO {notification} SET is_like='1', uid='%d', node_id='%d'", $user->uid, $params['nid']);
        # send mail
        $forum = db_fetch_object(db_query("
          SELECT *
          FROM debate_reply AS f
            JOIN debate AS w
              ON f.rid = w.fid
          WHERE f.rid='%d'", $params['nid'])
        );
        hm_mails($forum->qid, $params['nid'], 'add_like');
      }
    break;
    default : break;
  }
}