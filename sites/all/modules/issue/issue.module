<?php

// $Id: issue.module,v 1.21.2.88.2.34 2010/06/22 09:30:59 mirodietiker Exp $

/**
 * @file
 * Issue Poll -A sophisticated issue module for voting and analysis report generating.
 */

/**
 * Implementation of hook_help().
 */
function issue_help($path, $arg) {
    switch ($path) {
        case 'admin/modules#description':
            return t('A sophisticated issue module for voting and analysis report generating.');
            break;
    }
}

/**
 * Implementation of hook_perm().
 */
function issue_perm() {
    return array(
        'create issue',
        'edit issue',
        'edit own issue',
        'vote on issue',
        'cancel own vote',
        'administer issue',
        'inspect all votes',
        'show vote results',
        'access electoral list',
        'add write-ins',
    );
}

/**
 * Implementation of hook_access().
 */
function issue_access($op, $node, $account) {
    if ($op == 'create') {
        return user_access('create issue', $account);
    }
    if ($op == 'update') {
        if (user_access('edit issue', $account) || ($node->uid == $account->uid && user_access('edit own issue', $account))) {
            return TRUE;
        }
    }
}

/**
 * Implementation of hook_node_info().
 */
function issue_node_info() {

    $info = array();

    return $info;
}

/**
 * Implementation of hook_menu().
 */
function issue_menu() {
    global $user;


        $menu['issue/tab/%/%'] = array(
        'title' => ' Issue Tab Data',
        'page callback' => 'issue_tab_content',
        'type' => MENU_LOCAL_TASK,
        'page arguments' => array(2,3),
        'access callback'=>true,
          'file'=>'issue.pages.inc'
    );
 $menu['issue/report/%/%'] = array(
        'title' => ' Issue Report Data',
        'page callback' => 'issue_report_data',
        'type' => MENU_LOCAL_TASK,
        'page arguments' => array(2,3),
        'access callback'=>true,
     'file'=>'issue.pages.inc'
    );



    return $menu;
}

/**
 * Implementation of hook_init().
 */
function issue_init() {
    // Use poll.module's stylesheet, no need to duplicate at this point.
    drupal_add_css(drupal_get_path('module', 'poll') . '/poll.css');


    if (module_exists('jquery_ui')) {
        jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));
    }
}

/**
 * Implementation of hook_form().
 *
 * This hook displays the form necessary to create/edit the issue.
 */
function issue_form(&$node, $form_state) {

    $type = node_get_types('type', $node);
    $editing = isset($node->nid);
    $form = array();

    // Only add javascript once, even if _form is called multiple times.
    static $add_js;
    if (!$add_js) {
        // Pass translatable strings
        drupal_add_js(array('advPoll' => array('remove' => t('Remove'), 'addChoice' => t('Add choice'), 'noLimit' => t('No limit'))), 'setting');
        drupal_add_js(drupal_get_path('module', 'issue') . '/issue-form.js', 'module');
        drupal_add_css(drupal_get_path('module', 'issue') . '/issue.css', 'module');
        $add_js = TRUE;
    }

    $form['title'] = array(
        '#type' => 'textfield',
        '#maxlength' => 100,
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
    );
    $form['body_field']['body'] = array(
        '#type' => 'textarea',
        '#title' => check_plain($type->body_label),
        '#required' => FALSE,
        '#default_value' => $node->body,
    );

    $form['body_field']['format'] = filter_form($node->format);



    return $form;
}

function issue_edit_vote($dummy='',$nid='') {

    $form = array();
    if(empty($nid))
    $nid = arg(1);
    
    $node = node_load($nid);

    if ($node->choice) {
        $list = array();
        foreach ($node->choice as $i => $choice) {
            $list[$i] = check_plain($choice['chtext']);
        }
        $form['choice'] = array(
            '#type' => 'radios',
            '#default_value' => $node->vote,
            '#options' => $list,
        );
    }
    $form['#nid'] = $nid;
    $form['change'] = array(
        '#type' => 'submit',
        '#value' => t('Change'),
    );
    $form['#cache'] = TRUE;

    // Provide a more cleanly named voting form theme.
    $form['#theme'] = 'poll_vote';
    return $form;
}

function issue_report_data($type='',$nid=''){

switch($type){
case 'map':
      $content=report_map($nid);
    break;
    case 'graph':
        $content=report_graph($nid);
        break;
    case 'percent':
    default:

$content=report_percent($nid);
        
        break;
}

echo $content;
}


function issue_edit_vote_validate($form, &$form_state) {
    if (!user_is_logged_in()) {

        form_set_error(t('You .'));
    }

    if ($form_state['values']['choice'] == -1) {
        form_set_error('choice', t('Your vote could not be recorded because you did not select any of the choices.'));
    }
}

function issue_edit_vote_submit($form, &$form_state) {
    global $user;
    $nid = $form['#nid'];
    $choice = $form_state['values']['choice'];

    if ($user->uid) {
        db_query('update {poll_votes} set chorder=%d where nid=%d and uid=%d', $choice, $nid, $user->uid);
        
        /*New SET NOTIFY LOG*/
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $answer = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '%d' AND chorder = '%d'", $nid, $choice));
        $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $answer);
        set_notify_log($user->uid, $nid, 'change_answer', $variable);
        /*New SET NOTIFY LOG*/
    }

    // Add one to the votes.
    //db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $node->nid, $choice);

    cache_clear_all();
    drupal_set_message(t('Your vote has been updated'));

    // Return the user to whatever page they voted from.
}

/**
 * Implementation of hook_form_alter().
 */
function issue_form_alter(&$form, $form_state, $form_id) {
if($form_id=='user_relationships_ui_request'){}

if($form_id=='poll_view_voting'){

    $form['vote']['#submit'][] = 'add_vote_notify';
    $form['#validate'][]='check_user_anonymous';
  //echo $form_id."<pre>";  print_r($form);exit;
}

    if ($form_id == 'poll_node_form') {
        //$form['#after_build'][] = 'issue_after_build';


        $form['field_issue_state']['#access'] = false;
        $form['field_issue_city']['#access'] = false;
       
           //echo "<pre>";
        //print_r($form); exit;
      // echo $form['#node']->nid; exit;
    }
     if ($form_id == 'abuse_report_form') {
    //  echo "<pre>";
     //print_r($form);

        //$form['#after_build'][] = 'issue_after_build';
$form['reason'] = array(
'#type' => 'radios',
'#title' => t('Which one of Heard Mentalityâ€™s Guidelines and Principles is this debate posting infringing?'),
'#options' =>array_filter($form['reason']['#options']),
    '#required' => TRUE,
    '#default_value'=> variable_get('reason', 1),
);
$form['op']=false;
 $form['submit'] = array('#type' => 'submit', '#value' => t('Send'),'#ahah'=>array(
    'wrapper' => 'log_res',
    'method' => 'replace',
    'effect' => 'fade',
  ),);

 $form['#submit'][] = 'add_flag_notify';
          // echo "<pre>";
        //print_r($form);exit;
    }
}

function _test_helper_story_node_form_validate($form, &$form_state) {
    if ($form_state['values']['title'] == "Testing") {
        form_set_error('title', t('No testing allowed!'));
    }
}
function check_user_anonymous($form, &$form_state){

if(user_is_anonymous ())
    form_set_error ('', t('Please login and cast your vote to see the reports of this issue ! '));
   
}
function issue_after_build($form, &$form_state) {
    // allter the form values: Stuff!



    foreach (element_children($form['choice']) as $key) {


        // echo "dd";
    }//exit;
    return $form;
}

function issue_nodeapi($node, $op, $a3 = NULL, $a4 = NULL) {

    global $user;

    if ($node->type == 'poll') {
       // echo "<pre>";
       // print_r($node);
       // exit;
        switch ($op) {
            case 'insert':
                //    echo "<pre>";
                //  print_r($node);
                break;
            case 'load':

                break;
            case 'view':
                $output = '';
                drupal_add_js(drupal_get_path('module', 'debate') . '/scripts/debate.js');
                drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/subtab.js');

                drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');
                drupal_set_title('ISSUE');
                drupal_set_html_head('<script>
                        var uid="' . $user->uid . '";
                    </script>');
                if ($user->initpop == 1 && $user->uid > 1) {
                    drupal_add_js('jQuery(document).ready(function () { loadeditquestion(gSitePath+"profile/edit/1","Edit Profile ");});', 'inline');
                    $user_data = array('initpop' => 2);
                    user_save($user, $user_data);
                }
                drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');
                $node->style=drupal_link_color($user->uid, $node->nid);
                if(user_is_logged_in()){
                if ($node->allowvotes) {
                    
                } else {
                    //print_r($node);
                    unset($node->content['body']);
                    $output .= drupal_get_form('issue_edit_vote',$node->nid);
                    $node->content['body'] = array
                        (
                        '#value' => $output,
                    );
                }
                }else{

                    unset($node->content['body']);
                    $output .= drupal_get_form('poll_view_voting',$node,'');
                    $node->content['body'] = array
                        (
                        '#value' => $output,
                    );
                }


                break;
        }
    }
}

function issue_save($array='') {
    global $user;
    $account = user_load(array('uid' => $user->uid));
    $node = new StdClass();
    $node->type = 'poll';
    $node->create = time();
    $node->title = $array['q_quest'];
    $node->body = $array['q_context'];
    $node->uid = $account->uid;
    $node->status = 1;
    $node->active = 1;
    node_save($node);


    if (!user_access('administer nodes')) {
        // Make sure all votes are 0 initially
        foreach ($node->choice as $i => $choice) {
            $node->choice[$i]['chvotes'] = 0;
        }
        $node->active = 1;
    }

    db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);

    $j = 0;
    for ($i = 1; $i <= $array['ans_cnt']; $i++) {
        $name = "q_ans" . $i;

        if (!empty($array[$name])) {

            db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $array[$name], '0', $j++);
        }
    }

     /*New SET NOTIFY LOG*/
            //set_notify_log($uid , $message_id, $nid, $variable)
            $qid = $node->nid;
            $qtitle = $node->title;
            $variable = array('qid' => $qid, 'q_title' => $qtitle, 'uid' => $user->uid);
            set_notify_log($user->uid, $qid, 'add_question', $variable);
     /*New SET NOTIFY LOG*/
            
//url alias
    $dst = clean_url(myTruncate($node->title, 100, ''), '', '-', $node->nid);
    $url = 'node/' . $node->nid;
    db_query("INSERT INTO {url_alias} (src, dst, language) VALUES ('%s', '%s', '%s')", $url, $dst, 'en');
    //Related Issues
    if(!empty($array['chk_rel_issue'])){
    $cont_type=array('content_types'=>array('poll'=>'poll'));
    $relatedissues = array_combine($array['chk_rel_issue'], $array['chk_rel_issue']);
    $arrayid = array('nids' => $relatedissues);
    $manual = array('enable' => 1, 'nodes' => array('poll' => $arrayid));
    $related = array('nid' => $node->nid, 'content_types' => $cont_type, 'taxonomy' =>array(''), 'manual' => $manual, 'sort' => array('criteria' => 'none'));
    db_query("INSERT INTO {noderecommendation_node} (nid, data) VALUES (%d, '%s')", $node->nid, serialize($related));
    }
    return $node;
}

function issue_block($op = 'list', $delta = 0, $edit = array()) {

    switch ($op) {
        case 'list':
            $blocks[0] = array(
                'info' => t('Node block'),
            );
             $blocks[1] = array(
                'info' => t('Details Tab'),
            );

            return $blocks;

        case 'view':   
            switch ($delta) {
                case '0':

                    $block['subject'] = "Issue Reporting";
                    if (arg(0) == 'node' && is_numeric(arg(1))) {
                        $nid = arg(1);

                      $node=node_load($nid);

                      if(!empty($node)&&$node->type=='poll')
                        $tab = issue_view_results($nid, false, false, true);
                    }


                    $block['content'] = $tab;

                    break;

                    case 'issue-0':
                        $block['subject'] = "Reporting Tab";
                        $nid = arg(2);
                        $tab = issue_report_tab($nid);
                        $block['content'] = $tab;
                        break;
                    case 'issue-1':

                         $block['subject'] = "Debate Tab";
                   // if (arg(0) == 'node' && is_numeric(arg(1))) {
                        $nid = arg(2);

                        //$node=node_load(array('nid'=>20));
                        $tab = issue_debate_tab($nid);
                   // }


                    $block['content'] = $tab;
                        break;

                    case 'issue-2':

                         $block['subject'] = "Resource Tab";
                   // if (arg(0) == 'node' && is_numeric(arg(1))) {
                        $nid = arg(2);

                        //$node=node_load(array('nid'=>20));
                        $tab = issue_resource_tab($nid);
                   // }


                    $block['content'] = $tab;
                        break;
                    
                 case 'issue-4':
                      $block['subject'] = "Details Tab";
                   // if (arg(0) == 'node' && is_numeric(arg(1))) {
                        $nid = arg(2);

                        //$node=node_load(array('nid'=>20));
                        $tab = issue_details_tab($nid);
                   // }


                    $block['content'] = $tab;

                     break;
            }
            return $block;
    }
}

function issue_theme($existing, $type, $theme, $path) {

    return array(
        'issue_results' => array(
            'template' => 'issue_results',
            'arguments' => array('nid' => NULL, 'votes' => NULL,'allowvotes'=>NULL),
        ), 'issue_details' => array(
            'template' => 'issue_details_tab',
            'arguments' => array('nid' => NULL, 'votes' => NULL),
        )
    );
}

function issue_tab_content($nid='',$type=''){
//panel_content($nid, $type);
     switch ($type) {
     case 'details':

       $block = module_invoke('issue', 'block', 'view','issue-4');
             print $block['content'];

         break;

     case 'debate':
        
       $block = module_invoke('issue', 'block', 'view','issue-1');
             print $block['content'];

         break;

     case 'resource':
        
       $block = module_invoke('issue', 'block', 'view','issue-2');
             print $block['content'];

         break;

      case 'report':

       $block = module_invoke('issue', 'block', 'view','issue-0');
             print $block['content'];

         break;
     }
exit;
}
// debate tab
function issue_debate_tab($qid = ''){
  
     global $gSitePath, $user, $gDocPath, $base_root;
    $node=node_load($qid);
    
    $inc_pans = '';
    $wave = '';
    $wave .= '<input type="hidden" name="mqid" value="'.$qid.'">';
    //$wave .= panel_content();
    $wave .= '<div id="waveerr"></div>
                       <ul id="tabmenu" class="subtabs" >
                                       <li><a class="" href="javascript:tabactive(\'dargs\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabdargs">Arguments</a></li>
                                       <li><a class="" href="javascript:tabactive(\'dreport\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabdreport">Analysis</a></li>

                               </ul>
                               <div id="rcontents" class="mytabs-container"></div>
                               <script type="text/javascript">tabactive(\'dargs\',\'' . $gSitePath . '\',\'' . $qid . '\')</script>';
    return $wave;
    $ans = load_options($qid);
    //answers
    $filter_list.='<select name="dfilt-ans" id="dfilt-ans" class="select-1"><option value="">Possible Answers</option>';
    foreach ($ans as $list) {
        $filter_list.='<option value="' . $list['chorder'] . '">' . $list['chtext'] . '</option>';
        $inc_pans.='<div class="form-outer-debate">
    	<div class="fm-1">&nbsp;</div>
        <div class="fm-2">
        <div class="fm-2-left">' . $list['chtext'] . '</div>
        <div class="fm-2-right"><input type="hidden" name="ans_id[]" value="' . $list['chorder'] . '"/><select  name="sup_opp[]"><option value="0">Neutral</option><option  value="1">Supports</option><option value="2">Oppose</option></select></div>
        </div>
        <div class="clr"></div>
    </div>';
    }
    $filter_list.='</select>';
    //print_r($cnt);
    $userCheckDebate = user_is_logged_in()!=''?'<a href="#newwavediv" onclick="" title="New Debate" class="floatbox"><input name="" type="button" class="submit-debate-btn"/></a>':'<a href="#"  title="New Debate" onclick="check_popup_login()"><input name="" type="button" class="submit-debate-btn"/></a>';
    //$chkuserOnclick = user_is_logged_in()==''?'onclick="check_popup_login()"':'';
    $wave .= '

     <div class=" debate-round-tab-outer">
              	<div class="form-part-top">
                    <div class="form-m1">Filter By :<br />
<select name="dfilt-sup" id="dfilt-sup" class="select-2"><option value="0">+/-</option><option value="1">+</option><option value="2">-</option></select></div>
                    <div class="form-m2"><br/>
                    ' . $filter_list . '
                    </div>
                    <div class="form-m3"><br/>
                    <select name="dfilt-sort" id="dfilt-sort" class="select-2"><option value="0">Sort By :</option>
                    <option value="1">Most Recent</option>
                     <option value="2">Most Support</option>
                    </select>

                    </div>
                    <div class="form-m4" align="right">&nbsp;<br />
'.$userCheckDebate.'

                </div>

                	<div class="clr"></div><br />

                    <div class="clr"></div>


		<div class="comment" id="newwavediv" style="display:none"><div class="popup-debate-new">';
    if (!empty($user->uid)) {
        $wave .= '	<form  id="newwaveform" class="newwave" action="' . $gSitePath . 'issues/debate/save" method="post" accept-charset="utf-8">
	<input type="hidden" name="action" value="new"/><input type="hidden" name="qid" value="' . $qid . '"/>
<div class="new-debate-wrapper">
  	<div class="form-outer-debate">
    	<div class="fm-1"> Please Follow the <a href="#">Principles and Guidelines.</a></div>
        <div class="fm-2"><input name="wtitle" id="wtitle" type="text" value="Title" /> </div>
    <div class="clr"></div>
    </div>

    <div class="form-outer-debate">
    	<div class="fm-1"> All debates should be:<br />
            <ul>
            <li>Concise</li>
            <li>Etc</li>
            </ul>
</div>
        <div class="fm-2"><textarea name="wcon" id="wcon"   cols="10" rows="6">Enter text here</textarea></div>
<!--<div ><b>Private Reply :</b> [Only followers can do reply]</div>
	<p><select name="wprivate" id="wprivate">
	<option value="0"> Disabled</option>
	<option value="1"> Enabled  </option>
	</select></p>		-->

    <div class="clr"></div>
    </div>
' . $inc_pans . '
    <div class="form-outer-debate">
    	<div class="fm-1">&nbsp;</div>
        <div class="fm-2">
        <div class="fm-2-left">&nbsp</div>
        <div class="fm-2-right" align="right"><input name="" type="button" onclick="wave_form(this);" class="submit-debate-btn"/></div>

        </div>

    <div class="clr"></div>
    </div>


  <div class="clr"></div>
  </div>

</form>';
    } else {
        $wave .= '<div align="center"><b>Please log in to participate in the debate</b></div>';
    }
    $wave .= ' </div></div>
	<div><div id="qwave" class="">';


    $wave .= list_debate($qid, 1);


    $wave .= '</div>
	';

    //$wave .= list_debate($qid, 'debate');
    return $wave;
    



    
}

// resource tab
function issue_resource_tab($qid = ''){
    //require('issue.pages.inc');
    global $gSitePath, $user, $gDocPath, $base_root;
    $node=node_load($qid);
    $type = 'innews';
    $ans = load_options($qid);
    $output .= '<input type="hidden" name="mqid" value="'.$qid.'">';
    $output .= '<div id="waveerr"></div>
                       <ul id="tabmenu" class="subtabs" >
                                       <li><a class="" href="javascript:tabactive(\'In\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabIn">In the News</a></li>
                                       <li><a class="" href="javascript:tabactive(\'M\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabM">Multimedia</a></li>
                                       <li><a class="" href="javascript:tabactive(\'F\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabF">Facts</a></li>
                                       <li><a class="" href="javascript:tabactive(\'resreport\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabresreport">Analysis</a></li>

                               </ul>
                               <div id="rcontents" class="mytabs-container"></div>
                               <script type="text/javascript">tabactive(\'In\',\'' . $gSitePath . '\',\'' . $qid . '\')</script>';
    return $output;
    //answers
    $filter_list.='<select name="rfilt-ans" id="rfilt-ans" class="select-1"><option value="">Possible Answers</option>';
    foreach ($ans as $list) {
        $filter_list.='<option value="' . $list['chorder'] . '">' . $list['chtext'] . '</option>';
        $inc_pans.='<div class="form-outer-debate">
    	<div class="fm-1">&nbsp;</div>
        <div class="fm-2">
        <div class="fm-2-left">' . $list['chtext'] . '</div>
        <div class="fm-2-right"><input type="hidden" name="ans_id[]" value="' . $list['chorder'] . '"/><select  name="sup_opp[]"><option value="0">Neutral</option><option  value="1">Supports</option><option value="2">Oppose</option></select></div>
        </div>
        <div class="clr"></div>
    </div>';
    }
    $filter_list.='</select>';
    //print_r($cnt);
    if(user_is_logged_in ())
        $rbutton='<a href="javascript:void(0);" onclick="javascript:loadresource(\'' . $gSitePath . 'debate/resource/new/' . $qid . '\',\'Add\');" title="New Debate"><input name="" type="button"   class="submit-debate-btn"/></a>';
    else
        $rbutton='<a href="javascript:void(0);" onclick="javascript:check_popup_login();" title="New Debate"><input name="" type="button"   class="submit-debate-btn"/></a>';

    $output .= '

     <div class=" debate-round-tab-outer">
              	<div class="form-part-top">
                    <div class="form-m1">Filter By :
<select name="rfilt-sup" id="rfilt-sup" class="select-2"><option value="0">+/-</option><option value="1">+</option><option value="2">-</option></select></div>
                    <div class="form-m2"><br/>
                    ' . $filter_list . '
                    </div>
                    <div class="form-m3"><br/><input type="hidden" name="rtype" id="rtype" value="' . $type . '" />
                    <select name="rfilt-sort" id="rfilt-sort" class="select-2"><option value="0">Sort By :</option>
                    <option value="1">Most Recent</option>
                     <option value="2">Most Support</option>
                    </select>

                    </div>
                    <div class="form-m4" align="right">&nbsp;<br />'.$rbutton.'</div>

                </div>

                	<div class="clr"></div><br />
                                    <div class="clr"></div> <div id="resfilter">';

    switch ($type) {
        case 'innews':
            $output.= resource_innews($qid, 1);
            break;
        case 'media':

            $output.= resource_media($qid);
            break;
        case 'facts':


            $output.= resource_innews($qid, 3);
            break;
        default:
            $output = '<div class="messages warning">No Action Found!</div>';
            break;
    }

    $output.='</div></div>';

    if (isAjax ())
        echo $output;
    else
        return $output;
}

function issue_details_tab($nid=''){
    global $gSitePath, $user, $gDocPath, $base_root;
    $node=node_load($nid);
     $debatecnt=db_result(db_query("SELECT COUNT(*) from {node} where type='forum' AND qid=$nid"));
      $numresource = db_result(db_query("SELECT COUNT(*) from {node} where type='forum' AND qid=$nid"));
      
    //print_r($node);
        $bubble = load_bubble($node->uid);
            $medal = updateProfileBadge($node->uid);
            $section = load_taxonomy($nid,1);
            $output.= '
                       <div class="">
<div  class="details-left">
 <span class="profile-gray">Context</span> :' . $node->body . '
     <br/>
     <span class="profile-gray">Section </span>:' . $section . '
     </div>
<div style="float:left;">
<div class="profile-lefthm">
<span class="profile-gray">Byline: </span>
<br />
' . $bubble . '
<div class="clr"></div>
<div>

<span class="profile-gray">Date Created </span> : ' .format_date($node->created,"custom","D j M Y") . '  <br />
<span class="profile-gray">Number of Votes </span>:  ' . $node->vote . '<br />
<span class="profile-gray">Number of Forum Posts</span> : ' . $debatecnt . '<br />
<span class="profile-gray">Number of Resources </span> :  ' . $numresource . '<br />

</div>
</div>

</div><div class="clr"></div><br />



</div>';
             

return $output;
  // return theme('issue_details', $nid);
}

function load_taxonomy($nid=''){

     global $gSitePath, $user, $gDocPath, $base_root;
       $arrcategories = taxonomy_node_get_terms($nid);
    foreach($arrcategories as $catterm) {
        $cattermid = $catterm->tid;
        break;
    }
  //  print render_view_page(2, $cattermid);
    ///new tech
  
 //$node_content = node_view(node_load($nid));
//$vars['node_content'] = $node_content;
//print_r($node_content);
//print drupal_render($node_content->field_tags);
     $node=node_load($nid);
if (module_exists('taxonomy')) {
        $terms = taxonomy_link('taxonomy terms', $node);
       $html=theme('links', $terms, array('class' => 'node-terms'));
    } else {
          $html= 'No associated categories.';
    }


    return $html;
}


function issue_view_results(&$nid, $teaser, $page, $block) {
    global $gSitePath, $user, $gDocPath, $base_root;
    // Count the votes and find the maximum
  $node=node_load($nid);
    // $total_votes = 0;
    // $max_votes = 0;
    // foreach ($node->choice as $choice) {
//    if (isset($choice['chvotes'])) {
//      $total_votes += $choice['chvotes'];
//      $max_votes = max($max_votes, $choice['chvotes']);
//    }
//  }
//  $poll_results = '';
//echo $node->allowvotes; exit;
    return theme('issue_results', $nid, t('12'),$node->allowvotes);
}

//function theme_issue_results($title='',$votes=''){
//
//    $output = '<div id="philquotes-text">'. t($title)
//.'</div><div id="philquotes-origin">' . t($votes) . '</div>';
//return $output;
//}
//function template_preprocess_issue_results(&$variables) {
//
//  $path = base_path() . path_to_theme() . '/';
//  $variables['path'] = $path;
//}
//
//function issue_preprocess_block(&$vars) {
//
// global $gSitePath, $user, $gDocPath, $base_root, $base_path, $saaais, $apikey;
//   $path = base_path() . path_to_theme() . '/';
//    $vars['path'] = $path;
// return $vars;
//}

/**
 * Implementation of hook_load().
 *
 * Load the votes and issue-specific data into the node object.
 */
function issue_load($node) {
    $issue = db_fetch_object(db_query('SELECT * FROM {issue} WHERE nid = %d', $node->nid));
    $result = db_query('SELECT cid, weight, label, writein FROM {issue_choices} WHERE nid = %d ORDER BY weight', $node->nid);
    $issue->choice = array();
    $issue->writein_choices = 0;
    while ($choice = db_fetch_array($result)) {
        $issue->choice[$choice['cid']] = $choice;
        if ($choice['writein'] == 1) {
            $issue->writein_choices++;
        }
    }
    $issue->choices = count($issue->choice);

    $result = db_query("SELECT value FROM {votingapi_cache} WHERE content_type = 'issue' AND content_id = %d AND tag = '_issue' AND function = 'total_votes'", $node->nid);
    if ($cache = db_fetch_object($result)) {
        // Found total votes in the cache.
        $issue->votes = $cache->value;
    } else {
        $issue->votes = 0;
    }

    list($issue->voted, $issue->cancel_vote) = _issue_user_voted($node->nid);
    return $issue;
}

/**
 * Implementation of hook_validate().
 *
 * Validate the editing of an issue node. 
 */
function issue_validate($node, &$form) {
    // Use form_set_error for any errors.
    $node->choice = array_values($node->choice);

    // TODO: verify if this hack is still needed in Drupal 6.
    // Start keys at 1 rather than 0.
    array_unshift($node->choice, '');
    unset($node->choice[0]);

    // Check for at least two choices.
    $real_choices = 0;

    // TODO: take out _POST
    foreach ($_POST['choice'] as $i => $choice) {
        if ($choice['label'] != '') {
            $real_choices++;
        }
    }

    if ($real_choices < 2) {
        form_set_error("choice][$real_choices][label", t('You must fill in at least two choices.'));
    }

    // Validate max choices since it has #DANGEROUS_SKIP_CHECK set to true.
    if ($node->settings['max_choices'] < 0) {
        form_set_error('settings][max_choices]', t('Maximum choices must be a non-negative integer.'));
    }

    if ($node->settings['max_choices'] > $real_choices) {
        form_set_error('settings][max_choices]', t('Maximum choices cannot be larger than the number of choices submitted.'));
    }

    // Validate dates.
    if (!empty($node->settings['start_date']) && strtotime($node->settings['start_date']) <= 0) {
        form_set_error('settings][start_date', t('You have to specify a valid starting date.'));
    }
    if (!empty($node->settings['end_date']) && strtotime($node->settings['end_date']) <= 0) {
        form_set_error('settings][end_date', t('You have to specify a valid ending date.'));
    }
    if (!empty($node->settings['end_date']) && $node->settings['end_date'] < $node->settings['start_date']) {
        form_set_error('settings][end_date', t('Ending date cannot be before the starting date.'));
    }
}

/**
 * Implementation of hook_insert().
 *
 * This is called upon node creation.
 */
function issue_insert($node) {

    // Insert the choices.
    _issue_insert_choices($node);
}

/**
 * Implementation of hook_update().
 *
 * This is called upon node edition.
 */
function issue_update($node) {

    db_query("UPDATE {issue} SET active = %d, max_choices = %d, algorithm = '%s', use_list = %d, show_votes = %d, start_date = '%s', end_date = '%s', writeins = %d, show_writeins = %d, question = '%s' WHERE nid = %d", !$node->settings['close'], $node->settings['max_choices'], $node->settings['algorithm'], $node->settings['use_list'], $node->settings['show_votes'], $node->settings['start_date'] ? strtotime($node->settings['start_date']) : 0, $node->settings['end_date'] ? strtotime($node->settings['end_date']) : 0, $node->settings['writeins'], $node->settings['show_writeins'], isset($node->question) ? $node->question : '', $node->nid);

    _issue_insert_choices($node);
    votingapi_recalculate_results('issue', $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function issue_delete($node) {
    db_query('DELETE FROM {issue} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {issue_choices} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {issue_electoral_list} WHERE nid = %d', $node->nid);

    // TODO: These should be converted to a votingapi method eventually.
    db_query("DELETE FROM {votingapi_vote} WHERE content_id = %d AND content_type = 'issue'", $node->nid);
    db_query("DELETE FROM {votingapi_cache} WHERE content_id = %d AND content_type = 'issue'", $node->nid);
}

// get taxonomy id
function get_taxonomy_id($module = '', $name = ''){
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", $module));
    $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = '%d' AND name = '%s'", $vid, $name));
    return $tid;
}

// list debate
function list_debate($qid='', $type='') {
    global $gSitePath, $user, $gDocPath, $base_root;
    $wave = '';
    $click = '';
//    $sortin = 'ORDER BY did DESC';
//    $cond = '';
//    extract($_REQUEST);
//    if (isset($sort) && $sort == 1)
//        $sortin = ' ORDER BY f.created DESC';
//    elseif (isset($sort) && $sort == 2)
//        $sortin = ' ORDER BY f.strength DESC';
//    if (isset($ans) && !empty($ans))
//        $cond.=" AND do.paid='$ans'";
//    if (isset($sup) && $sup > 0)
//        $cond.=" AND do.ans_val='$sup'";
//
//    if (empty($cond))
//        $query = "select f.*,DATE_FORMAT(f.date_added, '%a %M %Y %h:%i %p') as date_added,IFNULL((select DATE_FORMAT(date_added, '%a %M %Y %h:%i %p') from {debate_reply} as wl where wl.did=f.did ORDER BY wl.rid ASC LIMIT 0,1),0) as rdate,IFNULL(f.agree,0) as cntagree,IFNULL(f.disagree,0) as cntdisagree from {debate} as f join {user_profile} as u on u.uid=f.uid where f.qid='$qid' AND type='$type' AND status='1' $sortin ";
//    else
//        $query = "select f.*,DATE_FORMAT(f.date_added, '%a %M %Y %h:%i %p') as date_added,IFNULL((select DATE_FORMAT(date_added, '%a %M %Y %h:%i %p') from {debate_reply} as wl where wl.did=f.did ORDER BY wl.rid ASC LIMIT 0,1),0) as rdate,IFNULL(f.agree,0) as cntagree,IFNULL(f.disagree,0) as cntdisagree from {debate_options} as do join {debate} as f on do.did=f.did join {user_profile} as u on u.uid=f.uid where f.qid='$qid' AND type='$type' AND status='1' $cond  $sortin ";
//    $cnt = ExecuteQuery($query, "select");

    // load debate
    $sorting = 'ORDER BY f.nid DESC';
    $cond = '';
    extract($_REQUEST);
    if (isset($sort) && $sort == 1){
        $sorting = 'ORDER BY n.created DESC';
    }elseif (isset($sort) && $sort == 2){
        $sorting = ' ORDER BY c.field_strength_value DESC';
    }
    if (isset($ans) && !empty($ans)){
        $cond.=" AND do.chorder='$ans'";
    }
    if (isset($sup) && $sup > 0){
        $cond.=" AND do.ans_val='$sup'";
    }
    $tid = get_taxonomy_id('forum', 'Debate');
    //$sql = "SELECT f.nid FROM {forum} as f LEFT JOIN {content_type_forum} as c ON f.nid = c.nid JOIN {node} as n ON f.nid = n.nid WHERE f.tid = '%d' AND c.field_ref_qid_nid = '%d' $cond $sorting";
   $sql = "SELECT DISTINCT(f.nid) FROM {forum} as f LEFT JOIN {content_type_forum} as c ON f.nid = c.nid JOIN {node} as n ON f.nid = n.nid JOIN {debate_options} as do ON n.nid = do.nid WHERE f.tid = '%d' AND c.field_ref_qid_nid = '%d' $cond $sorting";
    $nodes = db_query($sql, $tid, $qid);
    $count = db_result(db_query($sql, $tid, $qid));

    if ($count>0) {
        $i=0;
        while ($node = db_fetch_object($nodes)) {
            $forum = node_load( array('nid' => $node->nid, 'status' => '1'));

            $bg = $i % 2;
            if ($bg)
                $setbg = 'back-col';
            else
                $setbg='';
            $i++;
            $account = user_load($forum->uid);



            // vote agree, disagree calculation
            $voteUp = 0;
            $voteDown = 0;
            $criteriaUpNode = array('content_type' => 'node',
                                   'content_id' => $forum->nid,
                                    'tag' => 'vote',
                                    'vote_type' => 'up');
            $criteriaDownNode = array('content_type' => 'node',
                                   'content_id' => $forum->nid,
                                    'tag' => 'vote',
                                    'vote_type' => 'down');
            $voteUp = vote_up_down_count($criteriaUpNode);
            $voteDown = vote_up_down_count($criteriaDownNode);
            $sql = db_query("SELECT cid FROM {comments} WHERE nid = '%d'", $forum->nid);
            while($row = db_fetch_object($sql)){
                $criteriaUp = array('content_type' => 'comment',
                                   'content_id' => $row->cid,
                                    'tag' => 'vote',
                                    'vote_type' => 'up');
                $criteriaDown = array('content_type' => 'comment',
                                   'content_id' => $row->cid,
                                    'tag' => 'vote',
                                    'vote_type' => 'down');
                $voteUp += vote_up_down_count($criteriaUp);
                $voteDown += vote_up_down_count($criteriaDown);
            }

            //$query = "select * from {debate_options} a,{possible_answer} b where a.paid=b.paid AND a.nid='" . $forum->nid . "'";
            $query = "select * from {debate_options} a,{poll_choices} b where a.chorder=b.chorder AND a.nid='" . $forum->nid . "'";
            $strnth = ExecuteQuery($query, "select");
            $strength = '';
            foreach ($strnth as $list) {
                $ans = $list['chtext'];

                switch ($list['ans_val']) {
                    case 0:
                        $strength.='<div class="bottpart">
                                <div class="green"><em>&nbsp;&nbsp;+</em></div>
                                <div class="green-box">' . $ans . '</div>
                                     <div class="clr"></div>
                                     </div>';
                        break;
                    case 1:
                        $strength.='<div class="bottpart">
                                <div class="green"><em>&nbsp;&nbsp;+</em></div>
                                <div class="green-box">' . $ans . '</div>
                                     <div class="clr"></div>
                                     </div>';
                        break;
                    case 2:
                        $strength.='<div class="bottpart">
                                <div class="pink"><em>&nbsp;&nbsp;-</em></div>
                                <div class="pink-box">' . $ans . '</div>
                                     <div class="clr"></div>
                                     </div>';
                        break;
                }
            }

// date posted, last activity
            $last_timestamp = db_result(db_query("SELECT timestamp FROM {comments} WHERE nid = '%d' ORDER BY cid DESC LIMIT 0,1", $forum->nid));

            $posted = date("F d Y H:i:s", $forum->created);
            $last_activity = $last_timestamp!=''?date("F d Y H:i:s", $last_timestamp):$posted;
// strenght weak calculation
            $strCount = db_result(db_query("SELECT COUNT(*) FROM {comments} WHERE str_wk = '%d' AND nid = '%d'", 1, $forum->nid));
            $weakCount = db_result(db_query("SELECT COUNT(*) FROM {comments} WHERE str_wk = '%d' AND nid = '%d'", 0, $forum->nid));

            $wave.='         <div class="debate-summary-wrapper" >
<div class="deb-center">
<div class="leftpartside">
<div class="toppart"><p>'.$voteUp.'</p>

<p align="center"><img src="' . $gSitePath . drupal_get_path('theme', 'newtheme') . '/images/aggree-hand.jpg" width="18" height="15" alt="Agree" /></p></div>
<div class="toppart2"><p>'.$voteDown.'</p>
<p align="center"><img src="' . $gSitePath . drupal_get_path('theme', 'newtheme') . '/images/disaggree-hand.jpg" width="18" height="15" alt="Agree" /></p>

</div>

</div>


<div class="centerpartside-out">
<div class="centerpartside-top">
<div class="centerpartside">
<h4><a class="debate-links" href="' . $gSitePath . 'issues/debate/' . $qid . '/' . $forum->nid . '" >' . myTruncate($forum->title, '30', '', '..') . '</a></h4><br>
' . myTruncate($forum->body, '25', '', '..') . '
</div>
<div class="rightpartside">
<a  rel=\'' . $bubble . '\' href="' . $gSitePath . 'profile/' . $account->name . '">' . UserPicture_small($account->uid) . '</a></div>

</div>
<div class="clr"></div>

<div class="centerpartside-bottom">
' . $strength . '

<ul>


<li>Posted : ' . $posted . ' </li>
<div class="clr"></div>
<li>Last Activity: ' . $last_activity . '</li>


</ul>


</div>


<div class="clr"></div>

</div>

</div>
<div class="deb-bott">
</div>
<div class="clr"></div>

</div>

<div class="clr"></div>
';
            // update points
            debate_roundup($forum->nid);
        }
    } else {
        $wave .= '
	<div class="messages warning">

	No Debate Posted Yet!!
		</div>


	';
    }

    return $wave;
}

function panel_content($qid = '', $type = '') {

    global $gSitePath, $user, $gDocPath, $base_root;

    //$qid = substr($_GET['q'], strrpos($_GET['q'], "/") + 1);

    //$type = $_REQUEST['type'];
    $queryd = "SELECT qid, SUM(vote) as possiblevote FROM possible_answer where qid='" . $qid . "' GROUP BY qid";
    $query_listd = db_query($queryd);
    $fetvotd = db_fetch_object($query_listd);

    $query_sugests = "SELECT qid, SUM(vote) as suggestv FROM suggest_answer where qid='" . $qid . "' GROUP BY qid";
    $query_sugestlistd = db_query($query_sugests);
    $fetvotsugestbg = db_fetch_object($query_sugestlistd);
    $totalvotesm = $fetvotd->possiblevote + $fetvotsugestbg->suggestv;
    $vSql = "select * from {question} where status='1' and qid=$qid ";
    $rlist = db_query($vSql);
    $oListquest = db_fetch_object($rlist);

    $query = " SELECT (SELECT count( * ) FROM forum_wavelets AS w WHERE w.wid = f.fid GROUP BY w.wid ) AS wcnt FROM forum_wave AS f WHERE f.qid = '$qid' ";
    $list = ExecuteQuery($query, "select");
    $debatecnt = 0;
    foreach ($list as $fcnt) {

        $debatecnt = $debatecnt + $fcnt['wcnt'];
    }


    $numresource = db_result(db_query("SELECT COUNT(*) from {resource} where qid=$qid"));
    $query_user = "SELECT * FROM users where uid='$oListquest->uid' ";
    $query_userinfo = db_query($query_user);
    $fetuserlist = db_fetch_object($query_userinfo);
    switch ($type) {

        case "debate":
            $output = '
			<div id="waveerr"></div>
                       <ul id="tabmenu" class="subtabs" >
                                       <li><a class="" href="javascript:tabactive(\'dargs\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabdargs">Arguments</a></li>
                                       <li><a class="" href="javascript:tabactive(\'dreport\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabdreport">Analysis</a></li>

                               </ul>
                               <div id="rcontents" class="mytabs-container"></div>
                               <script type="text/javascript">tabactive(\'dargs\',\'' . $gSitePath . '\',\'' . $qid . '\')</script>';
            break;
        case "resource":

            $output = '
			<div id="waveerr"></div>
                       <ul id="tabmenu" class="subtabs" >
                                       <li><a class="" href="javascript:tabactive(\'In\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabIn">In the News</a></li>
                                       <li><a class="" href="javascript:tabactive(\'M\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabM">Multimedia</a></li>
                                       <li><a class="" href="javascript:tabactive(\'F\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabF">Facts</a></li>
                                       <li><a class="" href="javascript:tabactive(\'resreport\',\'' . $gSitePath . '\',\'' . $qid . '\')" id="tabresreport">Analysis</a></li>

                               </ul>
                               <div id="rcontents" class="mytabs-container"></div>
                               <script type="text/javascript">tabactive(\'In\',\'' . $gSitePath . '\',\'' . $qid . '\')</script>';

            break;
        case "guru":
            //	$output='sample content Gurus';
            $profileBadges = getAnsweredUsers($qid);

            $output1 = '';
            if (count($profileBadges) > 0) {

                $pat = $gSitePath . drupal_get_path('module', 'profile');
                foreach ($profileBadges as $profile) {
                  $details=load_user($profile['uid']);
                   $output1.=load_user_badge($profile['uid']);
                    $output1 .= '<div class="clr"></div><br/>';
                }
            } else {
                $output1 = "No Users available";
            }
            $output = $output1;

            break;
        case "Info":
            $bubble = load_bubble($fetuserlist->uid);
            $medal = updateProfileBadge($fetuserlist->uid);
            $section = load_qcat($qid,1);
            $output.= '
                       <div class="">
<div  class="details-left">
 <span class="profile-gray">Context</span> :' . $oListquest->context . '
     <br/>
     <span class="profile-gray">Section </span>:' . $section . '
     </div>
<div style="float:left;">
<div class="profile-lefthm">
<span class="profile-gray">Byline: </span>
<br />
' . $bubble . '
<div class="clr"></div>
<div>

<span class="profile-gray">Date Created </span> : ' . date("D j M Y", strtotime($oListquest->date_added)) . '  <br />
<span class="profile-gray">Number of Votes </span>:  ' . $totalvotesm . '<br />
<span class="profile-gray">Number of Forum Posts</span> : ' . $debatecnt . '<br />
<span class="profile-gray">Number of Resources </span> :  ' . $numresource . '<br />

</div>
</div>

</div><div class="clr"></div><br />



</div>
		';
            break;
        case "Politician":
            $output = 'sample content Politician';
            break;

        case "news":
            $output = 'sample content news';
            break;
        case "multimedia":
            $output = 'sample content multimedia';
            break;
        case "facts":
            $output = 'sample content facts';
            break;
        default:
            $output = '
			  <ul class="subtabs" id="tabs">
				<li class="current"><a href="javascript:loadReport(1,\'' . $gSitePath . '\',' . $qid . ');"  id="tab1">Votes</a></li>
				<li ><a href="javascript:loadReport(2,\'' . $gSitePath . '\',' . $qid . ');" class="" id="tab2">Overtime</a></li>
				<li ><a href="javascript:loadReport(3,\'' . $gSitePath . '\',' . $qid . ');" class="" id="tab3">By Area</a></li>
			</ul>
			   <div class="mytabs-container" id="tabs-container"><iframe style="height: 350px;" id="frmGoogle" scrolling="no" src="' . $gSitePath . '/qlite/percent/' . $qid . '" border="0" frameborder="0" width="100%"></iframe></div>
			<script type="text/javascript">loadReport(1,\'' . $gSitePath . '\',' . $qid . ')</script>';
            break;
    }
    echo $output;
}


function issue_report_tab($qid = ''){
    global $gSitePath, $user, $gDocPath, $base_root;
    $output = '
			  <ul class="subtabs" id="tabs">
				<li class="current"><a href="javascript:loadReport(1,\'' . $gSitePath . '\',' . $qid . ');"  id="tab1">Votes</a></li>
				<li ><a href="javascript:loadReport(2,\'' . $gSitePath . '\',' . $qid . ');" class="" id="tab2">Overtime</a></li>
				<li ><a href="javascript:loadReport(3,\'' . $gSitePath . '\',' . $qid . ');" class="" id="tab3">By Area</a></li>
			</ul>
			   <div class="mytabs-container" id="tabs-container"><iframe style="height: 350px;" id="frmGoogle" scrolling="no" src="' . $gSitePath . '/qlite/percent/' . $qid . '" border="0" frameborder="0" width="100%"></iframe></div>
			<script type="text/javascript">loadReport(1,\'' . $gSitePath . '\',' . $qid . ')</script>';
    return $output;
}

function add_vote_notify($form, &$form_state){
    global $user;
    /*New SET NOTIFY LOG*/
    //echo '<pre>'; print_r($form);
    $nid = $form['#node']->nid;
    $choice = $form['vote']['#post']['choice'];
    $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
    $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $choice);
    set_notify_log($user->uid, $nid, 'add_vote', $variable);
    /*New SET NOTIFY LOG*/
     _send_votenotify($nid);
    increasepoints('2', $nid, '0');
}

function add_flag_notify($form, &$form_state){
    global $user;
    /*New SET NOTIFY LOG*/
    //echo '<pre>'; print_r($form); exit;
    $nid = $form['#parameters'][2]->oid;
    $qtitle = $form['#parameters'][2]->title;
    $variable = array('qid' => $nid, 'q_title' => $qtitle);
    set_notify_log($user->uid, $nid, 'question_flag', $variable);
    /*New SET NOTIFY LOG*/
}

function dates_range($date1, $date2) {
if(empty($date1))
    $date1=format_date(time(), 'custom', 'Y-m-d');
if(empty($date2))
      $date1=format_date(time(), 'custom', 'Y-m-d');

    if ($date1 < $date2) {
        $dates_range[] = $date1;
        $date1 = strtotime($date1);
        $date2 = strtotime($date2);
        while ($date1 != $date2) {
            $date1 = mktime(0, 0, 0, date("m", $date1), date("d", $date1) + 1, date("Y", $date1));
            $dates_range[] = date('Y-m-d', $date1);
        }
    }
    return $dates_range;
}

function _send_votenotify($qid='') {
    global $gSitePath, $user, $gDocPath, $base_root;
    $qry = "insert into notification (uid,follower_action,is_question,new_answer,node_id) values('" . $user->uid . "','1','1','1'," . $qid . "' ) ";

    hm_mails($qid, '', 'vote_answer');
}