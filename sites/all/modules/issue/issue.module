<?php

// $Id: issue.module,v 1.21.2.88.2.34 2010/06/22 09:30:59 mirodietiker Exp $

/**
 * @file
 * Issue Poll -A sophisticated issue module for voting and analysis report generating.
 */

/**
 * Implementation of hook_help().
 */
function issue_help($path, $arg) {
    switch ($path) {
        case 'admin/modules#description':
            return t('A sophisticated issue module for voting and analysis report generating.');
            break;
    }
}

/**
 * Implementation of hook_perm().
 */
function issue_perm() {
    return array(
        'create issue',
        'edit issue',
        'edit own issue',
        'vote on issue',
        'cancel own vote',
        'administer issue',
        'inspect all votes',
        'show vote results',
        'access electoral list',
        'add write-ins',
    );
}

/**
 * Implementation of hook_access().
 */
function issue_access($op, $node, $account) {
    if ($op == 'create') {
        return user_access('create issue', $account);
    }
    if ($op == 'update') {
        if (user_access('edit issue', $account) || ($node->uid == $account->uid && user_access('edit own issue', $account))) {
            return TRUE;
        }
    }
}

/**
 * Implementation of hook_node_info().
 */
function issue_node_info() {

    $info = array();

    return $info;
}

/**
 * Implementation of hook_menu().
 */
function issue_menu() {
    global $user;


    $menu = array();




    return $menu;
}

/**
 * Implementation of hook_init().
 */
function issue_init() {
    // Use poll.module's stylesheet, no need to duplicate at this point.
    drupal_add_css(drupal_get_path('module', 'poll') . '/poll.css');


    if (module_exists('jquery_ui')) {
        jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));
    }
}

/**
 * Implementation of hook_form().
 *
 * This hook displays the form necessary to create/edit the issue.
 */
function issue_form(&$node, $form_state) {

    $type = node_get_types('type', $node);
    $editing = isset($node->nid);
    $form = array();

    // Only add javascript once, even if _form is called multiple times.
    static $add_js;
    if (!$add_js) {
        // Pass translatable strings
        drupal_add_js(array('advPoll' => array('remove' => t('Remove'), 'addChoice' => t('Add choice'), 'noLimit' => t('No limit'))), 'setting');
        drupal_add_js(drupal_get_path('module', 'issue') . '/issue-form.js', 'module');
        drupal_add_css(drupal_get_path('module', 'issue') . '/issue.css', 'module');
        $add_js = TRUE;
    }

    $form['title'] = array(
        '#type' => 'textfield',
        '#maxlength' => 255,
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
    );
    $form['body_field']['body'] = array(
        '#type' => 'textarea',
        '#title' => check_plain($type->body_label),
        '#required' => FALSE,
        '#default_value' => $node->body,
    );

    $form['body_field']['format'] = filter_form($node->format);



    return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function issue_form_alter(&$form, $form_state, $form_id) {

    if ($form_id == 'poll_node_form') {


        //$form['#after_build'][] = 'issue_after_build';


        $form['field_issue_state']['#access'] = false;
        $form['field_issue_city']['#access'] = false;
        //   echo "<pre>";
        //print_r($form);
    }
}

function _test_helper_story_node_form_validate($form, &$form_state) {
    if ($form_state['values']['title'] == "Testing") {
        form_set_error('title', t('No testing allowed!'));
    }
}

function issue_after_build($form, &$form_state) {
    // allter the form values: Stuff!



    foreach (element_children($form['choice']) as $key) {


        // echo "dd";
    }//exit;
    return $form;
}

function issue_nodeapi($node, $op, $a3 = NULL, $a4 = NULL) {
    if ($node->type == 'poll') {

        switch ($op) {
            case 'insert':
                //    echo "<pre>";
                //  print_r($node);
                break;
            case 'load':

                break;
            case 'view':
                //unset($node->content['body']);
                break;
        }
    }
}

function issue_save($array='') {
    global $user;
    $account = user_load(array('uid' => $user->uid));
    $node = new StdClass();
    $node->type = 'poll';
    $node->create = time();
    $node->title = $array['q_quest'];
    $node->body = $array['q_context'];
    $node->uid = $account->uid;
    $node->status = 1;
    node_save($node);


    if (!user_access('administer nodes')) {
        // Make sure all votes are 0 initially
        foreach ($node->choice as $i => $choice) {
            $node->choice[$i]['chvotes'] = 0;
        }
        $node->active = 1;
    }

    db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);

    $j = 0;
    for ($i = 1; $i <= $array['ans_cnt']; $i++) {
        $name = "q_ans" . $i;

        if (!empty($array[$name])) {

            db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $array[$name], '0', $j++);
        }
    }
//url alias
    $dst = clean_url(myTruncate($node->title, 100, ''), '', '-', $node->nid);
    $url = 'qlite/view/' . $node->nid;
    db_query("INSERT INTO {url_alias} (src, dst, language) VALUES ('%s', '%s', '%s')", $url, $dst, 'en');
}

function issue_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks[0] = array(
                'info' => t('Node block'),
            );

            return $blocks;

        case 'view':
            switch ($delta) {
                case 0:
                    $block['subject'] = "Issue Reporting";
                    if (arg(0) == 'node' && is_numeric(arg(1))) {
  $nid = arg(1);
  
  //$node=node_load(array('nid'=>20));
                    $tab=issue_view_results($nid,false,false,true);
}
                    
                  
                  $block['content'] =$tab;
                  
                    break;
            }
            return $block;
    }
}

function issue_theme($existing, $type, $theme, $path) {
 
  return array(

    'issue_results' => array(
      'template' => 'issue_results',
      'arguments' => array('nid' => NULL, 'votes' => NULL),
    )
  );
}


function issue_view_results(&$nid, $teaser, $page, $block) {
    global $gSitePath, $user, $gDocPath, $base_root;
  // Count the votes and find the maximum
   //  $node=node_load(array('nid'=>$nid));
 // $total_votes = 0;
 // $max_votes = 0;
 // foreach ($node->choice as $choice) {
//    if (isset($choice['chvotes'])) {
//      $total_votes += $choice['chvotes'];
//      $max_votes = max($max_votes, $choice['chvotes']);
//    }
//  }

//  $poll_results = '';

  return theme('issue_results',$nid,t('12'));
}
//function theme_issue_results($title='',$votes=''){
//
//    $output = '<div id="philquotes-text">'. t($title)
//.'</div><div id="philquotes-origin">' . t($votes) . '</div>';
//return $output;
//}
//function template_preprocess_issue_results(&$variables) {
//
//  $variables['title'] = theme('links', $variables['raw_links']);
//  if (isset($variables['vote']) && $variables['vote'] > -1 && user_access('cancel own vote')) {
//    $variables['cancel_form'] = drupal_get_form('poll_cancel_form', $variables['nid']);
//  }
//  $variables['title'] = check_plain($variables['raw_title']);
//
//  // If this is a block, allow a different tpl.php to be used.
//  if ($variables['block']) {
//    $variables['template_files'][] = 'issue_results';
//  }
//}
//function issue_preprocess_block(&$vars) {
//
//    $vars['title'] = '12';
//
//    return $vars;
//}


/**
 * Implementation of hook_load().
 *
 * Load the votes and issue-specific data into the node object.
 */
function issue_load($node) {
    $issue = db_fetch_object(db_query('SELECT * FROM {issue} WHERE nid = %d', $node->nid));
    $result = db_query('SELECT cid, weight, label, writein FROM {issue_choices} WHERE nid = %d ORDER BY weight', $node->nid);
    $issue->choice = array();
    $issue->writein_choices = 0;
    while ($choice = db_fetch_array($result)) {
        $issue->choice[$choice['cid']] = $choice;
        if ($choice['writein'] == 1) {
            $issue->writein_choices++;
        }
    }
    $issue->choices = count($issue->choice);

    $result = db_query("SELECT value FROM {votingapi_cache} WHERE content_type = 'issue' AND content_id = %d AND tag = '_issue' AND function = 'total_votes'", $node->nid);
    if ($cache = db_fetch_object($result)) {
        // Found total votes in the cache.
        $issue->votes = $cache->value;
    } else {
        $issue->votes = 0;
    }

    list($issue->voted, $issue->cancel_vote) = _issue_user_voted($node->nid);
    return $issue;
}

/**
 * Implementation of hook_validate().
 *
 * Validate the editing of an issue node. 
 */
function issue_validate($node, &$form) {
    // Use form_set_error for any errors.
    $node->choice = array_values($node->choice);

    // TODO: verify if this hack is still needed in Drupal 6.
    // Start keys at 1 rather than 0.
    array_unshift($node->choice, '');
    unset($node->choice[0]);

    // Check for at least two choices.
    $real_choices = 0;

    // TODO: take out _POST
    foreach ($_POST['choice'] as $i => $choice) {
        if ($choice['label'] != '') {
            $real_choices++;
        }
    }

    if ($real_choices < 2) {
        form_set_error("choice][$real_choices][label", t('You must fill in at least two choices.'));
    }

    // Validate max choices since it has #DANGEROUS_SKIP_CHECK set to true.
    if ($node->settings['max_choices'] < 0) {
        form_set_error('settings][max_choices]', t('Maximum choices must be a non-negative integer.'));
    }

    if ($node->settings['max_choices'] > $real_choices) {
        form_set_error('settings][max_choices]', t('Maximum choices cannot be larger than the number of choices submitted.'));
    }

    // Validate dates.
    if (!empty($node->settings['start_date']) && strtotime($node->settings['start_date']) <= 0) {
        form_set_error('settings][start_date', t('You have to specify a valid starting date.'));
    }
    if (!empty($node->settings['end_date']) && strtotime($node->settings['end_date']) <= 0) {
        form_set_error('settings][end_date', t('You have to specify a valid ending date.'));
    }
    if (!empty($node->settings['end_date']) && $node->settings['end_date'] < $node->settings['start_date']) {
        form_set_error('settings][end_date', t('Ending date cannot be before the starting date.'));
    }
}

/**
 * Implementation of hook_insert().
 *
 * This is called upon node creation.
 */
function issue_insert($node) {

    // Insert the choices.
    _issue_insert_choices($node);
}

/**
 * Implementation of hook_update().
 *
 * This is called upon node edition.
 */
function issue_update($node) {

    db_query("UPDATE {issue} SET active = %d, max_choices = %d, algorithm = '%s', use_list = %d, show_votes = %d, start_date = '%s', end_date = '%s', writeins = %d, show_writeins = %d, question = '%s' WHERE nid = %d", !$node->settings['close'], $node->settings['max_choices'], $node->settings['algorithm'], $node->settings['use_list'], $node->settings['show_votes'], $node->settings['start_date'] ? strtotime($node->settings['start_date']) : 0, $node->settings['end_date'] ? strtotime($node->settings['end_date']) : 0, $node->settings['writeins'], $node->settings['show_writeins'], isset($node->question) ? $node->question : '', $node->nid);

    _issue_insert_choices($node);
    votingapi_recalculate_results('issue', $node->nid);
}



/**
 * Implementation of hook_delete().
 */
function issue_delete($node) {
    db_query('DELETE FROM {issue} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {issue_choices} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {issue_electoral_list} WHERE nid = %d', $node->nid);

    // TODO: These should be converted to a votingapi method eventually.
    db_query("DELETE FROM {votingapi_vote} WHERE content_id = %d AND content_type = 'issue'", $node->nid);
    db_query("DELETE FROM {votingapi_cache} WHERE content_id = %d AND content_type = 'issue'", $node->nid);
}

