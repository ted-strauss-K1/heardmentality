<?php

/**
 * Implementation of hook_perm().
 */
function debate_perm() {
  return array('Debate List', 'Debate Save', 'Admin Debate', 'Resource Debate');
}

/*
 * Implementation of hook_init()
 */
function debate_init() {
  global $base_url;
  drupal_add_js(array('base_url' => $base_url), 'setting');
}

/**
 * Implementation of hook_perm().
 */
function debate_theme() {
  $theme = array();

  $theme['debate_ajax_url'] = array(
    'template' => 'debate-ajax-url',
    'arguments' => array(
      'images' => array(),
      'image_count' => 0,
      'image_first' => 0,
      'image_last' => 0,
      'image_path' => '',
      'info' => '',
    ),
  );

  return $theme;
}

/**
 * Implementation of hook_menu().
 */
function debate_menu() {
  $items['issues/debate/%/%'] = array(
    'title' => ' Debate',
    'page callback' => 'debate_list',
    'access arguments' => array('Debate List'),
    'type' => MENU_SUGGESTED_ITEM,
    'page arguments' => array(2, 3),
    'file' => 'debate.pages.inc',
  );
  $items['debate/resource/new/%'] = array(
    'title' => 'Debate Resources',
    'page callback' => 'add_resources',
    'access arguments' => array('Resource Debate'),
    'page arguments' => array(3),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',);

  $items['resource/debate/%/%'] = array(
    'title' => 'Resource Debate',
    'page callback' => 'resdebate_list',
    'access arguments' => array('Resource Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'page arguments' => array(2, 3),
    'file' => 'debate.pages.inc',
  );
  $items['issues/resource/%/%'] = array(
    'title' => 'Resource Debate List',
    'page callback' => 'resource_list',
    'access arguments' => array('Resource Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'page arguments' => array(2, 3),
    'file' => 'debate.pages.inc',
  );
  $items['issues/debate/save'] = array(
    'title' => 'Debate',
    'page callback' => 'debate_submit',
    'access arguments' => array('Debate Save'),
    'type' => MENU_CALLBACK,
    'file' => 'debate.pages.inc',
  );
  $items['admin/debate'] = array(
    'title' => 'Admin Debate',
    'page callback' => 'admin_debate',
    'access arguments' => array('Admin Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',
  );

  $items['admin/debate/edit'] = array(
    'title' => 'Admin Edit Debate',
    'page callback' => 'admin_debate_edit',
    'access arguments' => array('Admin Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',
  );
  $items['admin/wavelets'] = array(
    'title' => 'Admin Debate Wavelets',
    'page callback' => 'admin_debate_wlets',
    'access arguments' => array('Admin Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',
  );

  $items['admin/wavelets/edit'] = array(
    'title' => 'Admin Forum Wavelets',
    'page callback' => 'admin_wlets_edit',
    'access arguments' => array('Admin Debate'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',
  );
  $items['debate/ajax'] = array(
    'title' => 'Admin Forum Wavelets',
    'page callback' => 'debate_ajax',
    'access arguments' => array('Debate List'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'debate.pages.inc',
  );
  return $items;
}

function send_forumnotify($nid='', $qid='') {
  global $user;

  $insert_notify = db_query("insert into notification (uid,follower_action,is_wave,node_id) values('" . $user->uid . "','1','1','" . $nid . "' ) ");

  hm_mails($qid, $nid, 'add_forum');
}

function debate_roundup($did='') {
  global $user, $theme;
//main debate
  //$query = "SELECT IFNULL((select count(*) from {user_likes} as l where l.node_id=f.did AND is_debate='1' AND is_agree='1' group by l.node_id),0) as cntagree,IFNULL((select count(*) from {user_likes} as l where l.node_id=f.did AND is_debate='1' AND is_agree='0' group by l.node_id),0) as cntdisagree  FROM {debate} as f  join {user_profile} as u on u.uid=f.uid   where f.did='$did'";

  $query = "SELECT IFNULL((select count(*) from {votingapi_vote} as l where l.content_id=f.nid AND content_type='node' AND value='1' group by l.content_id),0) as cntagree,IFNULL((select count(*) from {votingapi_vote} as l where l.content_id=f.nid AND content_type='node' AND value='-1' group by l.content_id),0) as cntdisagree  FROM {node} as f  join {user_profile} as u on u.uid=f.uid   where f.nid='$did'";

  $main = ExecuteQuery($query, "select");


  $query = "SELECT IFNULL( (

SELECT count( * )
FROM {votingapi_vote} AS l
WHERE l.content_id = f.cid
AND content_type = 'comment'
AND value = '1'
GROUP BY l.content_id ) , 0
) AS cntagree, IFNULL( (

SELECT count( * )
FROM {votingapi_vote} AS l
WHERE l.content_id = f.cid
AND content_type = 'comment'
AND value = '-1'
GROUP BY l.content_id ) , 0
) AS cntdisagree,f.str_wk,f.cid
FROM {comments} AS f
JOIN user_profile AS u ON u.uid = f.uid
WHERE f.nid = '$did'";
  $sub = ExecuteQuery($query, "select");

  foreach ($sub as $list) {
    $list['str_wk'];
    $str_wk = ($list['str_wk'] == 0) ? '-1' : '1';
    $agree = $agree + $list['cntagree'];
    $dagree = $dagree + $list['cntdisagree'];
    $strength = $list['cntagree'] - $list['cntdisagree'];
    $activity = $list['cntagree'] + $list['cntdisagree'];

    $rollup = $strength * $str_wk;
    //pundit score
    //db_query("update {debate_reply} set score='$strength' where rid='" . $list['rid'] . "'");
    db_query("update {comments} set score='$strength' where cid='" . $list['cid'] . "'");
    //Activity
    $sum_act = $sum_act + $activity;
    //For Rollup Strenght
    $sum_rollup = $sum_rollup + $rollup;
  }
  $agree = $main['0']['cntagree'] + $agree;
  //pundit score
  $debate_str = $main['0']['cntagree'] + $main['0']['cntdisagree'];
  $dagree = $main['0']['cntdisagree'] + $dagree;
  $sum_act = $agree + $dagree;

  $sum_rollup = $main['0']['cntagree'] + $sum_rollup;
  //$query = "update {debate} set agree='$agree',disagree='$dagree',activity='$sum_act',strength='$sum_rollup',score='$debate_str' where did='$did'";
  $query = "update {content_type_forum} set field_agree_value='$agree',field_disagree_value='$dagree',field_activity_value='$sum_act',field_score_value='$debate_str' where nid='$did'";
  $main = ExecuteQuery($query, "select");
}

function resource_roundup($rid='') {
  global $user, $theme;
//main debate
  //$query = "SELECT IFNULL((select count(*) from {user_likes} as l where l.node_id=f.rid AND is_resource='1' AND is_agree='1' group by l.node_id),0) as cntagree,IFNULL((select count(*) from {user_likes} as l where l.node_id=f.rid AND is_debate='1' AND is_agree='0' group by l.node_id),0) as cntdisagree  FROM {resource} as f  join {user_profile} as u on u.uid=f.uid   where f.rid='$rid'";
  $query = "SELECT IFNULL((select count(*) from {votingapi_vote} as l where l.content_id=f.nid AND content_type='node' AND value='1' group by l.content_id),0) as cntagree,IFNULL((select count(*) from {votingapi_vote} as l where l.content_id=f.nid AND content_type='node' AND value='-1' group by l.content_id),0) as cntdisagree  FROM {node} as f  join {user_profile} as u on u.uid=f.uid   where f.nid='$rid'";
  $main = ExecuteQuery($query, "select");


  $query = "SELECT IFNULL( (

SELECT count( * )
FROM {votingapi_vote} AS l
WHERE l.content_id = f.cid
AND content_type = 'comment'
AND value = '1'
GROUP BY l.content_id ) , 0
) AS cntagree, IFNULL( (

SELECT count( * )
FROM {votingapi_vote} AS l
WHERE l.content_id = f.cid
AND content_type = 'comment'
AND value = '-1'
GROUP BY l.content_id ) , 0
) AS cntdisagree,f.str_wk,f.cid
FROM {comments} AS f
JOIN user_profile AS u ON u.uid = f.uid
WHERE f.nid = '$rid'";
  $sub = ExecuteQuery($query, "select");

  foreach ($sub as $list) {
    $list['str_wk'];
    $str_wk = ($list['str_wk'] == 0) ? '-1' : '1';
    $agree = $agree + $list['cntagree'];
    $dagree = $dagree + $list['cntdisagree'];
    $strength = $list['cntagree'] - $list['cntdisagree'];
    $activity = $list['cntagree'] + $list['cntdisagree'];

    $rollup = $strength * $str_wk;
    //pundit score
    //db_query("update {resource_reply} set score='$strength' where did='" . $list['reid'] . "'");
    db_query("update {comments} set score='$strength' where cid='" . $list['cid'] . "'");
    //Activity
    $sum_act = $sum_act + $activity;
    //For Rollup Strenght
    $sum_rollup = $sum_rollup + $rollup;
  }
  $agree = $main['0']['cntagree'] + $agree;
  $dagree = $main['0']['cntdisagree'] + $dagree;
  $sum_act = $agree + $dagree;
  $sum_rollup = $main['0']['cntagree'] + $sum_rollup;
  $debate_str = $main['0']['cntagree'] + $main['0']['cntdisagree'];
  //pundit score
  //$query = "update {resource} set agree='$agree',disagree='$dagree',activity='$sum_act',strength='$sum_rollup',score='$debate_str' where rid='$rid'";
  $query = "update {content_type_forum} set field_agree_value='$agree',field_disagree_value='$dagree',field_activity_value='$sum_act',field_strength_value='$sum_rollup',field_score_value='$debate_str' where nid='$rid'";
  $main = ExecuteQuery($query, "select");
}

function converttimestamp($indate) {

  list($year, $month, $day) = explode('-', $indate);

  $timestamp = mktime(0, 0, 0, $month, $day, $year);

  return $timestamp;
}

function cdatetime($timestamp) {
  if (!$timestamp) {
    return 'N/A';
  }

  $timestamp = (int) strtotime($timestamp);
  $difference = time() - $timestamp;
  $periods = array("sec", "min", "hour", "day", "week", "month", "year", "decade");
  $lengths = array("60", "60", "24", "7", "4.35", "12", "10");
  $total_lengths = count($lengths);

  if ($difference > 0) { // this was in the past
    $ending = "ago";
  }
  else { // this was in the future
    $difference = -$difference;
    $ending = " from now";
  }
  //return;

  for ($j = 0; $difference > $lengths[$j] && $total_lengths > $j; $j++) {
    $difference /= $lengths[$j];
  }

  $difference = round($difference);
  if ($difference != 1) {
    $periods[$j].= "s";
  }

  $text = "$difference $periods[$j] $ending";

  return $text;
}

function format_date_class($date, $date2) {
  // this function gives a fuzzy description of the date relative to today
  // NOTE: this will only work properly if the date is given for time: 00:00 AM
  // (i.e. Tomorrow, in 3 days, in a week, etc.)
  //$date=$params['sdate'];
  //$date2=$params['edate'];
  $twodiff = datediff('y', $date, date("Y-m-d H:i:s"), '');
  $date = strToTime($date);
  $date2 = strToTime($date2);
  $time = date('h:i ', $date);
  $default = date('M j,y h:i ', $date);
  $difference = $date - strToTime(date("Y-m-d"));
  //  $diff_days = round($difference / (24*3600));
  $diff_days = floor($difference / (60 * 60 * 24));
  if ($date) {
    // handle negatives
    if ($difference >= 0) {
      if ($diff_days < 13) {
        // days to a week
        switch ($twodiff) {
          case 0:

            if ($twodiff == 0) {
              $fuzz = "Today " . $time;
            }
            else {
              $fuzz = $default;
            }
            break;
          case 1:

            $fuzz = "Tomorrow " . $time;

            break;
          case 8:
            $fuzz .= "In a week ";
            // $fuzz.= "[$default]";
            break;
          default:

            $fuzz .= "In " . $diff_days . " days ";
          // $fuzz.= "[$default]";
        }
      }
      elseif ($diff_days < 25) {
        // weeks
        $diff_weeks = round($diff_days / 7);
        $fuzz.= "In about " . $diff_weeks . " weeks ";
        $fuzz.= "[$default]";
      }
      elseif ($diff_days < 340) {
        // months
        $diff_months = round($diff_days / 30.4); // this gives good approximation to average month duration (365/12 = 30.416...), (365.25/12 = 30.4375)
        if ($diff_months == 1) {
          $fuzz.= "In about a month";
          $fuzz.= "[$default]";
        }
        else {
          $fuzz.= "in about " . $diff_months . " months ";
          $fuzz.= "[$default]";
        }
      }
      else {
        // years
        $diff_years = round($diff_days / 365.25);
        if ($diff_years == 1) {
          // $fuzz = "In about a year";
          $fuzz = $default;
        }
        else {
          //   $fuzz = "In about ".$diff_years." years";
          $fuzz = $default;
        }
      }
    }
    else {
      $diff_days = -$diff_days;

      if ($diff_days < 13) {
        // days to a week
        switch ($diff_days) {
          case 0:

            $fuzz = "Today " . $time;

          case 1:

            $fuzz = "Yesterday " . $time;

            break;
          case 2:
          case 3:
          case 4:
          case 5:
            $fuzz = $diff_days . " days ago";
            //$fuzz.= "[$default]";
            break;
          case 6:
          case 7:
          case 8:
            $fuzz = "Around last week";
          //	$fuzz.= "[$default]";
          default:
            $fuzz = "Over a week ago";
          // $fuzz.= "[$default]";
        }
      }
      elseif ($diff_days < 25) {
        // weeks
        $diff_weeks = round($diff_days / 7);
        $fuzz = "Around " . $diff_weeks . " weeks ago";
        // $fuzz.= "[$default]";
      }
      elseif ($diff_days < 340) {
        // months
        $diff_months = round($diff_days / 30.4); // this gives good approximation to average month duration (365/12 = 30.416...), (365.25/12 = 30.4375)
        if ($diff_months == 1) {
          $fuzz = "Around last month";
          // $fuzz.= "[$default]";
        }
        else {
          $fuzz = "Around " . $diff_months . " months ago";
          // $fuzz.= "[$default]";
        }
      }
      else {
        // years
        $diff_years = round($diff_days / 365.25);
        if ($diff_years = 39) {
          // for epoch fail
          $fuzz = "Forever ago";
        }
        else if ($diff_years == 1) {
          $fuzz = "Around last year";
        }
        else {
          $fuzz = "Around " . $diff_years . " years ago";
        }
      }
    }
  }
  else {
    $fuzz = "unknown time";
  }


  return $fuzz;
}

function datediff($interval, $datefrom, $dateto, $using_timestamps = false) {

  /*

    $interval can be:

    yyyy - Number of full years

    q - Number of full quarters

    m - Number of full months

    y - Difference between day numbers

    (eg 1st Jan 2004 is "1", the first day. 2nd Feb 2003 is "33". The datediff is "-32".)

    d - Number of full days

    w - Number of full weekdays

    ww - Number of full weeks

    h - Number of full hours

    n - Number of full minutes

    s - Number of full seconds (default)

   */



  if (!$using_timestamps) {

    $datefrom = strtotime($datefrom, 0);

    $dateto = strtotime($dateto, 0);
  }

  $difference = $dateto - $datefrom; // Difference in seconds

  switch ($interval) {

    case 'yyyy': // Number of full years

      $years_difference = floor($difference / 31536000);

      if (mktime(date("H", $datefrom), date("i", $datefrom), date("s", $datefrom), date("n", $datefrom), date("j", $datefrom), date("Y", $datefrom) + $years_difference) > $dateto) {

        $years_difference--;
      }

      if (mktime(date("H", $dateto), date("i", $dateto), date("s", $dateto), date("n", $dateto), date("j", $dateto), date("Y", $dateto) - ($years_difference + 1)) > $datefrom) {

        $years_difference++;
      }

      $datediff = $years_difference;

      break;

    case "q": // Number of full quarters



      $quarters_difference = floor($difference / 8035200);

      while (mktime(date("H", $datefrom), date("i", $datefrom), date("s", $datefrom), date("n", $datefrom) + ($quarters_difference * 3), date("j", $dateto), date("Y", $datefrom)) < $dateto) {

        $months_difference++;
      }

      $quarters_difference--;

      $datediff = $quarters_difference;

      break;

    case "m": // Number of full months

      $months_difference = floor($difference / 2678400);

      while (mktime(date("H", $datefrom), date("i", $datefrom), date("s", $datefrom), date("n", $datefrom) + ($months_difference), date("j", $dateto), date("Y", $datefrom)) < $dateto) {

        $months_difference++;
      }
      $months_difference--;

      $datediff = $months_difference;

      break;

    case 'y': // Difference between day numbers

      $datediff = date("z", $dateto) - date("z", $datefrom);

      break;

    case "d": // Number of full days

      $datediff = floor($difference / 86400);

      break;

    case "w": // Number of full weekdays
      $days_difference = floor($difference / 86400);
      $weeks_difference = floor($days_difference / 7); // Complete weeks

      $first_day = date("w", $datefrom);

      $days_remainder = floor($days_difference % 7);

      $odd_days = $first_day + $days_remainder; // Do we have a Saturday or Sunday in the remainder?

      if ($odd_days > 7) { // Sunday
        $days_remainder--;
      }

      if ($odd_days > 6) { // Saturday
        $days_remainder--;
      }

      $datediff = ($weeks_difference * 5) + $days_remainder;

      break;

    case "ww": // Number of full weeks

      $datediff = floor($difference / 604800);

      break;

    case "h": // Number of full hours
      $datediff = floor($difference / 3600);
      break;

    case "n": // Number of full minutes
      $datediff = floor($difference / 60);
      break;

    default: // Number of full seconds (default)
      $datediff = $difference;

      break;
  }

  return $datediff;
}

function debate_cron() {
  global $user, $language, $theme;
  // get oly debates (not resources)
  // field_type_value must be 1(debates only).
  $query = db_query("SELECT n.nid FROM {content_type_forum} AS cf JOIN {node} AS n ON cf.nid=n.nid WHERE cf.field_lang_status_value='%d' AND cf.field_type_value = '%d' AND n.type='%s' AND n.tnid='%d' AND n.translate='%d'", 0, 1, 'forum', 0, 0);
  while ($langNode = db_fetch_object($query)) {
    $nid = $langNode->nid;
    $node = node_load($nid);
    //echo '<pre>'; print_r($node); exit;
    // add content in multi languages (title, body, choices)
    $node->field_lang_status[0]['value'] = 1;
    issue_translator_action_node_translate($node);
    db_query("UPDATE {node} SET translate = '%d', tnid = '%d' WHERE nid = '%d' AND translate = '%d'", 1, $nid, $nid, 0);
  }

  //comments(debate replies and resource replies) translation
  $cQuery = db_query("SELECT * FROM {comments} WHERE translate = '%d' AND tcid = '%d' AND language != ''", 0, 0);
  while ($tComment = db_fetch_object($cQuery)) {
    $cid = $tComment->cid;
    issue_comment_translate($tComment);
    db_query("UPDATE {comments} SET translate = '%d', tcid = '%d' WHERE cid = '%d'", 1, $cid, $cid);
  }
}

function resource_save_ext_imgs($url='') {
  $result = drupal_http_request($url);
  $dir = file_create_path() . '/resources';
  if (!file_check_directory($dir)) {
    mkdir($dir, 0775, true);
  }
  $code = floor($result->code / 100) * 100;
  $ext = '.' . 'jpg';
  $types = array('image/jpeg', 'image/png', 'image/gif');
  $src = file_create_path() . '/resources/' . md5($url) . $ext;
  if ($result->data && $code != 400 && $code != 500 && in_array($result->Content - Type, $types)) {
    $return = file_save_data($result->data, $src);
    return $return;
  }
  else {

    //if we are unsuccessful then log a message in the watchdog

    watchdog('resource', 'The image ' . $url . ' could not be retrieved');
    return false;
  }
}




