<?php

/*
 * Implementation of hook_perm()
 */
function points_perm() {
  return array('Manage Points');
}

/*
 * Get list of used actions
 *
 * Invokes custom hook_uses_points_actions()
 */
function points_get_used_actions() {
  return module_invoke_all('uses_points_actions');
}

/*
 * Implementation of hook_menu()
 */
function points_menu() {
  $menu = array();

  $menu['admin/points/list'] = array(
    'title' => t('Points'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('points_form'),
    'access arguments' => array('Manage Points'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'points.admin.inc',
  );
/*
  $menu['admin/points/vote'] = array(
    'title' => t('Votepoints'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('votepoints_form'),
    'access arguments' => array('Manage Points'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'points.admin.inc',
  );

  $menu['admin/points/user'] = array(
    'title' => t('User Points'),
    'page callback' => 'theme',
    'page arguments' => array('user_points'),
    'access arguments' => array('Manage Points'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'points.admin.inc',
  );

  $menu['admin/points/reputation'] = array(
    'title' => t('Reputations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reputation_form'),
    'access arguments' => array('Manage Points'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'points.admin.inc',
  );
*/
  return $menu;
}

/*
 * Implementation of hook_theme()

function points_theme() {
  $theme = array();

  $theme['user_points'] = array(
    'arguments' => array(
    ),
    'file' => 'points.admin.inc',
  );

  return $theme;
}
*/

/*
 * Get the list of points
 */
function points_get() {
  static $points = array();
  if( !empty($points) ) {
    return $points;
  }
  $result = db_query('SELECT * FROM {module_points} ORDER BY points ASC');
  while( $point = db_fetch_array($result) ) {
    $points[$point['mname']] = $point;
  }
  return $points;
}

/*
 * Get the point by machine name
 */
function point_get($mname) {
  $points = points_get();
  return isset($points[$mname]) ? $points[$mname] : false;
}

/*
 * Add the point
 */
function point_add($mname, $name, $points, $type, $cost) {
  db_query("
    INSERT INTO {module_points}
    SET mname = '%s', name = '%s', points = '%d', type = '%d', cost = '%d'",
    $mname, $name, $points, $type, $cost
  );
}

/*
 * Delete the point
 */
function point_delete($mname) {
  db_query("DELETE FROM {module_points} WHERE mname = '%s'", $mname);
}

/*
 * Update the point
 */
function point_update($mname, $name, $points, $type, $cost) {
  db_query("
    UPDATE {module_points}
    SET name = '%s', points = '%d', type = '%d', cost = '%d' WHERE mname = '%s'",
    $name, $points, $type, $cost, $mname
  );
}

/*
 * Add user points
 *
 * @mname - Action machine name
 * @uid   - User Id
 * @data  - Associative array with additional info
 *
 * TODO
 */
function user_points_action($mname, $uid, $data = array()) {
  if( user_check_action($mname, $uid) ) {
    $points = points_get();
    $points_value = ($points[$mname]['type'] == 0 ? -1 : 1) * $points[$mname]['cost'];
    if( !is_array($data) ) {
      $data = array( 'data' => $data );
    }
    array_merge($points[$mname]);
    db_query("INSERT INTO {module_points_userpoints} SET uid = '%d', mname = '%s', points = '%d'",
      $uid, $mname, $points_value
    );
    return $points_value;
  }
}



/*
 * Implementation of hook_uses_points_actions()
 */
function points_uses_points_actions() {
  return 'comment';
}

/*
 * Check user has enough points for action
 *
 * @mname - Action machine name
 * @uid   - User Id
 */
function user_check_action($mname, $uid) {
  $points = points_get();
  if( isset($points[$mname]) ) {
    return $mname == 'comment' ? true : user_get_points($uid) >= $points[$mname]['points'];
  }
  return false;
}

/*
 * Check if action was fired already
 */
function user_points_action_fired($mname, $uid) {
  return db_result(db_query("SELECT COUNT(id) FROM {module_points_userpoints} SET uid = '%d', mname = '%s' WHERE date > CURDATE()",
    $uid, $mname
  )) > 0;
}

/*
 * Get user points count
 */
function user_get_points($uid, $strdate = '', $enddate = '') {
  /* OLD */


  /* NEW */
  return db_result(db_query("
    SELECT IFNULL(SUM(points),0)
    FROM {module_points_userpoints}
    WHERE
      uid = '%d' AND
      DATE BETWEEN %s AND %s",
    $uid,
    empty($strdate) ? "'0000-00-00'" : "'".$strdate."'",
    empty($enddate) ? 'NOW()'        : "'".$enddate."'"
  ));
}


