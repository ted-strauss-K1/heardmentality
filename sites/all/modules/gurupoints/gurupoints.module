<?php

/*
 * Implementation of hook_perm()
 */
function gurupoints_perm() {
  return array('Add Points', 'List Points', 'Home List', 'Add Coins', 'List Coins', 'List Pundits');
}

/*
 * Implementation of hook_theme()
 */
function gurupoints_theme($existing, $type, $theme, $path) {
  return array(
    'single_pundit' => array(
      'arguments' => array('punditItems' => array()),
    ),
  );
}

function theme_single_pundit($punditItems) {
  global $gSitePath, $theme;

  $output = '
    <div class="pundit-area">
      <div class="top-p">';
  $output .= UserPicture($punditItems['pundit_id']);
  $output .= l($punditItems['name'], 'profile/' . $punditItems['name']) . '<br />';
  $output .= t('Member Since') . '<br />' . $punditItems['member_since'];
  $output .= '</div><div class="clr"></div>';
  $output .= '<div class="bottom">
                    <div><span><b>' . t('votes') . ':</b>' . $punditItems['total_votes'] . '</span><span><b>' . t('Comments') . ':</b>' . $punditItems['total_comments'] . '</span></div>
                    <div><span><b>' . t('References') . ':</b>' . $punditItems['total_references'] . '</span><span><b>' . t('Followers') . ':</b>' . $punditItems['total_followers'] . '</span></div>
                    <div class="det">' . t('Real Name') . ':&nbsp;' . $punditItems['real_name'] . '<br />
                    ' . t('Location') . ':&nbsp;' . $punditItems['state'] . ', ' . $punditItems['country'] . '<br />
                    ' . t('Age') . ':&nbsp;' . $punditItems['age'] . '<br />
                    ' . t('Gender') . ':&nbsp;' . $punditItems['gender'] . '<br />
                    ' . t('Religion') . ':&nbsp;' . $punditItems['religion'] . '<br />
                    ' . t('Ethnicity') . ':&nbsp;' . $punditItems['ethnic'] . '<br />
                    ' . t('Sexual Orientation') . ':&nbsp;' . $punditItems['sorient'] . '<br />
                    ' . t('Education') . ':&nbsp;' . $punditItems['edu'] . '<br />
                    </div>
                </div>';
  $output .= '</div>';
  return $output;
}

/*
 * Implementation of hook_menu()
 */
function gurupoints_menu() {
  $menu = array();

  $menu['pundit/ajax'] = array(
    'title' => 'Ajax Listing',
    'page callback' => 'ajax_pundits',
    'access arguments' => array('Home List'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'gurupoints.pages.inc',
  );

  $menu['pundits'] = array(
    'title' => 'Pundit Lists',
    'page callback' => 'pundit_lists',
    'access callback' => TRUE,
  );

  return $menu;
}

function pundit_lists() {
  return
    '<div class="pundit-wrapper">
      <div class="left-area">
        <p>' . t('Pundits are users who descriptive text tk tk in a certain subject descriptive text tk. Filter the pundits by expertise below.') . '</p>
        <br />' . drupal_get_form('filter_pundits') . '
      </div>
      <div class="right-area">
        <h3>' . t('PUNDITS') . '</h3>
        ' . pundits_load() . '
      </div>
      <div class="clr"></div>
    </div>';
}

function pundits_load() {
  drupal_add_css(drupal_get_path('module', 'gurupoints') . '/scripts/pundits.css');

  $cond = '';
  $output = '';

  $cid = arg(1) != 0 ? arg(1) : '';
  $scid = arg(2) != 0 ? arg(2) : '';
  $sscid = arg(3) != 0 ? arg(3) : '';

  $catid = (!empty($scid)) ? $scid : $cid;
  if (!empty($catid))
    $cond = " AND cat_id='$catid' ";
  if (!empty($cond))
    $user_pt = "select * from {pundit_section} where score !='NULL' $cond  order by score desc";
  else
    $user_pt = "select * from {pundit_section} where score !='NULL'  group by uid order by score desc";
  $list = ExecuteQuery($user_pt, "select");
  if (count($list) > 0) {
    foreach ($list as $quest) {
      $udetails = load_user($quest['uid']);
      $items = load_pundit_details($quest['uid']);
      //$output.= '<a rel=\'' . $bubble . '\'  href="' . $gSitePath . '/profile/' . $udetails->name . '">' . UserPicture($quest['uid']) . '</a>';
      $output .= theme('single_pundit', $items);
    }
  }
  else {
    $output.= '<center><small>' . t('No Pundits Found') . ' </small></center>';
  }
  return $output;
}

function load_pundit_details($uid) {
  $pund = load_user($uid);
  $pundits = array();

  $pundits['name'] = $pund->name;
  $pundits['real_name'] = $pund->real_name;
  $pundits['first_name'] = $pund->first_name;
  $pundits['last_name'] = $pund->last_name;
  $pundits['member_since'] = date("M d, Y", $pund->created);

  $total_votes = db_result(db_query("SELECT COUNT(*) FROM {poll_votes} WHERE uid = %d", $uid));
  $pundits['total_votes'] = $total_votes;
  $total_comments = db_result(db_query("SELECT COUNT(*) FROM {comments} WHERE uid = %d AND (nid = tcid OR tcid = 0)", $uid));
  $pundits['total_comments'] = $total_comments;
  $total_references = db_result(db_query("SELECT COUNT(*) FROM {node} n JOIN {content_type_forum} f ON n.nid = f.nid WHERE n.type='%s' AND n.uid = %d AND f.field_type_value = %d", 'forum', $uid, 2));
  $pundits['total_references'] = $total_references;
  $total_followers = db_result(db_query("SELECT COUNT(*) FROM {user_relationships} WHERE requestee_id = %d", $uid));
  $pundits['total_followers'] = $total_followers;

  $sql = db_query("SELECT * FROM {user_profile} WHERE uid = %d", $uid);
  $profiles = db_fetch_object($sql);
  foreach ($profiles as $profile) {
    $pundits['city'] = $pund->city;
    $pundits['state'] = $pund->state;
    $pundits['country'] = $pund->country;
    $pundits['religion'] = $pund->religion;
    $pundits['ethnic'] = $pund->ethnic;
    $pundits['gender'] = $pund->gender == 1 ? 'Male' : 'Female';
    $pundits['sorient'] = $pund->sorient;
    $pundits['edu'] = $pund->edu;

    // age
    $dob = $pund->dob;
    $pundits['age'] = date("Y") - $dob;
    $pundits['pundit_id'] = $uid;
  }
  return $pundits;
  //echo '<pre>';print_r($pundits);    exit;
}

function ajax_pundits() {
  global $gSitePath, $user, $gDocPath, $base_root, $base_path;

  $cond = '';

  extract($_REQUEST);

  $first = (!empty($first)) ? (($first == 1) ? '0' : $first) : '0';
  $last = (!empty($last)) ? $last - 1 : '4';
  $catid = (!empty($scid)) ? $scid : $cid;

  if (!empty($catid))
    $cond = " AND cat_id='$catid' ";
  //   print_r($_REQUEST);
  //  create_guru_view();
  if (!empty($cond))
    $user_pt = "select * from {pundit_section} where score !='NULL' $cond  order by score desc limit $first,4  ";
  else
    $user_pt = "select * from {pundit_section} where score !='NULL'  group by uid order by score desc limit $first,4  ";
  $list = ExecuteQuery($user_pt, "select");

  if (count($list) > 0) {
   $output.= '<ul>';
    foreach ($list as $quest) {

      $udetails = load_user($quest['uid']);
      $bubble = load_bubble($udetails->uid);

      $output.= '<li><a rel=\'' . $bubble . '\'  href="' . $gSitePath . '/profile/' . $udetails->name . '">' . UserPicture($quest['uid']) . '</a></li>';
    }
    $output.= '</ul>';
  }
  else {
    $output.= '<center><small>' . t('No Pundits Found') . ' </small></center>';
  }
  echo $output;
}

function filter_pundits($form) {
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $client_select = db_query("SELECT t.tid AS cat_id, t.name AS cat_name FROM term_data t RIGHT JOIN term_hierarchy h ON t.tid = h.tid where h.parent='0' AND t.vid = '$vid'");
  $options[''] = 'SUBJECT';
  while ($list = db_fetch_object($client_select)) {
    //$cnt = taxonomy_term_count_nodes($list->cat_id);

    $options[$list->cat_id] = t(stripslashes($list->cat_name));
  }

  $subject = check_plain(arg(1));
  $area = check_plain(arg(2));
  $detail = check_plain(arg(3));

  $form['title'] = array('#type' => 'markup', '#value' => '<b>' . t('FILTER PUNDITS') . '</b>', '#suffix' => '<div class="clr"></div>');
  $form['subject'] = array('#type' => 'select',
    '#options' => $options,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div>',
    '#ahah' => array('wrapper' => 'sub-cat-wrapper',
      'event' => 'change',
      'path' => 'issue/ahah/category/scat',
      'effect' => 'fade',
      'method' => 'replace'),
    '#attributes' => array('class' => 'selectbox-sm'),
    '#default_value' => $subject,
    '#id' => 'subject');
  // get first level category
  $form['defarea'] = array('#type' => 'hidden', '#default_value' => $area);
  $form['defdetail'] = array('#type' => 'hidden', '#default_value' => $detail);
  $form['sub_categories'] = array('#type' => 'markup',
    '#value' => '<div id="sub-cat-wrapper" style="float:left"></div>',
  );

  $form['sub_sub_categories'] = array('#type' => 'markup',
    '#value' => '<div id="sub-sub-cat-wrapper" style="float:left">
                                                </div>',
    '#suffix' => '<br /><div class="clr"></div>');
  $form['filter'] = array('#type' => 'submit', '#value' => t('SUBMIT'));

  return $form;
}

function filter_pundits_submit($form, &$form_state) {
  //echo '<pre>'; print_r($form); exit;
  $cid = $form['#post']['subject'] != '' ? $form['#post']['subject'] : 0;
  $scid = $form['#post']['area'] != '' ? $form['#post']['area'] : 0;
  $sscid = $form['#post']['detail'] != '' ? $form['#post']['detail'] : 0;
  $path = 'pundits/' . $cid . '/' . $scid . '/' . $sscid;
  drupal_goto($path);
}

/*******************************/


























function gurupoints_cron() {

  global $gSitePath, $user, $gDocPath, $base_root, $base_path;

  $user_pt = "SELECT uid FROM {users} where status='1'  ";

  $point_list = ExecuteQuery($user_pt, "select");

  foreach ($point_list as $list) {
    db_query("DROP VIEW IF EXISTS {temp_scores}");
    //  $sel="CREATE VIEW {temp_scores} AS (select sum(score) as score,qid,1 as type,did as nid  from {debate} where uid='".$list['uid']."' group by did) union (select sum(dr.score)  as score,d.qid,2 as type,d.did as nid from {debate_reply} as dr join {debate} as d on d.did=dr.did where dr.uid='".$list['uid']."'  group by dr.rid) ";

    $sel = "CREATE VIEW {temp_scores} AS (select sum(c.field_score_value) as score,c.field_ref_qid_nid AS qid,1 as type,c.nid as nid  from {content_type_forum} c JOIN {node} n ON n.nid = c.nid where n.uid='" . $list['uid'] . "' AND c.field_type_value = '2' group by c.nid) union (select sum(cm.score) as score,cf.field_ref_qid_nid as qid,2 as type,cf.nid as nid from {comments} as cm join {content_type_forum} as cf on cf.nid=cm.nid JOIN {node} AS n ON cm.nid = n.nid where cm.uid='" . $list['uid'] . "' AND cf.field_type_value = '2'  group by cm.cid) ";

    $point_list = db_query($sel);

    $query = "select *,sum(score) as tscore from {temp_scores} group by qid";
    $tscore = ExecuteQuery($query, "select");
    foreach ($tscore as $final) {

      if ($final['tscore'] != 0) {
        if (db_result(db_query("select count(*) from  {pundit_scores} where qid='" . $final['qid'] . "'  and uid='" . $list['uid'] . "'")))
          db_query("update {pundit_scores} set score='" . $final['tscore'] . "' where qid='" . $final['qid'] . "' AND uid='" . $list['uid'] . "'");
        else
          db_query("insert into {pundit_scores} set qid='" . $final['qid'] . "',uid='" . $list['uid'] . "',score='" . $final['tscore'] . "' ");
      }
    }
    user_ranks_update($list['uid']);
  }
}




// phase VI



// pundit lists


// load pundit details






// filter pundits


