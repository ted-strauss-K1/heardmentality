<?php
/**
 * Implementation of hook_perm().
 */
function question_perm() {
  return array('Question user','Question add','Question save','Question ajax','Question edit','Question delete','Admin Panel');
}


/**
 * Implementation of hook_menu().
 */
 
function question_menu() {	

$items['question'] = array(
    'title' => ' My Question',
    'page callback' => 'my_question',
    'access arguments' => array('Question user'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
$items['question/add'] = array(
    'title' => ' Add Question',
    'page callback' => 'question_add',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
$items['question/save'] = array(
    'title' => ' Save Question',
    'page callback' => 'question_save',
    'access arguments' => array('Question save'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
  $items['question/ajax'] = array(
    'title' => ' Ajax Function',
    'page callback' => 'question_ajax',
	 'access arguments' => array('Question ajax'),
     'type' => MENU_CALLBACK,
    'file' => 'question.pages.inc',
  );
 $items['question/edit'] = array(
    'title' => 'Edit Question',
    'page callback' => 'edit_question',
	 'access arguments' => array('Question edit'),
     'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
  $items['question/delete'] = array(
    'title' => 'Delete Category',
    'page callback' => 'drupal_get_form',
	'page arguments' => array('question_delete_confirm', 3),
    'access arguments' => array('Question delete'),
    'type' => MENU_CALLBACK,
    'file' => 'question.pages.inc',
  );
 
 
 $items['admin/questions'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'admin_content',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
       'file' => 'question.pages.inc',
  );
 
  $items['admin/panel'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'admin_panel_tab',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
       'file' => 'question.pages.inc',
  );
 
 
  $items['admin/panelc'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'panel_content',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
    'file' => 'question.pages.inc',
  );
 
 
  
  return $items;
}


// mysql query execution	
	function ExecuteQuery($Query, $Qrytype)
	{
		if(!empty($Query) && !empty($Qrytype))
		{
			switch(strtolower($Qrytype))
			{
				case "select":
					$Result = db_query($Query) ;
					if($Result)
					{	
						$ResultSet = array();
						while($ResultSet1 = mysql_fetch_array($Result))
							$ResultSet[] = $ResultSet1;
						return $ResultSet;
					}
					else return false;
					break;
				case "update":
					$Result = db_query($Query);
					if($Result)
					{
						$AffectedNums = mysql_affected_rows();
						return $AffectedNums;
					}
					else return false;
					break;
				case "norows":
					$Result = db_query($Query) ;
					if($Result)
					{
						$Totalrows = mysql_num_rows($Result);
						return $Totalrows;
					}
					else return false;
					break;	
					
				case "insert":
					$Result = db_query($Query) ;
					if($Result)
					{
						$LastInsertedRow = mysql_insert_id();
						return $LastInsertedRow;
					}
					else return false;
					break;
				case "delete":
					$Result = db_query($Query) ;
					if($Result)
						return true;
					else
						return false;
			}
		}
		
	}
//function to update profileabadge by post
 function updateProfileBadge($uid = null){
   global $user;
   $ques_query = "SELECT count(*) FROM {question} where uid='".$uid."'";
   $list1 = ExecuteQuery($ques_query, "select");
   $current_post_count = $list1[0][0];
   $arr = array();
   $badge_type_id =1;
	  if( $current_post_count > 40){
		   $badge_type_id =3;
	  }elseif( $current_post_count > 14){
  		   $badge_type_id = 2;
	  }elseif( $current_post_count < 14){
  		   $badge_type_id	=1;
	  }
      $query = "SELECT count(id) FROM {profile_badges} where uid='".$uid."'";
	  $list = ExecuteQuery($query, "select");
	  $profileAvailable = $list[0][0];
	  if($profileAvailable == 0){
	    $result = db_query("INSERT INTO {profile_badges} (uid,badge_type_id,post_count) values('$uid','$badge_type_id','$current_post_count') " );

	  }else{
	  $result = db_query("update {profile_badges} set badge_type_id ='$badge_type_id', post_count ='$current_post_count'  where uid='".$uid."'");
	  }
      $arr['badge_type_id'] =$badge_type_id;
      $arr['post_count'] = $current_post_count;

	  return    ( $arr);


	}
	
	
	setlocale(LC_ALL, 'en_US.UTF8');
function clean_url($str, $replace = array(), $delimiter = '-') {
    if (! empty($replace)) {
        $str = str_replace((array) $replace, ' ', $str);
    }
    
    $clean = iconv('UTF-8', 'ASCII//TRANSLIT', $str);
    $clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $clean);
    $clean = strtolower(trim($clean, '-'));
    $clean = preg_replace("/[\/_|+ -]+/", $delimiter, $clean);
    
    return $clean;
}
	
	function myTruncate($string, $limit, $break = " ", $pad = "") {
    
    // return with no change if string is shorter than $limit
    if (strlen($string) <= $limit)
        return $string;
    $string = substr($string, 0, $limit);
    if (false !== ($breakpoint = strrpos($string, $break))) {
        $string = substr($string, 0, $breakpoint);
    }
    $string = str_replace("\"", "", $string);
    return $string.$pad;
}
	
	