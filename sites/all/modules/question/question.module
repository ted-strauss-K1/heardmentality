<?php
/**
 * Implementation of hook_perm().
 */
function question_perm() {
  return array('Question user','Question add','Question save','Question ajax','Question edit','Question delete','Admin Panel','Users List','Question List','Edit Question','View Question');
}


/**
 * Implementation of hook_menu().
 */
 
function question_menu() {	

$items['question'] = array(
    'title' => ' My Question',
    'page callback' => 'my_question',
    'access arguments' => array('Question user'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
$items['question/add'] = array(
    'title' => ' Add Question',
    'page callback' => 'question_add',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
$items['question/save'] = array(
    'title' => ' Save Question',
    'page callback' => 'question_save',
    'access arguments' => array('Question save'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );

  $items['question/ajax'] = array(
    'title' => ' Ajax Function',
    'page callback' => 'question_ajax',
	 'access arguments' => array('Question ajax'),
     'type' => MENU_CALLBACK,
    'file' => 'question.pages.inc',
  );
 $items['question/edit'] = array(
    'title' => 'Edit Question',
    'page callback' => 'edit_question',
	 'access arguments' => array('Question edit'),
     'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
  $items['question/delete'] = array(
    'title' => 'Delete Category',
    'page callback' => 'drupal_get_form',
	'page arguments' => array('question_delete_confirm', 3),
    'access arguments' => array('Question delete'),
    'type' => MENU_CALLBACK,
    'file' => 'question.pages.inc',
  );
  $items['question/reply'] = array(
    'title' => ' Add Question',
    'page callback' => 'question_reply',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
 
 
 $items['admin/questions'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'admin_content',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
       'file' => 'question.pages.inc',
  );
 
  $items['admin/panel'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'admin_panel_tab',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
       'file' => 'question.pages.inc',
  );
 
 
  $items['admin/panelc'] = array(
    'title' => 'Admin Panel',
    'page callback' => 'panel_content',
	 'type' => MENU_CALLBACK,
	   'access arguments' => array('Admin Panel'),
    'file' => 'question.pages.inc',
  );
 
 $items['admin/userlist'] = array(
    'title' => 'Users List',
    'page callback' => 'moderate_user',
    'access arguments' => array('Users List'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );

  $items['admin/question/list'] = array(
    'title' => 'Question List',
    'page callback' => 'moderate_quest',
    'access arguments' => array('Question List'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
 $items['admin/notifymail'] = array(
    'title' => 'Moderate Question',
    'page callback' => 'moderate_user_mail',
    'access arguments' => array('Moderate User'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
 $items['admin/edit/questions'] = array(
    'title' => 'Edit Question',
    'page callback' => 'edit_questions',
    'access arguments' => array('Edit Question'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
  $items['admin/view/question'] = array(
    'title' => 'View Question',
    'page callback' => 'view_questions',
    'access arguments' => array('View Question'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
  
    $items['autosuggest'] = array(
    'title' => 'Add Question',
    'page callback' => 'auto_suggest_quest',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );
    
   $items['admin/dupe/questions'] = array(
    'title' => 'Dupe Question',
    'page callback' => 'dupe_question',
    'access arguments' => array('Dupe Question'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );

   $items['front_dupequestion'] = array(
    'title' => 'Dupe Question',
    'page callback' => 'front_dupe',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );

   $items['exist_question'] = array(
    'title' => 'Dupe Question',
    'page callback' => 'exist_dupe',
    'access arguments' => array('Question add'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'question.pages.inc',
  );

  return $items;
}

function question_init() {
      global $gSitePath,$user,$gDocPath,$base_root;
  drupal_add_js(drupal_get_path('module', 'question') . '/scripts/qadmin.js');

 drupal_add_js('var spath="'. $gSitePath . '";','inline');
}

//function to update profileabadge by post
 function updateProfileBadge($uid = null){
       global $gSitePath,$user,$gDocPath,$base_root;
	$badges=''; $gold='';$silver='';$bronze='';
	 $pat = $gSitePath.drupal_get_path('module', 'profile');
	$gp=guru_points('user',$uid);

	$badges.='<span title="reputation score '.$gp.'" class="reputation-score">'.$gp.'</span>';

          $query="SELECT count(*) as cnt,btype FROM user_badges as ub left join badges as b on b.bid=ub.bid where ub.uid='$uid' group by b.btype ";
        
	$btype= ExecuteQuery($query, "select");
	
	if(count($btype)>0){
		
		foreach($btype as $list){
			
			switch($list['btype'])
			{
				case 'gold':
                                    
                                    $gold .= '<li title="'.$list['cnt'].' gold badges"><img src="'.$gSitePath.'sites/all/themes/newtheme/images/pr1.jpg" />'.$list['cnt'].'</li>';
					//$gold.='<span title="'.$list['cnt'].' gold badges"><span class="badge1 gold"></span><span class="badgecount">'.$list['cnt'].'</span></span>&nbsp;';
						break;
				case 'silver':
                                     $silver .= '<li title="'.$list['cnt'].' silver badges"><img src="'.$gSitePath.'sites/all/themes/newtheme/images/pr2.jpg"  />'.$list['cnt'].'</li>';
					//$silver.='<span title="'.$list['cnt'].' silver badges"><span class="badge2 silver"></span><span class="badgecount">'.$list['cnt'].'</span></span>&nbsp;';
						break;		
				case 'bronze':
                                    $bronze .= '<li title="'.$list['cnt'].' bronze badges"><img src="'.$gSitePath.'sites/all/themes/newtheme/images/pr3.jpg" />'.$list['cnt'].'</li>';
					//$bronze.='<span title="'.$list['cnt'].' bronze badges"><span class="badge3 bronze"></span><span class="badgecount">'.$list['cnt'].'</span></span>&nbsp;';
						break;
			}			
		}

	}
	
	$badges.='<div><ul>'.$gold.$silver.$bronze.'</ul></div>';
	
	
	return $badges;
	}
	
	
	setlocale(LC_ALL, 'en_US.UTF8');
function clean_url($str, $replace = array(), $delimiter = '-',$qid='') {
    if (! empty($replace)) {
        $str = str_replace((array) $replace, ' ', $str);
    }
    
    $clean = iconv('UTF-8', 'ASCII//TRANSLIT', $str);
    $clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $clean);
    $clean = strtolower(trim($clean, '-'));
    $clean = preg_replace("/[\/_|+ -]+/", $delimiter, $clean);
    if(!empty($qid)){
    $clean='issue/'.$qid.'/'.$clean;
    }
    return $clean;
}
	
	function myTruncate($string, $limit, $break = " ", $pad = "") {
    
    // return with no change if string is shorter than $limit
    if (strlen($string) <= $limit)
        return $string;
    $string = substr($string, 0, $limit);
    if (false !== ($breakpoint = strrpos($string, $break))) {
        $string = substr($string, 0, $breakpoint);
    }
    $string = str_replace("\"", "", $string);
    return $string.$pad;
}
	
	
	function load_question($qid=''){
           
            if(!empty($qid)){

                   $query="SELECT * FROM question where qid='$qid' LIMIT 0,1";
		$result=ExecuteQuery($query, "select");
            }
            foreach($result as $final)
            {

            }
            return $final;
        }

function load_options($qid='',$poss=''){

            if(!empty($qid) && is_numeric($qid)){

                   //$query="SELECT * FROM {possible_answer} where qid='$qid'";
                $query="SELECT * FROM {poll_choices} where nid='$qid'";
		$result=ExecuteQuery($query, "select");
            }else{
                return false;
            }
       
            return $result;
        }

        


      function load_votes($qid=''){

        $final=array();

        //no of votes
          $queryd = "SELECT qid, SUM(vote) as possiblevote FROM possible_answer where qid='" . $qid . "' GROUP BY qid";
            $query_listd = db_query($queryd);
            $fetvotd = db_fetch_object($query_listd);

            $query_sugests = "SELECT qid, SUM(vote) as suggestv FROM suggest_answer where qid='" . $qid . "' GROUP BY qid";
            $query_sugestlistd = db_query($query_sugests);
            $fetvotsugestbg = db_fetch_object($query_sugestlistd);
            $final['qns'] = $fetvotd->possiblevote + $fetvotsugestbg->suggestv;


        //no of resource n forum posts
         $final['resource'] = db_result(db_query("SELECT COUNT(*) FROM resource where  qid='$qid'"));

         //count forum post
         $forum_qry = "select count(*) as forum_count from forum_wave where qid_rid='".$qid."'";
         $forum_res = db_query($forum_qry);
         $forum_rows = db_fetch_object($forum_res);
         $final['forum'] = $forum_rows->forum_count;



    $query = " SELECT (SELECT count( * ) FROM forum_wavelets AS w WHERE w.wid = f.fid GROUP BY w.wid ) AS wcnt FROM forum_wave AS f WHERE f.qid_rid = '$qid' ";
   
    $list = ExecuteQuery($query, "select");
    $x = 0;
    foreach ($list as $fcnt) {

        $x = $x + $fcnt['wcnt'];
    }
         $final['post']=$x;

      return $final;
      }


      function question_edit_save($array) {

    global $gSitePath, $user, $gDocPath, $base_root;
    $nid = substr($_GET['q'], strrpos($_GET['q'], "/") + 1);

    //  print_r($array);
    extract($array);
    $output = '';

    if (!empty($q_quest) && !empty($q_ans1) && !empty($q_ans2) && !empty($cat1)) {
        $edate = $q_edate;
        $result = db_query("update {question} set question='%s',context='%s' where qid='%d' AND uid='" . $user->uid . "'",check_plain($q_quest),check_plain($q_context),$nid);


        for ($i = 1; $i <= $ans_cnt; $i++) {
            $name = "q_ans" . $i;
            $aid = "aid" . $i;
            if (!empty($$name)) {

                if (!empty($$aid)) {
                    $result = db_query("UPDATE {possible_answer} set answer='%s' where paid='%d' AND qid='%d'",  check_plain($$name),$$aid,$nid);
                } else {

                    $result = db_query("INSERT INTO {possible_answer} (qid,answer) VALUES (%d,'%s')", $ins_id, $$name);
                }
            }
        }


        if ($result)
           $output['msg']='Thank you, Question updated successfully!';        $output['err']=false;

    } else {

        $_SESSION['post'] = $_POST;
        drupal_set_message($message = 'Sorry, Following required fields are Empty!', $type = 'error');
        $output['msg']='Sorry, Following required fields are Empty!';
        $output['err']=true;
    }

    return $output;
}

function flag_user_mail($uids = '',$days='') {

    global $gSitePath, $user, $gDocPath, $base_root;

    $from = variable_get('site_mail');
    $subject = 'Heardmentality Account Blocked';
    $msg = $_REQUEST['reporttext'];
    $msg.="<br/> <div >Account has been blocked for $days days </div>";
    foreach ($uids as $id) {
   
        $query = db_query("select mail  from {users} where uid='$id' ");
        $det = db_fetch_object($query);

        $to = $det->mail;

        if (!empty($to)) {

            $mail_suc = htmlmail($to, $subject, $msg, $from, '');
        }
    }
    return true;
}