<?php

/**
 * Storing the base url in the js variable
 */
function profiles_init() {
  global $base_url;
  drupal_add_js(array('hm_base_url' => $base_url), 'setting');
}

/**
 * Implementation of hook_perm().
 */
function profiles_perm() {
  return array('Profile Edit', 'Profile View', 'Profile Privacy', 'User Sign In', 'Update Profile');
}

/**
 * Implementation of hook_menu().
 */
function profiles_menu() {
  $items['profile'] = array(
    'title' => 'Profile',
    'page callback' => 'profile_view',
    'access arguments' => array('Profile View'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'profiles.pages.inc',
  );
  $items['profile/edit/%'] = array(
    'title' => ' Edit Profile',
    'page callback' => 'profile_edit',
    'access arguments' => array('Profile Edit'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'file' => 'profiles.pages.inc',
  );
  $items['profile/privacy_settings'] = array(
    'title' => ' Privacy Profile',
    'page callback' => 'privacy_settings',
    'access arguments' => array('Profile Privacy'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );
  $items['profile/deletefollow'] = array(
    'title' => ' Profile',
    'page callback' => 'save_follow_profile',
    'access arguments' => array('Profile View'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );
  $items['profile/savefollowerlink'] = array(
    'title' => ' Profile',
    'page callback' => 'save_follower_profile',
    'access arguments' => array('Profile View'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );
  $items['postmessage'] = array(
    'title' => ' Profile',
    'page callback' => 'save_message',
    'access arguments' => array('Profile View'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );
  $items['google/map'] = array(
    'title' => 'Facts',
    'page callback' => 'google_map',
    'access arguments' => array('Profile View'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'profiles.pages.inc',
  );
  $items['account/edit'] = array(
    'title' => 'Update Profile',
    'page callback' => 'update_profile',
    'access arguments' => array('Update Profile'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'profiles.pages.inc',
  );

  $items['profile/profile_box_session'] = array(
    'title' => ' Privacy Profile',
    'page callback' => 'profile_box_session',
    'access' => TRUE,
    'access arguments' => array('Profile View'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );

  $items['profile/follow_unfollow'] = array(
    'title' => 'Profile Follow Unfollow',
    'page callback' => 'profile_follow_unfollow',
    'access' => TRUE,
    'access arguments' => array('Profile View'),
    'type' => MENU_CALLBACK,
    'file' => 'profiles.pages.inc',
  );

  return $items;
}

function userTypes() {
  $ques_query = "SELECT * FROM {user_types}";
  $list = ExecuteQuery($ques_query, "select");
  $usertypes = array();
  $i = 0;
  foreach ($list as $options) {
    $usertypes[$i] = $options['id'];
    $usertypes[$i] = $options['name'];
    $i++;
  }
  return $usertypes;
}

function load_user($uid = '') {

  $query = "select * from {users} as u join {user_profile} as up on u.uid=up.uid  where u.uid='$uid'";
  $result = db_fetch_object(db_query($query));
  return $result;
}

function checkPrivacySettings($uid = null) {
  $ques_query = "SELECT * FROM {privacy_settings} where uid='" . $uid . "'";
  $list = ExecuteQuery($ques_query, "select");
  $userFields = array();
  $i = 0;

  $columns = db_query("SHOW COLUMNS FROM {privacy_settings}");

  while ($res = db_fetch_array($columns)) {
    $userFields[$res['Field']] = $list[$i][$res['Field']];
  }
  if (isset($userFields) && count($userFields) > 0) {
    return $userFields;
  }
}

// to check only follower or followee will see the profile
function checkFollowStatus($login_user_id = null, $profile_user_id = null) {

  $ques_query = "SELECT *  from {follower}  where uid='" . $login_user_id . "'  AND follower_status='1' AND  follower_id='" . $profile_user_id . "' UNION
	SELECT *  from {follower}  where uid='" . $profile_user_id . "'  AND follower_status='1' AND  follower_id='" . $login_user_id . "'
	";
  $list = ExecuteQuery($ques_query, "select");
  $isfollow = FALSE;
  if (isset($list) && count($list) > 0) {
    $isfollow = TRUE;
    return $isfollow;
  }
  return $isfollow;
}

// To check user points for user privacy settings
function checkUserPoints($uid = null) {
  $ques_query = "SELECT points FROM {user_profile} where  uid='" . $uid . "'";
  $list = ExecuteQuery($ques_query, "select");
  if (isset($list[0]['points'])) {
    return $list[0]['points'];
  }
  return 0;
}

function get_state($code = '') {

  global $user, $base_path;

  $query = array('postalcode' => $code, 'maxrows' => 1);
  $result = geonames_query('postalcodesearch', $query);

  print_r($result);

  return $reuslt;
}

function UserPicture($mid, $profile='') {
  global $base_url, $user, $base_root, $base_path, $theme;
  $userslist = user_load(array('uid' => $mid));
  // $selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  //$rs_image = db_query($selimage);
  //  $resultimage = db_fetch_object($rs_image);
  $selected_avatar = $resultimage->avatar;
  //$default = $base_url.'/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);
  if ($profile)
    $resultimage->image_avatar = 1;

  switch ($resultimage->image_avatar) {
    case '2':
      $image_path = file_create_path('avatar_selection');

      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_check_location($image_path . '/' . $selected_avatar)) {
        $PROFILE_IMAGE = '<img src="' . $ipath . '" alt="avatar" ALIGN=ABSMIDDLE width="54" class="uprofile"  height="54" >';
        //  $PROFILE_IMAGE = theme('image',$ipath);
      }
      else {
        $PROFILE_IMAGE = '<img src="' . $default . '" alt="photo" ALIGN=ABSMIDDLE class="uprofile" width="54"  height="54" >';
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = theme('user_picture', $userslist, '65x56');
          // $PROFILE_IMAGE = '<img src="' . $base_url.'/' . $img_path . '" class="uprofile" alt="photo" ALIGN=ABSMIDDLE width="65"  height="56" />';
        }
        else {

          $PROFILE_IMAGE = '<img src="' . $default . '" alt="photo" class="uprofile" ALIGN=ABSMIDDLE width="65"  height="56" />';
        }
      }
      elseif ($resultimage->image_url != '') {


        $PROFILE_IMAGE = '<img src="' . $resultimage->image_url . '" class="uprofile" align="absmiddle" alt="photo" width="65"  height="56" />';
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;
        $PROFILE_IMAGE = '<img src="' . $default . '" class="uprofile" align="absmiddle" alt="photo" width="65"  height="56" />';
      }
      break;
  }

  return $PROFILE_IMAGE;
}

function UserPicture_small($mid) {

  global $base_url, $user, $base_path;
  //$selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  //   $rs_image = db_query($selimage);
  $userslist = user_load(array('uid' => $mid));
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);
  // $resultimage = db_fetch_object($rs_image);
  $default = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  switch ($resultimage->image_avatar) {
    case '2':
      $image_path = file_create_path('avatar_selection');

      //  $image_path=file_directory_path().'/avatar_selection';
      $selected_avatar = $resultimage->avatar;
      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_exists($image_path . '/' . $selected_avatar)) {
        //$PROFILE_IMAGE = theme_image($ipath,'thumbnail','Avatar',array('width'=>'30px','align'=>'absmiddle','height'=>'30px'),FALSE);
        $PROFILE_IMAGE = ' <img src="' . $ipath . '" alt="photo" ALIGN=ABSMIDDLE width="30" class="uprofile"  height="30" >';
      }
      else {
        $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" height="30" class="uprofile" width="30" alt="Photo" >';
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          //$PROFILE_IMAGE=theme('user_picture', $userslist,'30x30');
          $PROFILE_IMAGE = '<img src="' . $base_url . '/' . $img_path . '" class="uprofile" alt="photo" ALIGN=ABSMIDDLE width="30"  height="30" />';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      elseif ($resultimage->image_url != '') {

        //echo $resultimage->image_url;
        if ($resultimage->image_url != '') {
          $PROFILE_IMAGE = '<img src="' . $resultimage->image_url . '" class="uprofile" align="absmiddle" height="30" width="30" alt="Profile image" >';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = '<img src="' . $img_path . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Profile image" >';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      break;
  }

  return $PROFILE_IMAGE;
}

function save_message() {
  //print_r($_REQUEST);
  global $user, $base_root, $base_path;
  $to_uid = $_REQUEST['muid'];
  $message = $_REQUEST['frmsgs'];
  $countUser = count($to_uid);

  if (!empty($message) && !empty($to_uid)) {
    /* New SET NOTIFY LOG */
    $variable = array('from_uid' => $user->uid, 'to_uid' => $to_uid, 'message' => $message);
    set_notify_log($user->uid, '', 'follow_message', $variable);
    /* New SET NOTIFY LOG */
    echo '<div class="messages success">Message sent successfully!</div>';
  }
  else if ($_REQUEST['actions'] != '' && $_REQUEST['msgs'] != '') {
    /* New SET NOTIFY LOG */
    $variable = array('from_uid' => $user->uid, 'to_uid' => array($_REQUEST['actions']), 'message' => $_REQUEST['msgs']);
    set_notify_log($user->uid, '', 'follow_message', $variable);
    /* New SET NOTIFY LOG */
    echo '<div class="messages success">Message sent successfully!</div>';
  }
  else {
    echo '<div class="messages error">Sorry Error Occurs!</div>';
  }
  exit;
}

function profiles_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('HOME FACTS & FIGURES'),
      );
      $blocks[1] = array(
        'info' => t('Profile complete percent Options'),
      );
      $blocks[2] = array(
        'info' => t('Profile complete percent Options - Bottom'),
      );
      $blocks[3] = array(
        'info' => t('Profile complete percent Options - Right'),
      );
      $blocks[4] = array(
        'info' => t('User Profile Bio'),
      );
      $blocks[5] = array(
        'info' => t('User Profile Information'),
      );
      $blocks[6] = array(
        'info' => t('You are following'),
      );
      $blocks[7] = array(
        'info' => t('Following Counts'),
      );
      $blocks[8] = array(
        'info' => t('Issues Search Count'),
      );
      return $blocks;

    case 'view':
      switch ($delta) {
        case 0:
          $block['subject'] = t("THE HERD");
          $block['content'] = home_facts_figures();
          break;
        case 1:
          $block['subject'] = t("Profile Complete Percent");
          $block['content'] = profile_complete_percent_area();
          break;
        case 2:
          $block['subject'] = t("Profile Complete Percent");
          $block['content'] = profile_complete_percent_area_bottom();
          break;
        case 3:
          $block['subject'] = t("Profile Complete Percent Alert");
          $block['content'] = profile_complete_percent_alert();
          break;
        case 4:
          $block['subject'] = t("User Profile Bio");
          $block['content'] = user_profile_bio();
          break;
        case 5:
          $block['subject'] = t("User Profile Information");
          $block['content'] = user_profile_info();
          break;
        case 6:
          $block['subject'] = t("You Are Following");
          $block['content'] = _following_list();
          break;
        case 7:
          $block['subject'] = t("Following Counts");
          $block['content'] = _following_counts();
          break;
        case 8:
          $block['subject'] = t("Issues Search Count");
          $block['content'] = hm_issues_search_count();
          break;
      }
      return $block;
  }
}

function hm_issues_search_count() {

  $count = t("<em>!search-count</em> issues ", array("!search-count" => variable_get("hm_search_results_count", "")));
  $output =
          '<div class="message right-message">
	  <p class="profile-status"><strong></strong></p>   
      <p class="profile-status">' . $count . '</p>   	  
	 </div>';
  return $output;
}

function report_theme() {

  drupal_add_js(drupal_get_path('module', 'debate') . '/scripts/debate.js');

  $form = '<div class="txt_area">
        <p>Which one of Heard Mentality’s Guidelines and Principles is this debate posting infringing?</p>
	        <ul class="creat">
                                    <li rel="Take pity on the reader – information<br/> should be presented in a non verbose manner. <br/>Pride should be taken from wording things concisely.<br/> This will ensure users can consume and retain<br/> a larger amount of information as well as making technical <br/>features like the translations and search more effective. <br/>Studies also show that more people will stop to read a shorter comment and more likely to pass over longer ones."><input type="radio" name="abuse_type" id="abuse_type" value="Concise" />Concise</li>
                                    <li rel="No profanity please. Consider all users when choosing your language. <br/>People take the posting more seriously when <br/>it refrains from using harsh and negative words.<br/> Also, abbreviations should be avoided as other users <br/>or the translation feature may not understand."><input type="radio" name="abuse_type" id="abuse_type" value="Clean" />Clean</li>
                                    <li rel="Pleased do not repeat anything that has been already posted.<br/> Any duplicate content dilutes the overall accuracy of the compiled information.<br/> Any new issue or posting added to Heard Mentality should be<br/> significantly different than existing content. Good practice would be to “agree” <br/>with the posting you may want to reiterate or <br/>voting on the issue that already exists - <br/>this will ultimately draw more attention to it."><input type="radio" name="abuse_type" id="abuse_type" value="Original" />Original</li>
                                    <li rel="This is the fundamental rule to make any social community work. <br/>Please treat others like you would like to be treated yourself <br/>and you in return will get the same."><input type="radio" name="abuse_type" id="abuse_type" value="Golden Rules" />Golden Rules</li>
                                    <li rel="Issues should be classifiable into the provided high level sections.<br/> Please do not post issues that could be considered <br/>unimportant, for example: The hairdo of a certain<br/> celebrity or which restaurant or movie is best.<br/> While these may be important questions, these are not the types of issues to be discussed here."><input type="radio" name="abuse_type" id="abuse_type" value="On Point" />On Point</li>
                                    <li rel="Never post any false information.<br/>Strive to post only what can be backed up by facts.<br/> References and links should always be provided when available."><input type="radio" name="abuse_type" id="abuse_type" value="Truthful" />Truthful</li>
                                     <li rel="Discussions within the debate are about<br/> issues and questions surrounding those issues.<br/> Postings should never be directed<br/> to other users directly, nor should they<br/> treat any other user disrespectfully.<br/> Please keep personal emotion out of discussion<br/> and consider each person’s<br/> right to their own view."><input type="radio" name="abuse_type" id="abuse_type" value="Considerate" />Considerate</li>
                                </ul>  <div class="clr"></div>

                               <p>  <input type="submit" name="button" id="submitter"  value="Submit"/></p>
</div>';
  return $form;
}


/*
 * Show figure on home page
 */
function home_facts_figures() {
  # add js
  drupal_add_js(drupal_get_path('module', 'profiles') . '/js/tab.js');
  # collect data
  $type = 'poll';
  $count_nodes = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = '%s' ", $type));
  $count_users_w_country = db_result(db_query("SELECT COUNT(u.uid) FROM users AS u JOIN user_profile AS up ON u.uid=up.uid WHERE u.status=1 AND up.country REGEXP '[^0-9]'"));
  $time_period = variable_get('user_block_seconds_online', 900);
  $count_online_users = db_result(db_query('SELECT COUNT(*) access FROM {users} WHERE access >= %d AND uid != 0 ORDER BY access DESC', time() - $time_period));
  $count_answers = db_result(db_query("SELECT COUNT(*) FROM {poll_votes} AS a JOIN {node} AS q ON q.nid = a.nid"));
  # output
  return theme('show_heat_map', $count_nodes, $count_users_w_country, $count_online_users, $count_answers);
}

function load_bubble($uid = '') {
  global $base_url, $user, $gDocPath, $base_root, $theme;

  $medal = updateProfileBadge($uid);
  $details = load_user($uid);

  $uname = $details->first_name . ' ' . $details->last_name;

  /*
   * odyachenko
   *
   * These lines refer to working with the ranks the old way
   */
  $rank = ranks_user_rank($uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$details->rank_id'"));


  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
  */
  $points = up_userpoints_get($details->uid);

  $coins = $user->total_coins != '' ? $user->total_coins : 0;
  $badges = load_badges($uid);
  $output = '<div class="debate-cor-inner">
                <div>
                <div class="debate-cor-inner-left">' . UserPicture_small($details->uid) . '</div>
                    <div class="debate-cor-inner-right">
                    <div style="padding-left:10px;text-align:left;"><strong>' . myTruncate($details->name, '10', '..') . ' </strong></div>
                        <ul style="list-style-type:none">
                      
                        <li style="width:30px">' . t($ranking) . '<br /><span class="profInfo-value" title="' . $points . ' ' . t('Points') . '">' . $points . '</span></li>
                        <li><img width="10" height="10" alt="Gold" title="' . $badges['gold'] . ' Golds" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gold.jpg" /><br><span>' . $badges['gold'] . '</span></li>
                        <li><img width="10" height="10" alt="Silver" title="' . $badges['silver'] . ' Silvers" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-silver.jpg" /><br /><span>' . $badges['silver'] . '</span></li>
                        <li><img width="10" height="10" alt="Gray" title="' . $badges['bronze'] . ' Bronzes" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gray.jpg" /><br /><span>' . $badges['bronze'] . '</span></li>
                        </ul>
                    </div>
                 </div>
                 <div class="clr"></div>
                </div>
                ';


  return $output;
}

function load_user_badge($uid='', $search='') {

  global $base_url, $user, $theme;

  $medal = updateProfileBadge($uid);
  $details = load_user($uid);

  $uname = $details->first_name . ' ' . $details->last_name;

  /*
   * odyachenko
   *
   * These lines refer to working with the ranks the old way
   */
  $rank = ranks_user_rank($uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$details->rank_id'"));

  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
   */
   $points = up_userpoints_get($details->uid);
  $coins = $user->total_coins != '' ? $user->total_coins : 0;
  $badges = load_badges($uid);
  if ($search)
    $link = '<a  onclick="get_profile_details(' . $details->uid . ',this);" style="cursor:pointer" > ' . myTruncate($details->name, '10', '..') . '</a>';
  else
    $link = '<a href="' . $base_url . '/profile/' . $details->name . '">' . myTruncate($details->name, '10', '..') . '</a>';

  $output = '<div class="profInfo">

                <div class="profInfo-img">' . UserPicture($details->uid) . '</div>
                    <div class="profInfo-txt">
                    <span class="profInfo-value" title="' . $points . ' Points">' . $points . '</span>
                        <div class="profInfo-name">' . $link . '</div>
                            <div class="profInfo-name2">' . $ranking . '</div>
                        <ul >
                        <li><img width="10" height="10" alt="Gold" title="' . $badges['gold'] . ' Golds" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gold.jpg" /><span>' . $badges['gold'] . '</span></li>
                        <li><img width="10" height="10" alt="Silver" title="' . $badges['silver'] . ' Silvers" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-silver.jpg" /><span>' . $badges['silver'] . '</span></li>
                        <li><img width="10" height="10" alt="Gray" title="' . $badges['bronze'] . ' Bronzes" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gray.jpg" /><span>' . $badges['bronze'] . '</span></li>
                        </ul>
                    </div>
                 </div>
                           ';


  return $output;
}



function load_badges($uid = '') {
  $sql = "SELECT bid FROM {user_badges} WHERE uid = '" . $uid . "'";
  $badgeids = ExecuteQuery($sql, 'select');
  $bcnt = 0;
  $scnt = 0;
  $gcnt = 0;
  foreach ($badgeids as $badgeid) {
    $bid = $badgeid['bid'];
    $btype = db_result(db_query("SELECT btype FROM {badges} WHERE bid = '$bid'"));
    if ($btype == 'bronze') {
      $bcnt++;
    }
    if ($btype == 'silver') {
      $scnt++;
    }
    if ($btype == 'gold') {
      $gcnt++;
    }
  }
  $badges = array("bronze" => $bcnt, "silver" => $scnt, "gold" => $gcnt);
  return $badges;
}

function profile_cron() {

  // weekly coin update for all users
  $sql = db_query("SELECT p.uid,p.daily_todays_date as lost_login, u.rank_id FROM user_profile p JOIN users u ON p.uid = u.uid  WHERE DATE_SUB(NOW(), INTERVAL 1 WEEK) <= p.daily_todays_date");
  while ($result = db_fetch_object($sql)) {
    $uid = $result->uid;
    if ($uid) {
      $rank_id = $result->rank_id;
      if ($rank_id == '1') {
        $coins = 5;
      }
      if ($rank_id == '2') {
        $coins = 10;
      }
      if ($rank_id == '3') {
        $coins = 15;
      }
      if ($rank_id == '4') {
        $coins = 20;
      }
      $user = load_user($uid);
      db_query("INSERT INTO {user_coins} (coin_key, coin_type, coin_count) VALUES('%s','%s','%d')", 'rank', 'earn', $coins);
      $total_coins = $coins + $user->total_coins;
      db_query("UPDATE {users} SET total_coins = '%d' WHERE uid = '$uid'", $total_coins);
    }
  }
}

function profiles_user($op, $edit, &$account, $category = NULL) {
  // print_r($op);
  module_load_include('inc', 'profiles', 'profiles.pages');
  switch ($op) {

    case 'insert':


      // create empty field in user_profile table on sign up user

      $uid = $account->uid;
      $chk = db_query("select * from {user_profile} where uid='$uid'");
      $chk_result = db_result($chk);
      if (!$chk_result) {
        $query = "INSERT INTO {user_profile} SET uid='%d'";
        db_query($query, $uid);
      }

      //home page
      $_REQUEST['destination'] = 'qlite/view';

      break;
    case 'categories':

      break;

    case 'view':

      //unset($account->content);
      // echo '<pre>';print_r($account);
      break;
  }
}

function profiles_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {


  if ($op == 'load' && $node->type == 'profile') {
    //  echo "<pre>";
//print_r($node);
  }
}

function profiles_form_alter(&$form, $form_state, $form_id) {
  // Check for a particular content type's node form.
  //echo $form_id;
  if ($form_id == 'profile_node_form') {
    // Add an after_build function to process when everything's complete.
    drupal_set_title(t('Editing your Profile in 3 steps!'));

    leghist_cck_alter($form);
  }
  if ($form_id == 'user_details') {
    $output = '';
    foreach (element_children($form) as $child) {
      if ($form[$child]['#type'] == 'radios') {
        //  print_r($form[$child]['#options']);
        foreach (element_children($form[$child]) as $sub) {
          $form[$sub]['#options']['#attributes'] = array('class' => 'form-wra-4');
        }
      }
    }
  }
}

/**
 * Adds Element to $form
 */
function leghist_cck_alter(&$form) {

  foreach (element_children($form) as $child) {

    if ($form[$child]['#type'] == 'textfield' && $form[$child]['#title'] == 'Title') {

      $form[$child]['#title'] = t('Bio');
    }
  }
}

// Edit Profile
function profile_edit($step='') {

  global $base_url, $user, $gDocPath, $base_root, $apikey, $theme;
  drupal_add_js(drupal_get_path('module', 'profiles') . '/js/profile.js');


  switch ($step) {
    case '2':
      $form.='  <div id="pro-nav">
      <ul>
        <li ><b>1</b>Profile</li>
        <li class="arr">&nbsp;</li>
        <li class="selected"><b>2</b>Privacy</li>
        <li class="arr">&nbsp;</li>
        <li><b>3</b>Social</li>
        <li class="arr">&nbsp;</li>
        <li>Finished</li>
      </ul>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div>
  <div class="pro-content">
    <div class="pro-content-left">
       <h2>Customize what personal information
can be seen by whom</h2><br />

      <div class="step-2-item"><div class="step-2-item-img1"></div><h2>Anyone<br />

<b>Anyone in the world</b></h2>
<div class="clr"></div>


</div>

<div class="step-2-item"><div class="step-2-item-img2"></div><h2>Heard Mentality User<br />

<b>Anyone logged into Heard
Mentality</b></h2>
<div class="clr"></div>


</div>


<div class="step-2-item"><div class="step-2-item-img3"></div><h2>Subscribers<br />
<b>
Anyone who I am subscribing
to or who is subscribing to me</b></h2>
<div class="clr"></div>


</div>

<div class="step-2-item"><div class="step-2-item-img4"></div><h2>No one<br />

<b>No one can ever see this.</b></h2>
<div class="clr"></div>


</div>
</div>
    <div class="pro-content-right">
      <div class="form-outer">
    ';
      $form .= drupal_get_form('profiles_form', $step);
      $form.='
    <div class="clr"></div>
  </div>';
      break;
    case '3':
      $form.='  <div id="pro-nav">
      <ul>
        <li ><b>1</b>Profile</li>
        <li class="arr">&nbsp;</li>
        <li><b>2</b>Privacy</li>
        <li class="arr">&nbsp;</li>
        <li class="selected"><b>3</b>Social</li>
        <li class="arr">&nbsp;</li>
        <li>Finished</li>
      </ul>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div>
  <div class="pro-content">
    <div class="pro-content-left">

      <div class="step-3-item-outer">
      <div class="step-3-item-left"><h2>Avatar<br />

<b>Pick the image you want to represent your profile.</b></h2></div>

<div class="step-3-item-right"></div>
<div class="clr"></div>


</div><br /><br /><br />




<div class="step-3-item-outer">
      <div class="step-3-item-left"><h2>Email Subscriptions<br />

<b>Set the frequency you want subscription activity notifications delivered to your email</b></h2></div>

<div class="step-3-item-right"></div>
<div class="clr"></div>


</div>


<div class="step-3-item-outer">
      <div class="step-3-item-left"><h2>Account Linking<br />

<b>Link all your social networks to your Heard Mentality Profile making it easier to share across your entire network</b></h2></div>

<div class="step-3-item-right"></div>
<div class="clr"></div>


</div>

<div class="step-3-item-outer">
      <div class="step-3-item-left"><h2>Personal Links<br />

<b>Where can other users find more information about you.</b></h2></div>

<div class="step-3-item-right"></div>
<div class="clr"></div>


</div> </div>
    <div class="pro-content-right">
      <div class="form-outer">
    ';
      $form .= drupal_get_form('profiles_form', $step);

      break;
    case '4':
      $form.='  <div id="pro-nav">
      <ul>
        <li ><b>1</b>Profile</li>
        <li class="arr">&nbsp;</li>
        <li><b>2</b>Privacy</li>
        <li class="arr">&nbsp;</li>
        <li><b>3</b>Social</li>
        <li class="arr">&nbsp;</li>
        <li class="selected">Finished</li>
      </ul>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div>
  <div class="pro-content">
  <div class="stick">&nbsp;</div>
  <div class="thanku-outer"> <div class="thanku">Thank You !</div><br />


    <div class="pro-text"><p>You can edit your profile and change any of the information and privacy settings at anytime.</p><br />



    <p>We hope you enjoy using Heard Mentality</p><br />


<p class="thanku2"><strong>Be Heard !<br />
Don’t be part of the Herd</strong></p>



    </div>

    <div class="clr"></div>
    </div>
    <div class="clr"></div>

    <div align="center"><br />

    <p class="pro-text2">To learn more about Heard Mentality see this short tour of the features available to youTake</p><br />
<p><a href="#"><img src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/site-tour.png" width="264" height="45" alt="Take the site tour" /></a></p>

    </div>

    <div class="clr"></div>
  </div>
  <div class="clr"></div>
  <div id="pro-footer">
    <div class=" pro-prenext">
      <div class="previous">
        <input name="" type="button" onclick="history.go(-1);" class="previous-select" />
      </div>
      <div class="finished">
        <input name="" type="button" class="finished" onclick="fb.end();" />
      </div>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>';
      break;
    default:
      $form.='  <div id="pro-nav">
      <ul>
        <li class="selected"><b>1</b>Profile</li>
        <li class="arr">&nbsp;</li>
        <li><b>2</b>Privacy</li>
        <li class="arr">&nbsp;</li>
        <li><b>3</b>Social</li>
        <li class="arr">&nbsp;</li>
        <li>Finished</li>
      </ul>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div>
  <div class="pro-content">
    <div class="pro-content-left">
      <h2>&nbsp;Welcome to Heard Mentality -
 <b> The
        global community for public opinion.</b></h2>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing
        elit. Donec aliquam, nulla convallis ultrices varius,
        mauris neque consectetur odio, in dictum turpis
        nunc sed felis.<br />
        <br />
        Cum sociis natoque penatibus et
        magnis dis parturient montes, nascetur ridiculus
        mus. Nullam et turpis in mauris porta varius a in
        purus. Ut sem justo, commodo sed placerat
        tempor, euismod in lorem. Fusce non sodales nisi.
        Praesent sagittis imperdiet sollicitudin. Aenean
        suscipit ornare libero et tempus. <br />
        <br />
        Nullam gravida
        ligula accumsan ante rutrum at eleifend elit
        bibendum. Suspendisse lobortis sollicitudin ultrices.
        Sed tincidunt convallis</p>
      <p><img src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/map-step1.jpg" width="369" height="184" alt="Map" /></p>
    </div>
    <div class="pro-content-right">
      <div class="form-outer">
    ';
      $form .= drupal_get_form('profiles_form', $step);
      $form.='
    <div class="clr"></div>
  </div>';
      break;
  }
  return $form;
}

function profiles_form($form_state, $step) {
  global $base_url, $user, $apikey, $theme;
  $data = '

var spath=\'' . $base_url . '/\';
';
  drupal_add_js($data, 'inline');
  switch ($step) {
    case '2':
      $query = "select * from {user_profile} where uid='$user->uid'";
      $fetch = ExecuteQuery($query, "select");
      $options = array('1' => t(''), '2' => t(''), '3' => t(''), '4' => t(''));
      $query = "select * from {profile_fields}";
      $result = db_query($query);
      $complete_data = pcp_get_complete_percentage_data($user);
      $pcp = $complete_data['percent'];
      if ($pcp == 100)
        $prompt = 0;
      else
        $prompt = 1;

      $form['top_div'] = array('#type' => 'markup', '#value' => '<div class="form-bg-none">
          <div class="pro-radio-outer"><script>parent.prompt=\'' . $prompt . '\';</script>
        	<div class="t1">&nbsp;</div>
            <div class="t2 step-2icon-1"></div>
            <div class="t3 step-2icon-2"></div>
            <div class="t4 step-2icon-3"></div>
            <div class="t4 step-2icon-4"></div>
            <div class="clr"></div>
        </div>
          <div class="clr"></div>
        </div>');
      while ($meta = db_fetch_object($result)) {
        $col = $fields[] = $meta->name;
        $list = trim($fetch[0][$col]);
        switch ($col) {
          case 'bio':
            $list = 'My Bio';
            break;
          case 'income':
            $list = 'Income Range';
            break;
          case 'marital':
            $list = 'Marital Status';
            break;
          case 'dob':
            $dob1 = $fetch[0]['age'];
            if ($dob1 == 0) {
              $dob1 = "-";
              $list = '';
            }
            else {
              $rem_value = $dob1 % 5;
              $rem_first = $dob1 - $rem_value;
              $rem_second = $rem_first + 5;
              $list = $rem_first . ' - ' . $rem_second . ' Years Old';
            }
            break;
          case 'zip':
            $list = $fetch[0]['city'] . ',' . $fetch[0]['state'] . ',' . $fetch[0]['country'];
            break;
          case 'gender':
            if ($list == 1)
              $list = 'Male';
            elseif ($list == 2)
              $list = 'Female';
            break;
          case 'edu':
            if (empty($list))
              $list = $meta->title;

            break;
        }

        if (!empty($list)) {
          $sel = db_result(db_query("SELECT $col FROM {privacy_settings} WHERE uid = '%d'", $user->uid));
          $form[$col . '_privacy'] = array(
            '#type' => 'radios',
            '#title' => t($list),
            '#default_value' => variable_get($col . '_privacy', $sel),
            '#options' => $options,
            '#prefix' => '<div class="form-bg"><div class="pro-radio-outer">',
            '#suffix' => ' <div class="clr"></div></div><div class="clr"></div> </div>',
          );
          $form['div_down'] = array('#type' => 'markup', '#value' => '
          <div class="clr"></div>
       ');
        }
      }
      $form['activity_privacy'] = array(
        '#type' => 'radios',
        '#title' => t('My User Activity'),
        '#default_value' => variable_get('activity_privacy', $fetch[0]['question_privacy']),
        '#options' => $options,
        '#prefix' => '<div class="form-bg"><div class="pro-radio-outer">',
        '#suffix' => ' <div class="clr"></div></div><div class="clr"></div> </div>',
      );
      $form['mid_div'] = array('#type' => 'markup', '#value' => '
          <div class="clr"></div>
       ');
      $form['bot_div'] = array('#type' => 'markup', '#value' => '<div class=" clr"></div>
      </div>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div><div id="pro-footer">
    <div class=" pro-prenext">');
      $form['previous'] = array('#type' => 'submit',
        '#value' => t('Back'),
        '#attributes' => array('class' => 'previous'),
        '#prefix' => ' <div class="previous">',
        '#suffix' => '</div>',
      );
      $form['step'] = array('#type' => 'value', '#value' => '2', '#suffix' => '  <div class="clr"></div>');
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t(''),
        '#attributes' => array('class' => 'next'),
        '#prefix' => ' <div class="next">',
        '#suffix' => '</div>'
      );
      $form['foot_div'] = array('#type' => 'markup', '#value' => ' <div class="clr"></div>
    </div>  <div class="clr"></div>');
      break;
    case '3':
      $form = array();
      drupal_add_js(drupal_get_path('module', 'avatar_selection') . '/js/avatar_selection.js');
      drupal_add_js(drupal_get_path('module', 'avatar_selection') . '/js/avatar_selection_pager.js');
      drupal_add_css(drupal_get_path('module', 'avatar_selection') . '/avatar_selection.css');
      drupal_add_js(drupal_get_path('module', 'avatar_selection') . '/js/avatar_selection_pager.js');
      //  drupal_set_html_head('<script src="http://cdn.gigya.com/JS/socialize.js?apikey=' . $apikey . '" type="text/javascript"></script>');
      drupal_get_path('module', 'avatar_selection') . '/js/avatar_selection.js';
      $account = load_user($user->uid);

      $data = '
	    var conf =
        {
            APIKey: \'' . $apikey . '\'
        };
var avtar=\'' . $account->avatar . '\';
';
      drupal_add_js($data, 'inline');

      // set the form encoding type
      $form['#attributes']['enctype'] = "multipart/form-data";
      $options = array('1' => t('weekly'), '2' => t('monthly'), '0' => t('never'));
      // add a file upload file
      $form['file_upload'] = array(
        '#type' => 'file',
        '#size' => '10',
        '#description' => t('Select an image file on your computer. (2MB max) '),
        '#prefix' => '<div class="avatar">
            <div class="avatar-right">
            <div class="pick-avatar" onClick="jQuery(\'#avatar-profile-ele\').slideToggle();"></div>
- Or -
            <div class="clr"></div>
            <div></div>
            <div class="clr"></div>',
        '#suffix' => '</div>
        	<div class="avatar-left">' . UserPicture($user->uid, 0) . '</div>

        <div class="clr"></div>
        </div>'
      );
      $form['oldimg'] = array(
        '#type' => 'hidden',
        '#default_value' => variable_get('oldimg', $account->image),
        '#id' => 'oldimg',
      );
      $form['notify'] = array(
        '#type' => 'radios',
        '#prefix' => '',
        '#default_value' => variable_get('notify', $account->notify_etype),
        '#options' => $options,
        '#suffix' => ' <div class="clr"></div>',
        '#title' => t('Send me a summary of my subscriptions to my email'),);
      $form['merge'] = array('#type' => 'markup', '#value' => '<div class="merge-social-new">
          <div align="center">Select the Social networks you want to share you Heard Mentality opinions add posts with.</div>
          <div class="clr"></div>
          <div id="divConnect"></div>
    <script type="text/javascript">
        // show Add Connections Plugin in "divConnect"
        gigya.services.socialize.showAddConnectionsUI(conf, {
			height:65
			,width:175
			,showTermsLink:false //remove trems link
			,hideGigyaLink:true // remove Gigya link
			,useHTML:true  // Use the HTML implementation of the Plugin (rather then Flash implementation)
			,containerID: "divConnect" // The component will embed itself inside the divConnect Div
		});
    </script> 
         </div>
          
    </div>');
      $form['fb_outer'] = array('#type' => 'markup',
        '#value' => '<div class="form-bg-face-outer"><b>PERSONAL LINKS</b>
          <div class="clr"></div>
        </div><div class="form-bg-face-outer">
    ');

      $social = explode('||', $account->social);
      $form['facebook'] = array(
        '#type' => 'textfield',
        '#title' => t(''),
        '#prefix' => '<div class="form-bg-face-img"><img width="26" height="27" alt="facebook" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/soc-face.jpg"></div><div class="form-bg-face">',
        '#description' => t(''),
        '#default_value' => variable_get('facebook', $social[0]),
        '#id' => 'face',
        '#suffix' => '</div>',
      );
      $form['fb_top'] = array('#type' => 'markup',
        '#value' => '<div class="clr"></div></div> <div class="clr"></div><div class="form-bg-face-outer"> ');
      $form['twitter'] = array(
        '#type' => 'textfield',
        '#title' => t(''),
        '#prefix' => '<div class="form-bg-face-img"><img width="26" height="27" alt="facebook" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/soc-twit.jpg"></div><div class="form-bg-face">',
        '#description' => t(' '),
        '#default_value' => variable_get('twitter', $social[1]),
        '#id' => 'twitter',
        '#suffix' => '</div>',
      );
      $form['fb_bot'] = array('#type' => 'markup',
        '#value' => '<div class="clr"></div></div> <div class="clr"></div>');
      $form['myweb'] = array(
        '#type' => 'textfield',
        '#title' => t(''),
        '#description' => t(''),
        '#default_value' => variable_get('myweb', $account->urls),
        '#id' => 'username',
        '#prefix' => '<div class="form-bg"><div class="pro-radio-outer">',
        '#suffix' => ' <div class="clr"></div></div><div class="clr"></div> </div>',
      );
      $form = $form + follow_links_form($form_state, $user->uid);
      $form['bot_div'] = array('#type' => 'markup', '#value' => '<div class=" clr"></div>
      </div>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div><div id="pro-footer">
    <div class=" pro-prenext">');

      $form['previous'] = array('#type' => 'submit',
        '#value' => t('Back'),
        '#attributes' => array('class' => 'previous'),
        '#prefix' => ' <div class="previous">',
        '#suffix' => '</div>',
      );
      $form['img_avt'] = array('#type' => 'hidden', '#default_value' => variable_get('img_avt', $account->image_avatar));
      $form['image'] = array('#type' => 'hidden', '#default_value' => variable_get('image', $account->image));
      $form['step'] = array('#type' => 'value', '#value' => '3', '#suffix' => '  <div class="clr"></div>');
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t(''),
        '#attributes' => array('class' => 'next'),
        '#prefix' => ' <div class="next">',
        '#suffix' => '</div>'
      );

      $form['foot_div'] = array('#type' => 'markup', '#value' => ' <div class="clr"></div>
    </div>  <div class="clr"></div><div class="clr"></div>
  </div>');
      $form['hiddentop'] = array('#type' => 'markup', '#value' => '<div id="avatar-profile-ele" class="d-header" style="display:none;background-color:white;width:350px;position:absolute;top:200px;left:350px;"><a href="javascript:void(0)" onclick="jQuery(\'#avatar-profile-ele\').slideToggle();update_avatar();" style="float:right">close[X]</a>');
      $form = $form + inc_avatar_form();
      $form['hiddenbot'] = array('#type' => 'markup', '#value' => '</div>');
      break;
    case '4':
      break;
    case '1':
    default:
      drupal_add_js('jQuery(function(){ jQuery("label").inFieldLabels(); });', 'inline');
      drupal_add_js(drupal_get_path('module', 'profiles') . '/js/jquery.infieldlabel.min.js');
      drupal_set_html_head('<style>label  { position:absolute; top:0; left:0;margin:5px 6px 5px 19px;color:grey;opacity:0.8;}</style>');

      //set default values
      $details = load_user($user->uid);
      $form['username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#maxlength' => 20,
        '#description' => t(''),
        '#default_value' => variable_get('username', ''),
        '#id' => 'username',
        '#required' => 1,
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['fname'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#maxlength' => 20,
        '#description' => t(' '),
        '#default_value' => variable_get('fname', ''),
        '#id' => 'name',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#maxlength' => 50,
        '#description' => t(' '),
        '#default_value' => variable_get('email', ''),
        '#id' => 'email',
        '#required' => 1,
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['dob'] = array(
        '#type' => 'textfield',
        '#title' => t('Year Of Birth'),
        '#maxlength' => 4,
        '#description' => t(' '),
        '#default_value' => variable_get('dob', ''),
        '#id' => 'year',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );

      $form['gender'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Gender', 1 => 'Male', 2 => 'Female'),
        '#description' => t(' '),
        '#default_value' => variable_get('gender', ''),
        '#id' => 'gender',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['zip'] = array(
        '#type' => 'textfield',
        '#title' => t('Zip Code'),
        '#maxlength' => 10,
        '#description' => t(''),
        '#default_value' => variable_get('zip', ''),
        '#id' => 'location',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>',
        '#attributes' => array('onblur' => 'get_zip_city(this.value);')
      );
      $form['country'] = array(
        '#type' => 'hidden',
        '#default_value' => variable_get('country', $details->country),
        '#id' => 'country',
      );
      $form['state'] = array(
        '#type' => 'hidden',
        '#default_value' => variable_get('state', $details->state),
        '#id' => 'state',
      );
      $form['city'] = array(
        '#type' => 'hidden',
        '#default_value' => variable_get('city', $details->state),
        '#id' => 'city',
      );

      $form['religion'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Religion', 'Christian' => 'Christian (Cath or Prod)', 'Muslim' => 'Muslim (Suni Shiite)', 'Hindu' => 'Hindu', 'Jewish' => 'Jewish', 'Buddhist' => 'Buddhist', 'Other' => 'Other'),
        '#description' => t(' '),
        '#default_value' => variable_get('religion', ''),
        '#id' => 'religion',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['ethnic'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Ethnicity', 'Caucasian' => 'Caucasian', 'Black' => 'Black', 'Asian' => 'Asian', 'Indian' => 'Indian', 'Semetic' => 'Semetic', 'Latin' => 'Latin', 'Aborigines' => 'Aborigines'),
        '#description' => t(' '),
        '#default_value' => variable_get('ethinicity', ''),
        '#id' => 'ethnicity',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['education'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Education Level', 'No High School' => 'No High School', 'High School' => 'High School', 'Technical College' => 'Technical College', 'University' => 'University', 'Masters Degree' => 'Masters Degree'),
        '#description' => t(' '),
        '#default_value' => variable_get('education', ''),
        '#id' => 'education',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['sorient'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Sexual Orientation', 'Straight' => 'Straight', 'Gay' => 'Gay', 'Bisexual' => 'Bisexual', 'Transgender' => 'Transgender'),
        '#default_value' => variable_get('sorient', ''),
        '#description' => t(' '),
        '#id' => 'sex',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['income'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Income Range [USD]', '$0-$9,999' => '$0-$9,999', '$10,000 - $19,999' => '$10,000 - $19,999', '$20,000 - $39,999' => '$20,000 - $39,999', '$40,000 - $69,999' => '$40,000 - $69,999', '$70,000 - $99,999' => '$70,000 - $99,999', '$100,000 - $149,999' => '$100,000 - $149,999', '$150,000 - $299,999' => '$150,000 - $299,999', '>$300,000' => '>$300,000'),
        '#description' => t(''),
        '#default_value' => variable_get('income', ''),
        '#id' => 'income',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['marital'] = array(
        '#type' => 'select',
        '#title' => t(''),
        '#options' => array('0' => 'Marital Status', 'Single' => 'Single', 'Married' => 'Married', 'Divorced' => 'Divorced', 'Widow' => 'Widow'),
        '#description' => t(' '),
        '#default_value' => variable_get('marital', ''),
        '#id' => 'marital',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['bio'] = array(
        '#type' => 'textarea',
        '#title' => t('Bio'),
        '#default_value' => variable_get('description', ''),
        '#cols' => '',
        '#rows' => 3,
        '#description' => t(''),
        '#default_value' => variable_get('bio', ''),
        '#id' => 'bio',
        '#prefix' => ' <div class="form-bg">',
        '#suffix' => '</div>'
      );
      $form['top_div'] = array('#type' => 'markup', '#value' => '<div class=" clr"></div>
      </div>
      <div class="clr"></div>
    </div>
    <div class="clr"></div>
  </div>
  <div class="clr"></div>');
      $form['step'] = array('#type' => 'value', '#value' => '1', '#suffix' => '  <div class="clr"></div>');
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t(''),
        '#attributes' => array('class' => 'next'),
        '#prefix' => '<div id="pro-footer">
    <div class=" pro-prenext"> <div class="next">',
        '#suffix' => '</div>
      <div class="clr"></div>
    </div>  <div class="clr"></div>'
      );

      $form['bio']['#default_value'] = empty($details->bio) ? '' : $details->bio;

      $form['sorient']['#default_value'] = empty($details->sorient) ? '0' : $details->sorient;
      $form['income']['#default_value'] = empty($details->income) ? '0' : $details->income;
      $form['marital']['#default_value'] = empty($details->marital) ? '0' : $details->marital;
      $form['education']['#default_value'] = empty($details->edu) ? '0' : $details->edu;
      $form['ethnic']['#default_value'] = empty($details->ethnic) ? '0' : $details->ethnic;
      $form['religion']['#default_value'] = empty($details->religion) ? '0' : $details->religion;
      $form['zip']['#default_value'] = empty($details->zip) ? '' : $details->zip;
      $form['gender']['#default_value'] = empty($details->gender) ? '0' : $details->gender;
      $form['dob']['#default_value'] = empty($details->dob) ? '' : $details->dob;
      $form['email']['#default_value'] = empty($details->mail) ? '' : $details->mail;
      $form['fname']['#default_value'] = empty($details->real_name) ? '' : $details->real_name;
      $form['username']['#default_value'] = empty($details->name) ? '' : $details->name;
      break;
  }
  return $form;
}

function profiles_form_validate($form, &$form_state) {
  global $base_url, $user, $gDocPath, $base_root, $apikey;
  $step = $form_state['values']['step'];
  switch ($step) {
    case '2':

      break;
    case '3':
      // follow links starts here
      // echo '<pre>';
      // print_r($form_state);
      $links = $form_state['values']['follow_links'];
      //  print_r($links);die;
      foreach ($links as $name => $link) {
        $link = (object) $link;
        $link->url = trim($link->url);

        // Check to see if there's actually a link
        if (!preg_match("/^[a-zA-Z]+[:\/\/]+[A-Za-z0-9\-_]+\\.+[A-Za-z0-9\.\/%&=\?\-_]+$/i", $link->url)) {
          // If there's an lid, delete the link.
          if (isset($link->lid)) {
            follow_link_delete($link->lid);
          }
          if (!empty($link->url))
            form_set_error($ink->name, 'Invalid web reference URL(s)');
          // Continue to the next link.
          continue;
        }
      }  // follow links ends here


      break;
    case '4':
      if ($form_state['values']['op'])
        $form_state['redirect'] = "profile/edit/3";
      break;
    case '1':
      $dob = $form_state['values']['dob'];
      $zip = $form_state['values']['zip'];
      $state = $form_state['values']['state'];
      $uname = $form_state['values']['username'];
      $email = $form_state['values']['email'];
      $fname = $form_state['values']['fname'];
      $valid_email = $form_state['values']['email'];
      if (!preg_match('/^[A-Za-z0-9_]{5,20}$/i', $uname)) {
        form_set_error('username', t('Username should be Alphabets, numbers and no special characters min 5 and max 20 allowed'));
        $form_state['rebuild'] = TRUE;
      }
      elseif (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE name = '%s' AND uid!='%d'", $uname, $user->uid))) {
        form_set_error('username', t('Sorry Username already exists try any other combination'));
        $form_state['rebuild'] = TRUE;
      }

      if (!valid_email_address($valid_email)) {
        form_set_error('email', 'Your email address -- ' . $valid_email . ' -- appears malformed');
      }
      elseif (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE mail = '%s' AND uid!='%d'", $valid_email, $user->uid))) {
        form_set_error('username', t('Sorry Email already taken by other user'));
        $form_state['rebuild'] = TRUE;
      }
      if (!empty($fname)) {
        if (!preg_match('/^([a-zA-Z]+ ){1,2}[a-zA-Z]+$/i', $fname)) {
          form_set_error('fname', t('Full Name should be Alpha Ex : Kevin kumar'));
          $form_state['rebuild'] = TRUE;
        }
      }
      if (!empty($dob)) {

        if (!is_numeric($dob) || strlen($dob) != '4') {
          form_set_error('dob', t('Year Of Birth should be Numeric & Proper Format Ex : 1986'));
          $form_state['rebuild'] = TRUE;
        }
      }
      if (!empty($zip)) {
        if (!preg_match('/^[0-9A-Za-z ]+?$/i', $zip)) {
          form_set_error('zip', t('Zip Code should be Proper One & Proper Format Ex : 11010'));
          $form_state['rebuild'] = TRUE;
        }
        elseif (empty($state)) {
          form_set_error('zip', t('Kindly Recheck your Zip Code, We find its invalid one! '));
          $form_state['rebuild'] = TRUE;
        }
      }

    default:
      break;
  }
}

function profiles_form_submit($form, &$form_state) {
  global $base_url, $user, $gDocPath, $base_root, $apikey;
  $step = $form_state['values']['step'];

  switch ($step) {
    case '2':
      if ($form_state['clicked_button']['#value'] == 'Back') {
        $form_state['redirect'] = "profile/edit/1";
      }
      else {
        _privacy_submit($form, $form_state);
        $form_state['redirect'] = "profile/edit/3";
      }
      break;
    case '3':
      if ($form_state['clicked_button']['#value'] == 'Back') {
        $form_state['redirect'] = "profile/edit/2";
      }
      else {
        _avatar_submit($form, $form_state);
        $form_state['redirect'] = "profile/edit/4";
      }
      break;
    case '4':



      break;
    case '1':
    default:

      _basic_submit($form, $form_state);
      //  drupal_goto('profile/edit/2');
      $form_state['redirect'] = "profile/edit/2";
      break;
  }
}

function inc_avatar_form($form, &$form_state) {


  global $user, $_GET, $theme;
  //avatar
  $form = array();
  // We find out the current page number.
  $page = 0;
  if (isset($_GET['page']) && is_numeric($_GET['page'])) {
    $page = $_GET['page'];
  }
  $anon_user = drupal_anonymous_user();
  $force_choose = variable_get('avatar_selection_force_user_avatar_reg', 0);
  $avatars_per_page = variable_get('avatar_selection_avatar_per_page', 30);
  $selects = _avatar_selection_image_list($anon_user, "", 0, $page * $avatars_per_page, $avatars_per_page);

  $udetails = load_user($user->uid);

  $avatar = (!empty($udetails->avatar)) ? $udetails->avatar : '';

  if (count($selects['avatars'])) {

    $form['picture']['select_avatar'] = array(
      '#type' => 'radios',
      '#title' => ($upload == 0 ? t('Select an avatar') : t('Or simply select an icon')),
      '#description' => $upload ? '' : t(''),
      '#options' => $selects['avatars'],
      '#required' => $force_choose ? TRUE : FALSE,
      '#default_value' => $avatar,
      '#attributes' => array('class' => 'user-avatar-select'),
      '#prefix' => '<div id="avatar-selection-loading"></div>',
      '#suffix' => theme('avatar_selection_pager', 'form#user-register', 'div.user-avatar-select', $selects['total'], $avatars_per_page, '/' . $js_file),
    );
  }


  //avatar
  return $form;
}

function event_photo_profile(&$form, &$form_state) {
  global $user;
  $suc = '';
  $return = array();

  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array('500x500'),
    'file_validate_size' => array(500 * 1024),
  );
  $upload_dir = variable_get('user_picture_path', 'pictures');
  $filepath = file_directory_path();
  $dest = $filepath . '/' . $upload_dir;
  $file = file_save_upload('file_upload', $validators, $dest);

  $owner = $user->uid;
  $filetype = $file->filemime;
  $extension = '';
  switch ($filetype) {
    case 'image/jpeg':
      $extension = 'jpg';
      break;
    case 'image/png':
      $extension = 'png';
      break;
    case 'image/gif':
      $extension = 'gif';
      break;
  }
  $dest = variable_get('user_picture_path', 'pictures') . '/picture-' . $owner . '.' . $extension;

  if ($file != 0) {
    //$dest_path = 'files/upload_directory';
    $result = file_move($file, $dest, FILE_EXISTS_RENAME);
    $flag = 0;
  }

  if ($result == 1) {
    $insimage = $file->filepath;
    $_SESSION['filepath'] = $file->filepath;
    $_SESSION['fid'] = $file->fid;
    $_SESSION['filetype'] = $file->filemime;
    $flag = 0;
  }
  elseif (!empty($form_state['values']['oldimg'])) {
    $insimage = $form_state['values']['oldimg'];
    $flag = 0;
  }
  else {
    $flag = 0;
    $insimage = avatar_selection_get_random_image($user);
  }//file up ends


  $return['image'] = $insimage;
  $return['flag'] = $flag;
  $return['suc'] = $suc;
  return $return;
}

function age($date) {

  $year_diff = '';
  if (!empty($date)) {
    //list($day,$month,$year)=explode("/",$date);

    $year_diff = date("Y") - $date;
    //$month_diff = date("m")-$month;
    //$day_diff = date("d")- $day;
    //if ($day_diff < 0 || $month_diff < 0) $year_diff–;

    return $year_diff;
  }
  else {

    return '';
  }
}

function _avatar_submit($form, &$form_state) {

  global $base_url, $user;
  // echo '<pre>';
  //print_r($form_state);
  //file handler
  $return = event_photo_profile($form, $form_state);
  //print_r($return); die;
  $insimage = $return['image'];
  $flag = $return['flag'];
  $suc = $return['suc'];
  //file handler ends
  $curr_avatar = str_replace($base_url . '/', '', $form_state['values']['current_image']);
  if (!empty($curr_avatar)) {
    $imgpath = $curr_avatar;
    $img_avt = '2';
  }
  else if (!empty($_SESSION['filepath']) || !empty($form_state['values']['oldimg'])) {
    $img_avt = '1';
    $imgpath = $insimage;
  }
  else {
    $img_avt = '2';
    $image_path = file_create_path('avatar_selection');

    //  $image_path=file_directory_path().'/avatar_selection';
    $selected_avatar = $resultimage->avatar;
    $imgpath = $image_path . '/' . $form_state['values']['select_avatar'];
    //  $insimage = $form_state['values']['image'];
  }

  // follow links starts here
  $links = $form_state['values']['follow_links'];
  //echo '<pre>';print_r($links);exit;
  foreach ($links as $name => $link) {
    //  print_r($link);
    $link = (object) $link;
    $link->url = trim($link->url);

    $link->uid = $user->uid;
    if (!empty($link->name) && !empty($link->url)) {
      follow_link_save($link);
    }
  }  // follow links ends here

  if (!empty($form_state['values']['facebook']) || !empty($form_state['values']['twitter']))
    $social = $form_state['values']['facebook'] . '||' . $form_state['values']['twitter'];

  $query = "UPDATE {user_profile} set image_avatar='%s',image='%s',avatar='%s',social='%s',urls='%s'  where uid='%d' ";
  //$result = db_query($query, $img_avt, $insimage, $form_state['values']['select_avatar'], $social, $form_state['values']['myweb'], $user->uid);
  $result = db_query($query, $img_avt, $imgpath, $form_state['values']['select_avatar'], $social, $form_state['values']['myweb'], $user->uid);
  //notify type
  db_query("update {users} set notify_etype='%d',picture='%s' where uid='%d'", $form_state['values']['notify'], $imgpath, $user->uid);
  //drupal_set_message(t('Your form has been saved.', 'success'));


  return true;
}

function _privacy_submit($form, &$form_state) {

  global $base_url, $user;
  //prepopulate the settings
  foreach (element_children($form) as $child) {
    if ($form[$child]['#type'] == 'radios') {
      $$child = $form_state['values'][$child];
    }
  }
  $personal_privacies = $form_state['values']['follow_links'];
  foreach ($personal_privacies as $link => $privacy) {
    if ($privacy['url'] != '' && $privacy['privacy']) {
      $peronal_privacies[$link] = $privacy['privacy'];
    }
  }
  $link_privacies = serialize($peronal_privacies);
  $chk = db_query("select * from {privacy_settings} where uid='$user->uid'");
  $chk1 = db_result($chk);
  if ($chk1) {
    $query = "UPDATE {privacy_settings} set real_name='%d',mail='%s',gender='%d',bio='%d',zip='%d',religion='%d',ethnic='%d',income='%d',marital='%d',sorient='%d',edu='%d',dob='%d', mywebsite='%d', facebook='%d', twitter='%d', personal_links='%s'  where uid='%d' ";
  }
  else {
    $query = "INSERT INTO {privacy_settings} set real_name='%d',mail='%s',gender='%d',bio='%d',zip='%d',religion='%d',ethnic='%d',income='%d',marital='%d',sorient='%d',edu='%d',dob='%d',mywebsite='%d', facebook='%d', twitter='%d', personal_links = '%s',uid='%d'";
  }

  db_query($query, $real_name_privacy, $mail_privacy, $gender_privacy, $bio_privacy, $zip_privacy, $religion_privacy, $ethnic_privacy, $income_privacy, $marital_privacy, $sorient_privacy, $edu_privacy, $dob_privacy, $mywebsite_privacy, $facebook_privacy, $twitter_privacy, $link_privacies, $user->uid);
  db_query("update {user_profile} set question_privacy='%d' where uid='%d'", $activity_privacy, $user->uid);
  //drupal_set_message(t('Your form has been saved.', 'success'));
  return true;
}

function _basic_submit($form, &$form_state) {

  global $base_url, $user;
  $account = user_load($user->uid);
  $age = age($form_state['values']['dob']);

  // Load Latitude Longitude Ralldev DE544
  $doc = new DOMDocument();
  if ($form_state['values']['state'] != '' && $form_state['values']['country'] != '') {
    $doc->load('http://maps.googleapis.com/maps/api/geocode/xml?address=' . $form_state['values']['city'] . ',+' . $form_state['values']['state'] . ',+' . $form_state['values']['country'] . '&sensor=true');
    $locations = $doc->getElementsByTagName("location");
    foreach ($locations as $location) {
      $latitude = $location->getElementsByTagName("lat");
      $lat[] = $latitude->item(0)->nodeValue;

      $longitude = $location->getElementsByTagName("lng");
      $long[] = $longitude->item(0)->nodeValue;
    }
    $latitude = $lat[0];
    $longitude = $long[0];
  }
  else {
    $latitude = '';
    $longitude = '';
  }
  // Location data ends

  $chk = db_query("select * from {user_profile} where uid='$user->uid'");
  $chk_result = db_result($chk);
  if ($chk_result) {
    $query = "UPDATE {user_profile} set real_name='%s',gender='%s',bio='%s',zip='%s',country='%s',state='%s',city='%s',religion='%s',ethnic='%s',dob='%d',age='%d',income='%s',marital='%s',sorient='%s',edu='%s', latitude = '%s', longitude = '%s' where uid='%d' ";
  }
  else {
    $query = "INSERT INTO {user_profile} set real_name='%s',gender='%s',bio='%s',zip='%s',country='%s',state='%s',city='%s',religion='%s',ethnic='%s',dob='%d',age='%d',income='%s',marital='%s',sorient='%s',edu='%s', latitude = '%s', longitude = '%s', uid='%d' ";
  }
  $result = db_query($query, $form_state['values']['fname'], $form_state['values']['gender'], $form_state['values']['bio'], $form_state['values']['zip'], $form_state['values']['country'], $form_state['values']['state'], $form_state['values']['city'], $form_state['values']['religion'], $form_state['values']['ethnic'], $form_state['values']['dob'], $age, $form_state['values']['income'], $form_state['values']['marital'], $form_state['values']['sorient'], $form_state['values']['education'], $latitude, $longitude, $user->uid);
  //update username
  db_query("update {users} set name='%s',mail='%s',prompt='%d',language='%s' where uid='%d'", $form_state['values']['username'], $form_state['values']['email'], '0', $form_state['values']['default_language'], $user->uid);
  //drupal_set_message(t('Your profile has been updated', 'success'));
  $edit = array('profile_gender' => $form_state['values']['gender'], 'real_name' => $form_state['values']['fname'], 'profile_bio' => $form_state['values']['bio'], 'profile_zip' => $form_state['values']['zip'], 'profile_country' => $form_state['values']['country'], 'profile_state' => $form_state['values']['state'], 'profile_city' => $form_state['values']['city'], 'profile_religion' => $form_state['values']['religion'], 'profile_ethnic' => $form_state['values']['ethnic'], 'profile_dob' => $form_state['values']['dob'], 'profile_income' => $form_state['values']['income'], 'profile_marital' => $form_state['values']['marital'], 'profile_sorient' => $form_state['values']['sorient']);
  user_save($account, $edit, 'Profile');
  return true;
}

function privacy($uid = '') {
  $sql = db_query("SELECT * FROM {privacy_settings} WHERE uid = '%d'", $uid);
  while ($settings = db_fetch_object($sql)) {
    $privacy['real_name '] = $settings->real_name;
    $privacy['name '] = $settings->name;
    $privacy['email '] = $settings->email;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
    $privacy['real_name '] = $settings->real_name;
  }
}

function check_follow_unfollow($requester, $requestee) {

  $fid = db_result(db_query("SELECT rid FROM {user_relationships} WHERE requester_id = '%d' AND requestee_id = '%d'", $requester, $requestee));
  return $fid;
}

// check whether the user has moderator permission
function is_moderator($uid = '') {
  global $user;
  if (is_array($user->roles) && in_array('administrator', $user->roles)) {
    return true;
  }
  else {
    return false;
  }
}

function UserPicture_small_src($mid) {

  global $base_url, $user, $gDocPath, $base_root, $base_path;

  static $userImage = array();
  if (isset($userImage[$mid])) {
    return $userImage[$mid];
  }

  $selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  $rs_image = db_query($selimage);
  $resultimage = db_fetch_object($rs_image);

  $userslist = user_load(array('uid' => $mid));
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);

//    $default = $base_url.'/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  switch ($resultimage->image_avatar) {
    case '-2': // hmm, seems smth strange, let's use default option
      $image_path = file_create_path('avatar_selection');

      //  $image_path=file_directory_path().'/avatar_selection';
      $selected_avatar = $resultimage->avatar;
      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_exists($image_path . '/' . $selected_avatar)) {
        //$PROFILE_IMAGE = theme_image($ipath,'thumbnail','Avatar',array('width'=>'30px','align'=>'absmiddle','height'=>'30px'),FALSE);
        $PROFILE_IMAGE = $ipath;
      }
      /*       * Rallydev:512* */
      else if (file_exists($resultimage->image)) {
        $PROFILE_IMAGE = $base_url . '/' . $resultimage->image;
      }
      /*       * *********** */
      else {
        $PROFILE_IMAGE = $default;
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          //$PROFILE_IMAGE=theme('user_picture', $userslist,'30x30');
          $PROFILE_IMAGE = $base_url . '/' . $img_path;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      elseif ($resultimage->image_url != '') {

        //echo $resultimage->image_url;
        if ($resultimage->image_url != '') {
          $PROFILE_IMAGE = $resultimage->image_url;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = $img_path;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      break;
  }

  $userImage[$mid] = $PROFILE_IMAGE;
  return $PROFILE_IMAGE;
}

// profiles themes
function profiles_theme() {
  return array(
    'show_heat_map' => array(
      'template' => 'show-heat-map',
      'arguments' => array('issues' => NULL, 'users' => NULL, 'online' => NULL, 'votes' => NULL),
    ),
    'user_badge_coins' => array(
      'template' => 'user-badge-coins',
      'arguments' => array('badges' => NULL, 'coins' => NULL),
    ),
    'user_profile_options' => array(
      'template' => 'user-profile-options',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL),
    ),
    'user_profile_options_bottom' => array(
      'template' => 'user-profile-options-bottom',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL, 'ranking' => NULL, 'points' => NULL),
    ),
    'user_profile_options_alert' => array(
      'template' => 'user-profile-options-alert',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL, 'ranking' => NULL, 'points' => NULL),
    ),
    'user_profile_bio' => array(
      'template' => 'user-profile-bio',
      'arguments' => array('getuser' => NULL, 'ranking' => NULL, 'follow_status' => NULL, 'settings' => NULL),
    ),
    'user_profile_information' => array(
      'template' => 'user-profile-information',
      'arguments' => array('getuser' => NULL, 'badges' => NULL, 'coins' => NULL, 'votes' => NULL, 'comments' => NULL, 'references' => NULL, 'followers' => NULL, 'following' => NULL, 'badgeList' => NULL, 'followerList' => NULL, 'followingList' => NULL, 'settings' => NULL),
    ),
    'you_are_following' => array(
      'template' => 'you-are-following',
      'arguments' => array('relationships' => NULL, 'requestcount' => NULL),
    ),
    'following_counts' => array(
      'template' => 'following-counts',
      'arguments' => array('followingCount' => NULL, 'followersCount' => NULL),
    ),
  );
}

//profile_complete_percent

function profile_complete_percent_area() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);
  return theme('user_profile_options', $name, $complete_data, $userPicture, $medalList);
}

// profile complete options bottom
function profile_complete_percent_area_bottom() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);


  /*
  * odyachenko
  *
  * These lines refer to working with the ranks the old way
  */
  $rank = ranks_user_rank($user->uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$user->rank_id'"));

  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
   */
  $points = up_userpoints_get($user->uid);

  return theme('user_profile_options_bottom', $name, $complete_data, $userPicture, $medalList, $ranking, $points);
}

//profile_complete_percent_alert

function profile_complete_percent_alert() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);
  return theme('user_profile_options_alert', $name, $complete_data, $userPicture, $medalList);
}

function load_user_medal_list($uid = '') {
  $users = load_user($uid);
  $badges = load_badges($uid);
  $coins = $users->total_coins != '' ? $users->total_coins : 0;
  return theme('user_badge_coins', $badges, $coins);
}

// user profile bio informations
function user_profile_bio($uid = '') {
  global $user, $base_url;

  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';

  $getuser = user_load(array('uid' => $uid));


  /*
  * odyachenko
  *
  * These lines refer to working with the ranks the old way
  */
  $rank = ranks_user_rank($uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$getuser->rank_id'"));

  $profiles = db_query("SELECT * FROM {user_profile} WHERE uid = '$uid'");
  $profileDetails = db_fetch_object($profiles);

  // get user privacy settings
  $userSettings = checkPrivacySettings($uid);
  $settings = get_user_privacy_values($userSettings, $uid);
  //echo '<pre>'; print_r($settings); exit;
  // check follow status
  drupal_add_js(USER_RELATIONSHIPS_UI_PATH . '/user_relationships_ui.js');
  if ($user->uid == 0) {
    $status = t('Login to Follow User');
    $flink = '#';
    $fClass = '';
  }
  else if ($user->uid != $getuser->uid) {
    $followingid = check_follow_unfollow($user->uid, $getuser->uid);
    if ($followingid) {
      // unfollow
      //$flink='<a class="user_relationships_popup_link linkfol" href="' . $base_url.'/' . 'user/'.$user->uid.'/relationships/'.$followingid.'/remove/?destination=profile/'.$getuser->name.'">Unfollow</a>';
      $flink = $sitelink . 'user/' . $user->uid . '/relationships/' . $followingid . '/remove/?destination=profile/' . $getuser->name;
      $status = t('Unfollow User');
    }
    else {
      // follow
      //$flink='<a class="user_relationships_popup_link linkfol" href="' . $base_url.'/' . 'relationship/'.$getuser->uid.'/request/'.$user->uid.'?destination=profile/'.$getuser->name.'">Follow</a>';
      $flink = $sitelink . 'relationship/' . $getuser->uid . '/request/' . $user->uid . '?destination=profile/' . $getuser->name;
      $status = t('Follow');
    }
    $fClass = 'user_relationships_popup_link';
  }
  else {
    $flink = $sitelink . 'account/edit';
    $status = t('Edit Profile');
    $fClass = '';
  }
  $follow_status['status'] = $status;
  $follow_status['href'] = $flink;
  $follow_status['fclass'] = $fClass;

  return theme('user_profile_bio', $getuser, $ranking, $follow_status, $settings);
}

// user profile information
function user_profile_info() {
  global $user, $base_url;
  // get user profile id for a particular user
  $uid = get_user_profile_id();
  $getuser = user_load(array('uid' => $uid));

  $badges = load_badges($uid);
  $coins = $getuser->total_coins != '' ? $getuser->total_coins : 0;
  $votes = db_result(db_query("SELECT COUNT(nid) FROM {poll_votes} WHERE uid = '$uid'"));
  $comments = db_result(db_query("SELECT COUNT(DISTINCT(nid)) FROM {comments} WHERE uid = '$uid'"));
  $references = db_result(db_query("SELECT COUNT(f.nid) FROM {content_type_forum} AS f LEFT JOIN {node} AS n ON f.nid = n.nid WHERE n.uid = '$uid' AND f.field_type_value = 2"));

//  relationships - following
  $relationships = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '8'), $reset = FALSE);
  $relationshipsCount = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $following = count($relationshipsCount);
  if ($relationships) {
    foreach ($relationships as $rtid => $relationship) {
      $fgimage = UserPicture_small_src($relationship->requestee_id, 0);
      $followingList[$relationship->requestee->name] = $fgimage;
    }
  }
//  relationships - followers
  $frrelationships = user_relationships_load($param = array("approved" => 1, "requestee_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '8'), $reset = FALSE);
  $frrelationshipsCount = user_relationships_load($param = array("approved" => 1, "requestee_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $followers = count($frrelationshipsCount);
  if ($frrelationships) {
    foreach ($frrelationships as $rtid => $frrelationship) {
      $frimage = UserPicture_small_src($frrelationship->requester_id, 0);
      $followerList[$frrelationship->requester->name] = $frimage;
    }
  }

  $getbadges = db_query("SELECT *,(select count(*) from {user_badges} where uid='$uid' AND bid=ub.bid) as bcnt from {user_badges} as ub join {badges} as b on ub.bid=b.bid where ub.uid='$uid' and ub.status='1' group by ub.bid");
  while ($badge = db_fetch_object($getbadges)) {
    $badgeList[t($badge->name) . ' x ' . $badge->bcnt] = $badge->btype;
  }
  // get user privacy settings
  $userSettings = checkPrivacySettings($uid);
  $settings = get_user_privacy_values($userSettings, $uid);

  return theme('user_profile_information', $getuser, $badges, $coins, $votes, $comments, $references, $followers, $following, $badgeList, $followerList, $followingList, $settings);
}

function get_user_profile_id() {
  global $user, $base_url;
  $profile_name = substr($_GET['q'], strrpos($_GET['q'], "/") + 1);
  $uid = '';

  if (!is_numeric($profile_name)) {
    $profile_name = strtolower($profile_name);
    $getuser = user_load(array('name' => $profile_name));
  }
  else {
    $getuser = user_load(array('uid' => $profile_name));
  }
  if (isset($getuser) && !empty($getuser)) {

    $uid = $getuser->uid;
  }

  if ($uid == '') {
    $uid = $user->uid;
  }

  if ($uid == '') {
    drupal_not_found();
    return;
  }

  return $uid;
}

function get_user_privacy_values($userSettings, $uid) {
  global $base_url, $user;
  $settings = array();
  //Checking settings and displaying the field
  $get_cn = db_query("select * from {user_profile} where uid='$uid'");
  $result = db_fetch_array($get_cn);
  $getuser = user_load(array('uid' => $result['uid']));
  $is_follow_follower = checkFollowStatus($user->uid, $uid);

  if (is_array($result))
    extract($result);

  if (($userSettings['real_name'] == 1) || ($userSettings['real_name'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['real_name'] == 3 && $is_follow_follower == TRUE) && ($userSettings['real_name'] != 4)) {
    $settings['real_name'] = $result['real_name'];
  }
  else {
    $settings['real_name'] = '';
  }

  if (($userSettings['mail'] == 1) || ($userSettings['mail'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['mail'] == 3 && $is_follow_follower == TRUE) && ($userSettings['mail'] != 4)) {
    $settings['email'] = $getuser->mail;
  }
  else {
    $settings['email'] = '';
  }
  if (($userSettings['bio'] == 1) || ($userSettings['bio'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['bio'] == 3 && $is_follow_follower == TRUE) && ($userSettings['bio'] != 4)) {
    $settings['bio'] = $result['bio'];
  }
  else {
    $settings['bio'] = '';
  }
  if (($userSettings['zip'] == 1) || ($userSettings['zip'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['zip'] == 3 && $is_follow_follower == TRUE) && ($userSettings['zip'] != 4)) {
    $country1 .= $result['country'];

    if (!empty($state)) {
      $country1.='(' . $result['state'] . ',' . $result['city'] . ').';
    }
    $settings['location'] = $country1;
  }
  else {
    $settings['location'] = "";
  }
  if (($userSettings['religion'] == 1) || ($userSettings['religion'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['religion'] == 3 && $is_follow_follower == TRUE) && ($userSettings['religion'] != 4)) {
    $settings['religion'] = $result['religion'];
  }
  else {
    $settings['religion'] = "";
  }



  if (($userSettings['image'] == 1) || ($userSettings['image'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['image'] == 3 && $is_follow_follower == TRUE) && ($userSettings['image'] != 4)) {
    $img_path1 = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $result['image'];
    $PROFILE_IMAGE = '<img src="' . $img_path1 . '" align="absmiddle" alt="Profile image" >';
  }

  if (($userSettings['dob'] == 1) || ($userSettings['dob'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['dob'] == 3 && $is_follow_follower == TRUE) && ($userSettings['dob'] != 4)) {
    $settings['dob'] = $age;
  }if ($settings['dob'] == 0) {
    $dob1 = "";
  }
  else {
    $rem_value = $settings['dob'] % 5;
    $rem_first = $settings['dob'] - $rem_value;
    $rem_second = $rem_first + 5;
    $settings['dob'] = $rem_first . ' - ' . $rem_second . ' ' . t('Years Old');
  }
  if (($userSettings['sorient'] == 1) || ($userSettings['sorient'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['sorient'] == 3 && $is_follow_follower == TRUE) && ($userSettings['sorient'] != 4)) {
    $settings['sorient'] = $result['sorient'];
  }
  else {
    $settings['sorient'] = "";
  }
  if (($userSettings['edu'] == 1) || ($userSettings['edu'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['edu'] == 3 && $is_follow_follower == TRUE) && ($userSettings['edu'] != 4)) {
    $settings['edu'] = $result['edu'];
  }
  else {
    $settings['edu'] = "";
  }
  if (($userSettings['ethnic'] == 1) || ($userSettings['ethnic'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['ethnic'] == 3 && $is_follow_follower == TRUE) && ($userSettings['ethnic'] != 4)) {
    $settings['ethnic'] = $result['ethnic'];
  }
  else {
    $settings['ethnic'] = "";
  }

  if (($userSettings['income'] == 1) || ($userSettings['income'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['income'] == 3 && $is_follow_follower == TRUE) && ($userSettings['income'] != 4)) {
    $settings['income'] = $result['income'];
  }
  else {
    $settings['income'] = "";
  }
  if (($userSettings['marital'] == 1) || ($userSettings['marital'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['marital'] == 3 && $is_follow_follower == TRUE) && ($userSettings['marital'] != 4)) {
    $settings['marital'] = $result['marital'];
  }
  else {
    $settings['marital'] = "";
  }

  if (($userSettings['gender'] == 1) || ($userSettings['gender'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['gender'] == 3 && $is_follow_follower == TRUE) && ($userSettings['gender'] != 4)) {
    $settings['gender'] = $result['gender'];
    $settings['gender'] = $settings['gender'] == 1 ? 'Male' : 'Female';
  }
  else {
    $settings['gender'] = "";
  }


  if (($userSettings['mywebsite'] == 1) || ($userSettings['mywebsite'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['mywebsite'] == 3 && $is_follow_follower == TRUE) && ($userSettings['mywebsite'] != 4)) {
    $settings['mywebsite'] = $result['urls'];
  }
  else {
    $settings['mywebsite'] = "";
  }
  list($facebook, $twitter) = explode("||", $result['social']);
  if (($userSettings['facebook'] == 1) || ($userSettings['facebook'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['facebook'] == 3 && $is_follow_follower == TRUE) && ($userSettings['facebook'] != 4)) {
    $settings['facebook'] = $facebook;
  }
  else {
    $settings['facebook'] = "";
  }
  if (($userSettings['twitter'] == 1) || ($userSettings['twitter'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['twitter'] == 3 && $is_follow_follower == TRUE) && ($userSettings['twitter'] != 4)) {
    $settings['twitter'] = $twitter;
  }
  else {
    $settings['twitter'] = "";
  }


  if (($userSettings['answers'] == 1) || ($userSettings['answers'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['answers'] == 3 && $is_follow_follower == TRUE) && ($userSettings['answers'] != 4)) {
    $settings['answers'] = $ins_ans;
  }
  else {
    $settings['answers'] = '';
  }
  if (($userSettings['questions'] == 1) || ($userSettings['questions'] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($userSettings['questions'] == 3 && $is_follow_follower == TRUE) && ($userSettings['questions'] != 4)) {
    $settings['questions'] = $inc_qns;
  }
  else {
    $settings['questions'] = '';
  }
  // other website links
  $othQuery = db_query("SELECT name, url FROM {follow_links} WHERE uid = '$uid'");
  $link_privacies = unserialize($userSettings['personal_links']);


  while ($otherLinks = db_fetch_object($othQuery)) {
    if (($link_privacies[$otherLinks->name] == 1) || ($link_privacies[$otherLinks->name] == 2 && $user->uid != 0) || ($user->uid == $uid) || ($user->uid == 1) || ($link_privacies[$otherLinks->name] == 3 && $is_follow_follower == TRUE) && ($link_privacies[$otherLinks->name] != 4)) {
      $others[$otherLinks->name] = $otherLinks->url;
    }
    else {
      $others = array();
    }
  }
  $settings['other_links'] = $others;

  return $settings;
}

// user following list
function _following_list($uid = '') {
  //using user relation module api
  global $user;
  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';
  $output = '';
  $i = 0;
  $more = '';

  drupal_add_css(drupal_get_path('module', 'user_search') . '/style/style.css');

  $uid = $uid != '' ? $uid : $user->uid;
  $relationships = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '10'), $reset = FALSE);
  $requestcount = count($relationships);

  $following = theme('you_are_following', $relationships, $requestcount);
  return $following;
}

// user following counts
function _following_counts() {
  global $user;
  $following = user_relationships_load($param = array("approved" => 1, "requester_id" => $user->uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $followers = user_relationships_load($param = array("approved" => 1, "requestee_id" => $user->uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $followingCount = count($following);
  $followersCount = count($followers);
  return theme('following_counts', $followingCount, $followersCount);
}