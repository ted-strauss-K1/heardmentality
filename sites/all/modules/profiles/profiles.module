<?php

/*
 * Implementation of hook_init()
 */
function profiles_init() {
  //
}

/**
 * Implementation of hook_perm().
 */
function profiles_perm() {
  return array('Profile Edit', 'Profile View', 'Profile Privacy', 'Update Profile');
}



function load_user($uid = '') {

  $query = "select * from {users} as u join {user_profile} as up on u.uid=up.uid  where u.uid='$uid'";
  $result = db_fetch_object(db_query($query));
  return $result;
}









function UserPicture($mid, $profile='') {
  global $base_url, $user, $base_root, $base_path, $theme;
  $userslist = user_load(array('uid' => $mid));
  // $selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  //$rs_image = db_query($selimage);
  //  $resultimage = db_fetch_object($rs_image);
  $selected_avatar = $resultimage->avatar;
  //$default = $base_url.'/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);
  if ($profile)
    $resultimage->image_avatar = 1;

  switch ($resultimage->image_avatar) {
    case '2':
      $image_path = file_create_path('avatar_selection');

      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_check_location($image_path . '/' . $selected_avatar)) {
        $PROFILE_IMAGE = '<img src="' . $ipath . '" alt="avatar" ALIGN=ABSMIDDLE width="54" class="uprofile"  height="54" >';
        //  $PROFILE_IMAGE = theme('image',$ipath);
      }
      else {
        $PROFILE_IMAGE = '<img src="' . $default . '" alt="photo" ALIGN=ABSMIDDLE class="uprofile" width="54"  height="54" >';
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = theme('user_picture', $userslist, '65x56');
          // $PROFILE_IMAGE = '<img src="' . $base_url.'/' . $img_path . '" class="uprofile" alt="photo" ALIGN=ABSMIDDLE width="65"  height="56" />';
        }
        else {

          $PROFILE_IMAGE = '<img src="' . $default . '" alt="photo" class="uprofile" ALIGN=ABSMIDDLE width="65"  height="56" />';
        }
      }
      elseif ($resultimage->image_url != '') {


        $PROFILE_IMAGE = '<img src="' . $resultimage->image_url . '" class="uprofile" align="absmiddle" alt="photo" width="65"  height="56" />';
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;
        $PROFILE_IMAGE = '<img src="' . $default . '" class="uprofile" align="absmiddle" alt="photo" width="65"  height="56" />';
      }
      break;
  }

  return $PROFILE_IMAGE;
}

function UserPicture_small($mid) {

  global $base_url, $user, $base_path;
  //$selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  //   $rs_image = db_query($selimage);
  $userslist = user_load(array('uid' => $mid));
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);
  // $resultimage = db_fetch_object($rs_image);
  $default = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  switch ($resultimage->image_avatar) {
    case '2':
      $image_path = file_create_path('avatar_selection');

      //  $image_path=file_directory_path().'/avatar_selection';
      $selected_avatar = $resultimage->avatar;
      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_exists($image_path . '/' . $selected_avatar)) {
        //$PROFILE_IMAGE = theme_image($ipath,'thumbnail','Avatar',array('width'=>'30px','align'=>'absmiddle','height'=>'30px'),FALSE);
        $PROFILE_IMAGE = ' <img src="' . $ipath . '" alt="photo" ALIGN=ABSMIDDLE width="30" class="uprofile"  height="30" >';
      }
      else {
        $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" height="30" class="uprofile" width="30" alt="Photo" >';
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          //$PROFILE_IMAGE=theme('user_picture', $userslist,'30x30');
          $PROFILE_IMAGE = '<img src="' . $base_url . '/' . $img_path . '" class="uprofile" alt="photo" ALIGN=ABSMIDDLE width="30"  height="30" />';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      elseif ($resultimage->image_url != '') {

        //echo $resultimage->image_url;
        if ($resultimage->image_url != '') {
          $PROFILE_IMAGE = '<img src="' . $resultimage->image_url . '" class="uprofile" align="absmiddle" height="30" width="30" alt="Profile image" >';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = '<img src="' . $img_path . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Profile image" >';
        }
        else {
          $PROFILE_IMAGE = '<img src="' . $default . '" align="absmiddle" class="uprofile" height="30" width="30" alt="Photo" >';
        }
      }
      break;
  }

  return $PROFILE_IMAGE;
}


function profiles_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':

      $blocks[6] = array(
        'info' => t('You are following'),
      );
      $blocks[7] = array(
        'info' => t('Following Counts'),
      );
      $blocks[8] = array(
        'info' => t('Issues Search Count'),
      );
      return $blocks;

    case 'view':
      switch ($delta) {

        case 6:
          $block['subject'] = t("You Are Following");
          $block['content'] = _following_list();
          break;
        case 7:
          $block['subject'] = t("Following Counts");
          $block['content'] = _following_counts();
          break;
        case 8:
          $block['subject'] = t("Issues Search Count");
          $block['content'] = hm_issues_search_count();
          break;
      }
      return $block;
  }
}

function hm_issues_search_count() {

  $count = t("<em>!search-count</em> issues ", array("!search-count" => variable_get("hm_search_results_count", "")));
  $output =
          '<div class="message right-message">
	  <p class="profile-status"><strong></strong></p>   
      <p class="profile-status">' . $count . '</p>   	  
	 </div>';
  return $output;
}



/*
 * Show figure on home page
 */


function load_bubble($uid = '') {
  global $base_url, $user, $gDocPath, $base_root, $theme;

  $medal = updateProfileBadge($uid);
  $details = load_user($uid);

  $uname = $details->first_name . ' ' . $details->last_name;

  /*
   * odyachenko
   *
   * These lines refer to working with the ranks the old way
   */
  $rank = ranks_user_rank($uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$details->rank_id'"));


  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
  */
  $points = up_userpoints_get($details->uid);

  $coins = $user->total_coins != '' ? $user->total_coins : 0;
  $badges = badges_get_userbadges($uid);
  $badges = $badges['#stat'];
  $output = '<div class="debate-cor-inner">
                <div>
                <div class="debate-cor-inner-left">' . UserPicture_small($details->uid) . '</div>
                    <div class="debate-cor-inner-right">
                    <div style="padding-left:10px;text-align:left;"><strong>' . myTruncate($details->name, '10', '..') . ' </strong></div>
                        <ul style="list-style-type:none">
                      
                        <li style="width:30px">' . t($ranking) . '<br /><span class="profInfo-value" title="' . $points . ' ' . t('Points') . '">' . $points . '</span></li>
                        <li><img width="10" height="10" alt="Gold" title="' . $badges['gold'] . ' Golds" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gold.jpg" /><br><span>' . $badges['gold'] . '</span></li>
                        <li><img width="10" height="10" alt="Silver" title="' . $badges['silver'] . ' Silvers" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-silver.jpg" /><br /><span>' . $badges['silver'] . '</span></li>
                        <li><img width="10" height="10" alt="Gray" title="' . $badges['bronze'] . ' Bronzes" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gray.jpg" /><br /><span>' . $badges['bronze'] . '</span></li>
                        </ul>
                    </div>
                 </div>
                 <div class="clr"></div>
                </div>
                ';


  return $output;
}

function load_user_badge($uid='', $search='') {

  global $base_url, $user, $theme;

  $medal = updateProfileBadge($uid);
  $details = load_user($uid);

  $uname = $details->first_name . ' ' . $details->last_name;

  /*
   * odyachenko
   *
   * These lines refer to working with the ranks the old way
   */
  $rank = ranks_user_rank($uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$details->rank_id'"));

  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
   */
   $points = up_userpoints_get($details->uid);
  $coins = $user->total_coins != '' ? $user->total_coins : 0;
  $badges = badges_get_userbadges($uid);
  $badges = $badges['#stat'];
  if ($search)
    $link = '<a  onclick="get_profile_details(' . $details->uid . ',this);" style="cursor:pointer" > ' . myTruncate($details->name, '10', '..') . '</a>';
  else
    $link = '<a href="' . $base_url . '/profile/' . $details->name . '">' . myTruncate($details->name, '10', '..') . '</a>';

  $output = '<div class="profInfo">

                <div class="profInfo-img">' . UserPicture($details->uid) . '</div>
                    <div class="profInfo-txt">
                    <span class="profInfo-value" title="' . $points . ' Points">' . $points . '</span>
                        <div class="profInfo-name">' . $link . '</div>
                            <div class="profInfo-name2">' . $ranking . '</div>
                        <ul >
                        <li><img width="10" height="10" alt="Gold" title="' . $badges['gold'] . ' Golds" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gold.jpg" /><span>' . $badges['gold'] . '</span></li>
                        <li><img width="10" height="10" alt="Silver" title="' . $badges['silver'] . ' Silvers" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-silver.jpg" /><span>' . $badges['silver'] . '</span></li>
                        <li><img width="10" height="10" alt="Gray" title="' . $badges['bronze'] . ' Bronzes" src="' . $base_url . '/' . drupal_get_path('theme', $theme) . '/images/cor-gray.jpg" /><span>' . $badges['bronze'] . '</span></li>
                        </ul>
                    </div>
                 </div>
                           ';


  return $output;
}





function profiles_user($op, $edit, &$account, $category = NULL) {
  // print_r($op);
  module_load_include('inc', 'profiles', 'profiles.pages');
  switch ($op) {

    case 'insert':


      // create empty field in user_profile table on sign up user

      $uid = $account->uid;
      $chk = db_query("select * from {user_profile} where uid='$uid'");
      $chk_result = db_result($chk);
      if (!$chk_result) {
        $query = "INSERT INTO {user_profile} SET uid='%d'";
        db_query($query, $uid);
      }

      //home page
      $_REQUEST['destination'] = 'qlite/view';

      break;
    case 'categories':

      break;

    case 'view':

      //unset($account->content);
      // echo '<pre>';print_r($account);
      break;
  }
}

function profiles_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {


  if ($op == 'load' && $node->type == 'profile') {
    //  echo "<pre>";
//print_r($node);
  }
}

function profiles_form_alter(&$form, $form_state, $form_id) {
  // Check for a particular content type's node form.
  //echo $form_id;
  if ($form_id == 'profile_node_form') {
    // Add an after_build function to process when everything's complete.
    drupal_set_title(t('Editing your Profile in 3 steps!'));

    leghist_cck_alter($form);
  }
  if ($form_id == 'user_details') {
    $output = '';
    foreach (element_children($form) as $child) {
      if ($form[$child]['#type'] == 'radios') {
        //  print_r($form[$child]['#options']);
        foreach (element_children($form[$child]) as $sub) {
          $form[$sub]['#options']['#attributes'] = array('class' => 'form-wra-4');
        }
      }
    }
  }
}

/**
 * Adds Element to $form
 */
function leghist_cck_alter(&$form) {

  foreach (element_children($form) as $child) {

    if ($form[$child]['#type'] == 'textfield' && $form[$child]['#title'] == 'Title') {

      $form[$child]['#title'] = t('Bio');
    }
  }
}





function event_photo_profile(&$form, &$form_state) {
  global $user;
  $suc = '';
  $return = array();

  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array('500x500'),
    'file_validate_size' => array(500 * 1024),
  );
  $upload_dir = variable_get('user_picture_path', 'pictures');
  $filepath = file_directory_path();
  $dest = $filepath . '/' . $upload_dir;
  $file = file_save_upload('file_upload', $validators, $dest);

  $owner = $user->uid;
  $filetype = $file->filemime;
  $extension = '';
  switch ($filetype) {
    case 'image/jpeg':
      $extension = 'jpg';
      break;
    case 'image/png':
      $extension = 'png';
      break;
    case 'image/gif':
      $extension = 'gif';
      break;
  }
  $dest = variable_get('user_picture_path', 'pictures') . '/picture-' . $owner . '.' . $extension;

  if ($file != 0) {
    //$dest_path = 'files/upload_directory';
    $result = file_move($file, $dest, FILE_EXISTS_RENAME);
    $flag = 0;
  }

  if ($result == 1) {
    $insimage = $file->filepath;
    $_SESSION['filepath'] = $file->filepath;
    $_SESSION['fid'] = $file->fid;
    $_SESSION['filetype'] = $file->filemime;
    $flag = 0;
  }
  elseif (!empty($form_state['values']['oldimg'])) {
    $insimage = $form_state['values']['oldimg'];
    $flag = 0;
  }
  else {
    $flag = 0;
    $insimage = avatar_selection_get_random_image($user);
  }//file up ends


  $return['image'] = $insimage;
  $return['flag'] = $flag;
  $return['suc'] = $suc;
  return $return;
}

function age($date) {

  $year_diff = '';
  if (!empty($date)) {
    //list($day,$month,$year)=explode("/",$date);

    $year_diff = date("Y") - $date;
    //$month_diff = date("m")-$month;
    //$day_diff = date("d")- $day;
    //if ($day_diff < 0 || $month_diff < 0) $year_diff–;

    return $year_diff;
  }
  else {

    return '';
  }
}

function _avatar_submit($form, &$form_state) {

  global $base_url, $user;
  // echo '<pre>';
  //print_r($form_state);
  //file handler
  $return = event_photo_profile($form, $form_state);
  //print_r($return); die;
  $insimage = $return['image'];
  $flag = $return['flag'];
  $suc = $return['suc'];
  //file handler ends
  $curr_avatar = str_replace($base_url . '/', '', $form_state['values']['current_image']);
  if (!empty($curr_avatar)) {
    $imgpath = $curr_avatar;
    $img_avt = '2';
  }
  else if (!empty($_SESSION['filepath']) || !empty($form_state['values']['oldimg'])) {
    $img_avt = '1';
    $imgpath = $insimage;
  }
  else {
    $img_avt = '2';
    $image_path = file_create_path('avatar_selection');

    //  $image_path=file_directory_path().'/avatar_selection';
    $selected_avatar = $resultimage->avatar;
    $imgpath = $image_path . '/' . $form_state['values']['select_avatar'];
    //  $insimage = $form_state['values']['image'];
  }

  // follow links starts here
  $links = $form_state['values']['follow_links'];
  //echo '<pre>';print_r($links);exit;
  foreach ($links as $name => $link) {
    //  print_r($link);
    $link = (object) $link;
    $link->url = trim($link->url);

    $link->uid = $user->uid;
    if (!empty($link->name) && !empty($link->url)) {
      follow_link_save($link);
    }
  }  // follow links ends here

  if (!empty($form_state['values']['facebook']) || !empty($form_state['values']['twitter']))
    $social = $form_state['values']['facebook'] . '||' . $form_state['values']['twitter'];

  $query = "UPDATE {user_profile} set image_avatar='%s',image='%s',avatar='%s',social='%s',urls='%s'  where uid='%d' ";
  //$result = db_query($query, $img_avt, $insimage, $form_state['values']['select_avatar'], $social, $form_state['values']['myweb'], $user->uid);
  $result = db_query($query, $img_avt, $imgpath, $form_state['values']['select_avatar'], $social, $form_state['values']['myweb'], $user->uid);
  //notify type
  db_query("update {users} set notify_etype='%d',picture='%s' where uid='%d'", $form_state['values']['notify'], $imgpath, $user->uid);
  //drupal_set_message(t('Your form has been saved.', 'success'));


  return true;
}



function privacy($uid = '') {
  $sql = db_query("SELECT * FROM {privacy_settings} WHERE uid = '%d'", $uid);
  while ($settings = db_fetch_object($sql)) {
    $privacy['real_name '] = $settings->real_name;
    $privacy['name '] = $settings->name;
    $privacy['email '] = $settings->email;
    $privacy['real_name '] = $settings->real_name;
  }
}



// check whether the user has moderator permission


function UserPicture_small_src($mid) {

  global $base_url, $user, $gDocPath, $base_root, $base_path;

  static $userImage = array();
  if (isset($userImage[$mid])) {
    return $userImage[$mid];
  }

  $selimage = "select image,image_url,image_avatar,avatar from {user_profile} where uid='$mid'";
  $rs_image = db_query($selimage);
  $resultimage = db_fetch_object($rs_image);

  $userslist = user_load(array('uid' => $mid));
  $default = $base_url . '/' . avatar_selection_get_random_image($userslist);

//    $default = $base_url.'/' . drupal_get_path('module', 'profiles') . '/snap/noimage.jpg';
  switch ($resultimage->image_avatar) {
    case '-2': // hmm, seems smth strange, let's use default option
      $image_path = file_create_path('avatar_selection');

      //  $image_path=file_directory_path().'/avatar_selection';
      $selected_avatar = $resultimage->avatar;
      $ipath = $base_url . '/' . $image_path . '/' . $selected_avatar;

      if (file_exists($image_path . '/' . $selected_avatar)) {
        //$PROFILE_IMAGE = theme_image($ipath,'thumbnail','Avatar',array('width'=>'30px','align'=>'absmiddle','height'=>'30px'),FALSE);
        $PROFILE_IMAGE = $ipath;
      }
      /*       * Rallydev:512* */
      else if (file_exists($resultimage->image)) {
        $PROFILE_IMAGE = $base_url . '/' . $resultimage->image;
      }
      /*       * *********** */
      else {
        $PROFILE_IMAGE = $default;
      }

      break;
    default:

      if (!empty($userslist->picture)) {
        $upload_dir = variable_get('user_picture_path', 'pictures');

        $img_path = $userslist->picture;

        if (file_exists($img_path)) {
          //$PROFILE_IMAGE=theme('user_picture', $userslist,'30x30');
          $PROFILE_IMAGE = $base_url . '/' . $img_path;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      elseif ($resultimage->image_url != '') {

        //echo $resultimage->image_url;
        if ($resultimage->image_url != '') {
          $PROFILE_IMAGE = $resultimage->image_url;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      else {
        //echo $resultimage->image;
        $img_path = $base_url . '/' . drupal_get_path('module', 'profiles') . '/snap/' . $resultimage->image;

        if (file_exists($img_path)) {
          $PROFILE_IMAGE = $img_path;
        }
        else {
          $PROFILE_IMAGE = $default;
        }
      }
      break;
  }

  $userImage[$mid] = $PROFILE_IMAGE;
  return $PROFILE_IMAGE;
}

// profiles themes
function profiles_theme() {
  return array(
    'show_heat_map' => array(
      'template' => 'show-heat-map',
      'arguments' => array('issues' => NULL, 'users' => NULL, 'online' => NULL, 'votes' => NULL),
    ),
    'user_badge_coins' => array(
      'template' => 'user-badge-coins',
      'arguments' => array('badges' => NULL, 'coins' => NULL),
    ),
    'user_profile_options' => array(
      'template' => 'user-profile-options',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL),
    ),
    'user_profile_options_bottom' => array(
      'template' => 'user-profile-options-bottom',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL, 'ranking' => NULL, 'points' => NULL),
    ),
    'user_profile_options_alert' => array(
      'template' => 'user-profile-options-alert',
      'arguments' => array('name' => NULL, 'complete_percent' => NULL, 'user_picture' => NULL, 'medal_list' => NULL, 'ranking' => NULL, 'points' => NULL),
    ),

//    'user_profile_information' => array(
//      'template' => 'user-profile-information',
//      'arguments' => array('getuser' => NULL, 'badges' => NULL, 'coins' => NULL, 'votes' => NULL, 'comments' => NULL, 'references' => NULL, 'followers' => NULL, 'following' => NULL, 'badgeList' => NULL, 'followerList' => NULL, 'followingList' => NULL, 'settings' => NULL),
//    ),
    'you_are_following' => array(
      'template' => 'you-are-following',
      'arguments' => array('relationships' => NULL, 'requestcount' => NULL),
    ),
    'following_counts' => array(
      'template' => 'following-counts',
      'arguments' => array('followingCount' => NULL, 'followersCount' => NULL),
    ),
  );
}

//profile_complete_percent

function profile_complete_percent_area() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);
  return theme('user_profile_options', $name, $complete_data, $userPicture, $medalList);
}

// profile complete options bottom
function profile_complete_percent_area_bottom() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);


  /*
  * odyachenko
  *
  * These lines refer to working with the ranks the old way
  */
  $rank = ranks_user_rank($user->uid);
  $ranking = $rank['name'];
  # $ranking = db_result(db_query("SELECT ranking FROM {tbl_ranking} WHERE rank_id = '$user->rank_id'"));

  /**
   * odyachenko
   *
   * These lines refer to working with the user points the old way
   *
  $points = db_result(db_query("SELECT SUM(points) FROM {tbl_user_points} WHERE uid = '" . $details->uid . "'"));
  $points = $points != '' ? $points : 0;
   */
  $points = up_userpoints_get($user->uid);

  return theme('user_profile_options_bottom', $name, $complete_data, $userPicture, $medalList, $ranking, $points);
}

//profile_complete_percent_alert

function profile_complete_percent_alert() {
  global $user;
  $name = $user->name;
  $complete_data = pcp_get_complete_percentage_data($user);
  $userPicture = UserPicture_small_src($user->uid);
  $medalList = load_user_medal_list($user->uid);
  return theme('user_profile_options_alert', $name, $complete_data, $userPicture, $medalList);
}

function load_user_medal_list($uid = '') {
  $users = load_user($uid);
  $badges = badges_get_userbadges($uid);
  $badges = $badges['#stat'];
  $coins = $users->total_coins != '' ? $users->total_coins : 0;
  return theme('user_badge_coins', $badges, $coins);
}



//// user profile information
//function user_profile_info() {
//  global $user, $base_url;
//  // get user profile id for a particular user
//  $getuser = _user_profile_get_user(arg(1));
//  $uid = $getuser->uid;
//
//
//  $badges = badges_get_userbadges($uid);
//  $badges = $badges['#stat'];
//  $coins = $getuser->total_coins != '' ? $getuser->total_coins : 0;
//  $votes = db_result(db_query("SELECT COUNT(nid) FROM {poll_votes} WHERE uid = '$uid'"));
//  $comments = db_result(db_query("SELECT COUNT(DISTINCT(nid)) FROM {comments} WHERE uid = '$uid'"));
//  $references = db_result(db_query("SELECT COUNT(f.nid) FROM {content_type_forum} AS f LEFT JOIN {node} AS n ON f.nid = n.nid WHERE n.uid = '$uid' AND f.field_type_value = 2"));
//
////  relationships - following
//  $relationships = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '8'), $reset = FALSE);
//  $relationshipsCount = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
//  $following = count($relationshipsCount);
//  if ($relationships) {
//    foreach ($relationships as $rtid => $relationship) {
//      $fgimage = UserPicture_small_src($relationship->requestee_id, 0);
//      $followingList[$relationship->requestee->name] = $fgimage;
//    }
//  }
////  relationships - followers
//  $frrelationships = user_relationships_load($param = array("approved" => 1, "requestee_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '8'), $reset = FALSE);
//  $frrelationshipsCount = user_relationships_load($param = array("approved" => 1, "requestee_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
//  $followers = count($frrelationshipsCount);
//  if ($frrelationships) {
//    foreach ($frrelationships as $rtid => $frrelationship) {
//      $frimage = UserPicture_small_src($frrelationship->requester_id, 0);
//      $followerList[$frrelationship->requester->name] = $frimage;
//    }
//  }
//
//  $getbadges = db_query("SELECT *,(select count(*) from {user_badges} where uid='$uid' AND bid=ub.bid) as bcnt from {user_badges} as ub join {badges} as b on ub.bid=b.bid where ub.uid='$uid' and ub.status='1' group by ub.bid");
//  while ($badge = db_fetch_object($getbadges)) {
//    $badgeList[t($badge->name) . ' x ' . $badge->bcnt] = $badge->btype;
//  }
//  // get user privacy settings
//  $userSettings = checkPrivacySettings($uid);
//  $settings = get_user_privacy_values($userSettings, $uid);
//
//  return theme('user_profile_information', $getuser, $badges, $coins, $votes, $comments, $references, $followers, $following, $badgeList, $followerList, $followingList, $settings);
//}




// user following list
function _following_list($uid = '') {
  //using user relation module api
  global $user;
  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';
  $output = '';
  $i = 0;
  $more = '';

  drupal_add_css(drupal_get_path('module', 'user_search') . '/style/style.css');

  $uid = $uid != '' ? $uid : $user->uid;
  $relationships = user_relationships_load($param = array("approved" => 1, "requester_id" => $uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1, 'limit' => '10'), $reset = FALSE);
  $requestcount = count($relationships);

  $following = theme('you_are_following', $relationships, $requestcount);
  return $following;
}

// user following counts
function _following_counts() {
  global $user;
  $following = user_relationships_load($param = array("approved" => 1, "requester_id" => $user->uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $followers = user_relationships_load($param = array("approved" => 1, "requestee_id" => $user->uid, 'rtid' => 1), $options = array('include_user_info' => 1, 'order' => 1), $reset = FALSE);
  $followingCount = count($following);
  $followersCount = count($followers);
  return theme('following_counts', $followingCount, $followersCount);
}