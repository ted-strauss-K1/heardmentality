<?php

/**
 * Implementation of hook_perm().
 */
function moderator_perm() {
    return array('Moderate User', 'Moderate Question', 'Edit Question', 'View Question');
}

/**
 * Implementation of hook_menu().
 */
function moderator_menu() {


    $mdtrest['moderator/issues'] = array(
        'title' => 'Moderator Issues',
        'page callback' => 'moderator_issues',
        'access arguments' => array('Moderate Question'),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );
    $mdtrest['moderator/user'] = array(
        'title' => 'Moderator User',
        'page callback' => 'moderator_user',
        'access arguments' => array('Moderate Question'),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );

    $mdtrest['moderator/issues/list/%'] = array(
        'title' => 'Moderator Issues',
        'page callback' => 'moderator_issues_list',
        'access arguments' => array('Moderate Question'),
        'page arguments' => array(3),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );
    $mdtrest['moderator/user/list/%'] = array(
        'title' => 'Moderator Issues',
        'page callback' => 'moderator_user_list',
        'access arguments' => array('Moderate Question'),
        'page arguments' => array(3),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );
    $mdtrest['moderator/issues/edit/%'] = array(
        'title' => 'Moderator Issues ',
        'page callback' => 'moderator_edit_issues',
        'access arguments' => array('Moderate Question'),
        'page arguments' => array(3),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );
    $mdtrest['moderator/ajax/%'] = array(
        'title' => 'Moderator ajax ',
        'page callback' => 'moderator_ajax',
        'access arguments' => array('Moderate Question'),
        'page arguments' => array(2),
        'type' => MENU_SUGGESTED_ITEM,
        'file' => 'moderator.pages.inc',
    );
    return $mdtrest;
}

function moderator_issues() {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;

    // drupal_set_html_head('<script src="http://ws.geonames.org/export/geonamesData.js" type="text/javascript"></script>');
    $inline = "      var admin='1';";

    drupal_add_js($inline, $type = 'inline');
    drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/moderator.js');
    drupal_add_js(drupal_get_path('module', 'question') . '/scripts/question.js');
    drupal_add_js(drupal_get_path('module', 'question') . '/scripts/qadmin.js');
    drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.js');
    drupal_add_css(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.css');
    $output = _moderator_left();
    $output.=' <div class="mod-midside-inner" id="mod-edit-issue">
            <div class="warning" >No Issue Selected !</div>
          <div class="clr"></div>
        </div>';
    return $output;
}

function moderator_user() {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;

    // drupal_set_html_head('<script src="http://ws.geonames.org/export/geonamesData.js" type="text/javascript"></script>');
    $inline = "      var admin='1';";

    drupal_add_js($inline, $type = 'inline');
    drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/moderator.js');
    drupal_add_js(drupal_get_path('module', 'question') . '/scripts/question.js');
    drupal_add_js(drupal_get_path('module', 'question') . '/scripts/qadmin.js');
    drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.js');
    drupal_add_css(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.css');
    $output = _moderator_user_left();
    $output.=' <div class="mod-midside-inner-p-outer">
        <div class="mod-midside-inner-p">
        <div class="mod-midside-inner-leftpart">
         <div class="warning" >No User Selected !</div>
        <div class="clr"></div>
        </div>
           <div class="mod-midside-inner-rightpart" id="mod-edit-issue">
 <div class="mod-midside-inner-p-outer">
          <div class="mod-t-outer">
               <div class="clr"></div>
        </div>

          </div>
          <div class="clr"></div>
        </div>
        </div>
          <div class="clr"></div>
</div>';
    return $output;
}

function _moderator_user_left() {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;

    $new = db_result(db_query("SELECT count(*) FROM {users} "));

     $query = "SELECT u.uid,u.name,up.real_name from {question_flags} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.nodeid AND f.type='user' AND u.status='1' group by f.nodeid ORDER BY u.name ASC";
    $flag = ExecuteQuery($query, 'norows');
    $output = '        <div class="commu">
        <form id="mod-user" name="mod-issue" method="POST" action="' . $gSitePath . 'moderator/ajax/user" >
          <div id="rotate">
            <ul id="tabmenu" class="mytabs">
              <li class="current"><a href="' . $gSitePath . 'moderator/user/list/new" title="User"><span>All Users (' . (!empty ($new)?$new:'0') . ')</span></a></li>
              <li class="ui-tabs-selected"><a href="' . $gSitePath . 'moderator/user/list/flag" title="Flagged User"><span>Flagged (' .(!empty ($flag)?$flag:'0'). ')</span></a></li>
                     </ul>

            <div id="rcontents" class="mytabs-container" style="height:auto;" >

              <div class="clr"></div>
            </div>

          </div>

  <div id="showbox" align="left" style="width:100%;display:none"><label for="reporttext"><b> Report Message :</b></label><br/><textarea name="reporttext" cols="55" row="17" id="reporttext"></textarea></div>
          <div class="mod-btn-outer">
      <input type="hidden" id="actions" name="actions" value="1"/>
            <div><input name="" type="button"  onclick="moderator_ignore_user(2);" class="mod-btn" value="Ignore"/></div>
          <div><input name="" type="button"  onclick="moderator_warn_user(1);" class="mod-btn" value="Warning"/></div>
          <div><input name="" type="button" onclick="moderator_reject_user(0);" class="mod-btn" value="Reject"/></div>
           <div> <small onclick="checkall(1);">Check All</small>&nbsp;<small onclick="checkall(0);">Uncheck All</small></div>
          <div class="clr"></div>
          </div>

</form>
        </div>';

    return $output;
}

function _moderator_left() {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;
    $query = "SELECT DISTINCT q.qid, q.question,(SELECT IFNULL( count( * ) , 0 ) FROM {question_cat_revision} WHERE uid = '$user->uid' and qid=q.qid) as tcnt FROM {question} AS q  having tcnt<1 ORDER BY q.qid DESC";
    $new = ExecuteQuery($query, 'norows');

    $query = "SELECT *,ifnull((select count(*) from {question_flags} where nodeid=q.qid AND type='question' group by nodeid),0) as fcnt  FROM {question_flags} as f  join {question} as q  on f.nodeid=q.qid where f.type='question' group by q.qid ORDER BY f.flag_date DESC";

    $flag = ExecuteQuery($query, 'norows');
    $output = '        <div class="commu">
        <form id="mod-issue" name="mod-issue" method="POST" action="' . $gSitePath . 'moderator/ajax/issue" >
          <div id="rotate">
            <ul id="maintabs" class="mytabs">
              <li class="current"><a href="' . $gSitePath . 'moderator/issues/list/new" title="New Issues"><span>New (' . $new . ')</span></a></li>
              <li class="ui-tabs-selected"><a href="' . $gSitePath . 'moderator/issues/list/flag" title="Flagged Issues"><span>Flagged (' . $flag . ')</span></a></li>
                     </ul>

            <div id="tabcontent" class="mytabs-container" style="height:auto;" >
             
              <div class="clr"></div>
            </div>

          </div>

  <div id="showbox" align="left" style="width:100%;display:none"><label for="reporttext"><b>Send Report Message :</b></label><br/><textarea name="reporttext" cols="55" row="17" id="reporttext"></textarea></div>
          <div class="mod-btn-outer">
      <input type="hidden" id="actions" name="actions" value="1"/>
    
          <div><input name="" type="submit"  class="mod-btn" value="Ignore"/></div>
          <div><input name="" type="button" onclick="moderator_reject(0);" class="mod-btn" value="Reject"/></div>
           <div> <small onclick="checkall(1);">Check All</small>&nbsp;<small onclick="checkall(0);">Uncheck All</small></div>
          <div class="clr"></div>
          </div>

</form>
        </div>';

    return $output;
}

function moderator_issues_list($type='') {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;
    //This is numbers per page
    $num_per_page = 12;

    $output = '';
    switch ($type) {
        case 'new':

            //actual query
            $query = "SELECT DISTINCT q.qid, q.question,(SELECT IFNULL( count( * ) , 0 ) FROM {question_cat_revision} WHERE uid = '$user->uid' and qid=q.qid) as tcnt FROM {question} AS q  HAVING tcnt<1 ORDER BY q.qid ASC";
            //  $query="SELECT * FROM {question} ";
            $sqlcnt = ExecuteQuery($query, 'norows');
            break;
        case 'flag':
            //actual query
            $query = "SELECT *,ifnull((select count(*) from {question_flags} where nodeid=q.qid AND type='question' group by nodeid),0) as fcnt  FROM {question_flags} as f  join {question} as q  on f.nodeid=q.qid where f.type='question' group by q.qid ORDER BY f.flag_date DESC";

            $sqlcnt = ExecuteQuery($query, 'norows');
            break;
        case 'user':
            $uid = arg(4);
            if (is_numeric($uid)) {
                $query = "select * from {question} q,{users} u where q.uid=u.uid AND u.uid='$uid' ";

                $sqlcnt = ExecuteQuery($query, 'norows');
            }
            break;
        default:

            echo '<div class="warning">No Action(s) Found!</div>';
            exit;
            break;
    }

    //pager_query function
    $rs = pager_query_new($query, $num_per_page, 0, $sqlcnt);
    $alt = 'm-even';
    $output.= '  <div class="mod-leftside-inner">';
    if ($sqlcnt) {
        while ($data = db_fetch_object($rs)) {

            if ($type == 'flag')
                $flag = ('' . $data->fcnt . '<a href="' . $gSitePath . 'moderator/ajax/flaglist/' . $data->qid . '" class="floatbox" title="Flag List" data-fb-options="type:ajax width:640 height:385" ><img src="' . $gSitePath . path_to_theme() . '/images/flag.png" align="absmiddle"/></a>');
            $chk = ('<div align="right"><input type="checkbox" class="check-me" name="qids[]" value="' . $data->qid . '" />&nbsp; ' . $flag . '</div> ');
            $nd = ('<div class="' . $alt . '" > ');
            $nd .= l($data->question, $gSitePath . 'moderator/issues/edit/' . $data->qid, array('attributes' => array('class' => 'issue-links')));
            $nd.=$chk;
            $nd .= ( '</div>');
            $output .= ( $nd);
            if ($alt == 'm-even')
                $alt = 'm-odd';
            else
                $alt='m-even';
        }
        $output .= theme('pager', array(), $num_per_page, 0);
    }else {
        echo '<div class="warning">No Issue(s) Found!</div>';
    }
    // print url($_GET['q'], array('absolute' => true));
    $uri = $base_root . request_uri();
    $output.=' <input name="mod-url" type="hidden" id="mod-url" value="' . $uri . '"/><input name="mod-type" type="hidden" id="mod-type" value="' . $type . '"/> <div class="clr"></div></div>';
    echo $output;
    exit;
}

function moderator_user_list($type='') {
    global $gSitePath, $user, $gDocPath, $base_root, $base_path;
    //This is numbers per page
    $num_per_page = 12;

    $output = '';
    switch ($type) {
        case 'new':

            //actual query
            $query = "SELECT u.uid,u.name,up.real_name from {users} as u,{user_profile} as up where u.uid=up.uid  ";
            $sqlcnt = db_result(db_query("SELECT count(*) FROM {users} "));
            //  $sqlcnt = ExecuteQuery($query, 'norows');
            break;
        case 'flag':
            //actual query
           $query = "SELECT u.uid,u.name,up.real_name from {question_flags} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.nodeid AND f.type='user' AND u.status='1' group by f.nodeid ORDER BY u.name ASC";

            $sqlcnt = ExecuteQuery($query, 'norows');
            break;
        default:

            echo '<div class="warning">No Action(s) Found!</div>';
            exit;
            break;
    }

    //pager_query function
    $rs = pager_query_new($query, $num_per_page, 0, $sqlcnt);
    $alt = 'm-even';
    $output.= '  <div class="mod-leftside-inner">';

    while ($data = db_fetch_object($rs)) {
        if ($type == 'flag')
            $flag = ('' . $data->fcnt . '<a href="' . $gSitePath . 'moderator/ajax/uflaglist/' . $data->uid . '" class="floatbox" title="Flag List" data-fb-options="type:ajax width:640 height:385" ><img src="' . $gSitePath . path_to_theme() . '/images/flag.png" align="absmiddle"/></a>');
        $chk = ('<div align="right"><input type="checkbox" class="check-me" name="qids[]" value="' . $data->uid . '" />&nbsp; ' . $flag . '</div> ');
        $nd = ('<div class="' . $alt . '" > ');
        $nd .= l($data->name, $gSitePath . 'moderator/issues/list/user/' . $data->uid, array('attributes' => array('class' => 'user-links', 'title' => $data->real_name)));
        $nd.=$chk;
        $nd .= ( '</div>');
        $output .= ( $nd);
        if ($alt == 'm-even')
            $alt = 'm-odd';
        else
            $alt='m-even';
    }
    $output .= theme('pager', array(), $num_per_page, 0);

    if (!$sqlcnt) {
        echo '<div class="warning">No User(s) Found!</div>';
    }
    // print url($_GET['q'], array('absolute' => true));
    $uri = $base_root . request_uri();
    $output.=' <input name="mod-url" type="hidden" id="mod-url" value="' . $uri . '"/><input name="mod-type" type="hidden" id="mod-type" value="' . $type . '"/> <div class="clr"></div></div>';
    echo $output;
    exit;
}

function moderator_edit_issues($qid='') {

    global $gSitePath, $user, $gDocPath, $base_root;

    if (!is_numeric($qid)) {
        return false;
    }



    $left_qry = "SELECT * FROM {question} as q left join {question_cat} as t on q.qid=t.qid where q.qid='" . $qid . "'";
    $result = db_query($left_qry);
    $quest = db_fetch_object($result);
    //country
    $result = db_query("select country from {question_location} where qid='$qid'}");
    $cont_array = array();
    while ($cont = db_fetch_array($result)) {
        array_push($cont_array, $cont['country']);
    }

    $result = geonames_query('countryinfo');
    $optionlist .= '<option value="">Select country</option>';
    foreach ($result->results as $country) {

        $set = '';
        if (in_array($country['countryname'], $cont_array)) {
            $set = 'SELECTED';
        }

        $optionlist .= sprintf('<option value="%s" %s>%s</option>', $country['countryname'], $set, $country['countryname']);
    }
    ///country ends state starts
    $result = db_query("select state,country from {question_location} where qid='$qid' AND state!=''");
    $state_array = array();
    while ($cont = db_fetch_array($result)) {
        array_push($state_array,'\''.$cont['state'].','.$cont['country'].'\'');
    }
    $setstate = implode(',', array_filter($state_array));
    $ret = '<select tabindex="18" multiple="multiple" style="width: 100px;"  onchange="get_city(this.value);" id="q_state" name="q_state[]"> <option value="">--States--</option>';
    $ret .= "</select>";

    /////////////state list end here //////////////////////////////
    /////////// city list start here/////////////////
    $result = db_query("select * from {question_location} where qid='$qid' AND city!=''}");
    $city_array = array();
    while ($cont = db_fetch_array($result)) {
        array_push($city_array, '\''.$cont['city'].','.$cont['state'].','.$cont['country'].'\'');
    }
    $setcity = implode(',', array_filter($city_array));

    $ret_city = '<select multiple="multiple" tabindex="19"   style="width: 100px;" id="q_city" name="q_city[]"> <option value="">--Cities--</option> ';
    $ret_city .= "<option value='-1'>Others</option>";
    $ret_city .= "</select>";
    //////////// city list end here //////////////
    ///////// Sub category values///////////////////////
    $qry_scat = "SELECT qc.scat from {question_cat} as qc where qc.qid='" . $qid . "' group by qc.scat";
    $result_scat = db_query($qry_scat);
    $scat = array();

    while ($quest_scat = db_fetch_object($result_scat)) {
        array_push($scat, $quest_scat->scat);
    }

    $escat1 = implode(",", array_filter($scat));
    ///////// Sub category values ends///////////////////////
    /////////load sub Sub category values///////////////////////
    $qry_sscat = "SELECT qc.sscat from {question_cat} as qc where qc.qid='" . $qid . "' group by qc.sscat";
    $result_sscat = db_query($qry_sscat);
    $sscat = array();

    while ($quest_sscat = db_fetch_object($result_sscat)) {
        array_push($sscat, $quest_sscat->sscat);
    }
    $esscat1 = implode(",", array_filter($sscat));
    ///////// load sub Sub category values ends///////////////////////

    $output .= '<script type="text/javascript">
                        var spath=\'' . $gSitePath . '\';
                    var setstate=[' . $setstate .'] ;
                        var setcity=[' . $setcity . '];
                            var setscat=\'' . $escat1 . '\';
                                var setsscat=\'' . $esscat1 . '\';
                            var admin=\'1\';
		</script>
			';

    $output .= '        
        <div id="err" class="clear"></div>
<div class="mod-t-outer" align="right">
           <b>* Required fields &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
            <div class="clr"></div>
          </div>
				<form id="mod-question" name="mod-question" action="' . $gSitePath . 'moderator/ajax/saveissue" method="post"    >
                               <input type="hidden" name="qid" value="' . $qid . '"/>
<div class="mod-t-outer">
            <div class="mod-t1">Question<span title="This field is required." class="form-required">*</span></div>
            <div class="mod-t2">
               <input type="text" name="q_quest" class="mod-select" tabindex="1" id="q_quest" value="' . $quest->question . '" />
            </div>
            <div class="clr"></div>
          </div>
          <div class="mod-t-outer">
            <div class="mod-t1">Context</div>
            <div class="mod-t2">
             <textarea   tabindex="2" class="mod-select" name="q_context" id="q_context" >' . $quest->context . '</textarea>
            </div>
            <div class="clr"></div>
          </div>
            <div class="clr"></div>
            <div class="mod-t-outer">
            <div class="mod-t1">&nbsp;</div>
            <div class="mod-t5">
              &nbsp;
            </div>';
    $Spec_query = db_query("SELECT spec_name,spec_min_range,spec_max_range FROM political_spectrum");
    while ($Spec_result = db_fetch_object($Spec_query)) {
        $output .='<div class="mod-t6">' . $Spec_result->spec_name . '  </div>';
    }

    $output.='
            <div class="clr"></div>
          </div>
          <div class="clr"></div>
        <div class="clr"></div>

';


    $query = "SELECT * FROM {possible_answer} where qid='" . $qid . "' ";
    $ans = ExecuteQuery($query, "select");
    $i = 1;
    $tab = 3;
    $answer_count = 1;
    foreach ($ans as $array) {

        $output .= '<div class="mod-t-outer">
            <div class="mod-t1">Answer <b>*</b></div>
            <div class="mod-t5">
                  <input  tabindex="' . $tab++ . '" name="q_ans' . $i . '" type="text" id="q_ans' . $i . '" class="mod-select3" value="' . $array['answer'] . '" />&nbsp;<input type="hidden" name="aid' . $i . '" value="' . $array['paid'] . '">
                </div>
          ';
        $i++;
        /* META TAG OPTION GENERATION */

        $row_count = 1;
        $Spec_query1 = db_query("SELECT political_spec_id,spec_name,spec_min_range,spec_max_range FROM political_spectrum");
        $radio_output = '';
        while ($Spec_result1 = db_fetch_object($Spec_query1)) {
            $answer_id = $array['paid'];
            $option = '';
            $option.='<option  value="0">-</option>';
            for ($spec_count = $Spec_result1->spec_min_range; $spec_count <= $Spec_result1->spec_max_range; $spec_count++) {
                /* PRE SELECT OPTION VALUE */
                $fetch_exist = db_result(db_query("select value from {possible_answer_spectrum} where qid='$qid' and possible_ans_id='$answer_id' and
					political_spec_id='$Spec_result1->political_spec_id'"));
                /* PRE SELECT OPTION VALUE */

                $selected = '';
                if ($fetch_exist == $spec_count)
                    $selected = 'selected="selected"';

                $option.='<option ' . $selected . ' value=' . $spec_count . '>' . $spec_count . '</option>';
            }
            $radio_output .='  <div class="mod-t6"><select style="width:50px" name="sel_' . $answer_id . '_' . $Spec_result1->political_spec_id . '_' . $row_count . '" id="sel_' . $answer_id . '_' . $row_count . '">' . $option . '</select>    </div>';
            $row_count++;
        }
        $output .=$radio_output;
        /* META TAG OPTION GENERATION */
        $output.='            <div class="clr"></div>
          </div>
          <div class="clr"></div>';
    }
    $output.='';
    $output .= '<div class="mod-t-outer" id="add_more"></div><div align="center" id="del_ans" style="display:none;"><small><a href="javascript:void(0);" class="mod-t-outer"  tabindex="88" onclick="del_ans();">[Remove]</a></small><br/></div>
   

            <div class="clr"></div>
          <div class="mod-t-outer">
            <div class="mod-t1">&nbsp;</div>
            <div class="mod-t5">
              &nbsp;
            </div>
            <div class="mod-t5">
             <strong> Categories</strong>
            </div>
            <div class="mod-t5">
             &nbsp;
            </div>
            <div class="mod-t5">
            &nbsp;
            </div>
            <div class="clr"></div>
          </div>
          <div class="clr"></div>
';

    // $output .= $radio_output . '
    //	</table>
    //</td></tr>
    //<!--POSSIBLE META ANSWER-->';
    $output.='   <div class="mod-t-outer">
            <div class="mod-t1">&nbsp;</div>
            <div class="mod-t5">
        <input type="button" name="Add" class="mod-btn" tabindex="13" id="Add" onclick="add_ans();" value="Add Answer" /> <input type="hidden" name="ans_cnt" id="ans_cnt" value="' . count($ans) . '">
            </div>
            <div class="mod-t5">
  <select  tabindex="14" name="q_cat[]" id="q_cat" multiple="multiple"   class="mod-txtarea" onchange="get_subcat(\'q_cat\',\'chg_scat\',1,this.value);" >
        <option value="">Select Category</option>';
    $client_select = db_query("SELECT cat_id,cat_name FROM {category} where parent_id='0'");

    $qry_cat = "SELECT qc.cat from {question_cat} as qc where qc.qid='" . $qid . "' group by qc.cat";
    $result_cat = db_query($qry_cat);
    $cat = array();

    while ($quest_cat = db_fetch_object($result_cat)) {
        $cat[] = $quest_cat->cat;
    }
    $ecat1 = explode(",", $cat);
    while ($list = db_fetch_object($client_select)) {

        if (in_array($list->cat_id, $cat)) {
            $sel = 'SELECTED="SELECTED"';
        } else {
            $sel = '';
        }
        $output .= '<option value="' . $list->cat_id . '" ' . $sel . '>' . stripslashes($list->cat_name) . '</option>';
    }

    $output .= '</select>
         </div>        <input type="hidden" id="cat1" name="cat1" value="' . $ecat1 . '">&nbsp;
            <div class="mod-t5">

        <div id="chg_scat"><select class="mod-txtarea"  tabindex="15" name="q_scat[]" onchange="get_subcat(q_scat,\'chg_sscat\',2);" id="q_scat"   size="5">
        <option value="">Select Sub Category</option>';
    $output .= '</select></div></div>
   <div class="mod-t5"><input type="hidden"  id="cat2" name="cat2" value="' . $escat1 . '">
   <div id="chg_sscat"><select class="mod-txtarea"  tabindex="16" name="q_sscat[]" onchange="get_subcat(q_sscat,\'chg_sscat\',3);" id="q_sscat"   size="5">
   <option value="">Select Sub Sub Category</option>';
    $output .= '</select></div> </div><input type="hidden"  id="cat3" name="cat3" value="' . $esscat1 . '">
        <div class="clr"></div>
          </div>
               <div class="clr"></div>
          <div class="mod-t-outer">
            <div class="mod-t1">&nbsp;</div>
            <div class="mod-t5">
              &nbsp;
            </div>
            <div class="mod-t5">
             <strong> Location</strong>
            </div>
            <div class="mod-t5">
             &nbsp;
            </div>
            <div class="mod-t5">
            &nbsp;
            </div>
            <div class="clr"></div>
          </div>
                <div class="clr"></div>
	 <div class="mod-t-outer">
           <div class="mod-t1">&nbsp;</div>
            <div class="mod-t5">
    <input type="submit" name="update" class="mod-btn" tabindex="21" id="save" value="Update" />
      </div>
            <div class="mod-t5">
<select name="q_country[]"  style="width: 100px;" multiple="multiple" tabindex="17" onchange="get_state(this.value);" id="q_country">' . $optionlist . '</select>
    </div>
	 <div class="mod-t5"><div id="chg_state">' . $ret . '</div>  </div>
     <div class="mod-t5"><div id="chg_city">' . $ret_city . '</div> </div>
                  <div class="clr"></div>
          </div>

';

    //Moderator Revision
    $result = db_query("select u.uid,u.name,qr.updated from {question_cat_revision} as qr join {users} as u on u.uid=qr.uid where qid='$qid'");
    $output.='<div class="mod-t-outer">
        <strong><a data-fb-options="type:ajax width:640 height:385" title="Dupe List" href="' . $gSitePath . 'moderator/ajax/dupelist/' . $qid . '" class="floatbox">Duped Issues </a></strong>
           </div>';
    $output.='<div class="mod-t-outer">
        <strong>Previous Updated Moderators</strong>
           </div>';
    while ($coupon = db_fetch_object($result)) {
        $rows[] = array(
            array('data' => l($coupon->name, $gSitePath . 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
            array('data' => ago($coupon->updated))
        );
    }
    $head = array(
        array('data' => t('Moderator')),
        array('data' => t('Updated On ')),
    );
    //print drupal_render( );
    $output .= theme_table($head, $rows, array('style' => 'width: 100%'));
    if (empty($rows))
        $output.='<div class="mod-t-outer">
        <strong>No One Updated Yet !</strong>
           </div>';
    // $selmlist = "select * from qtag as a, tagging as b where a.qid='$qid' and a.tag_id=b.tid ";
    // $mysqlfet = db_query($selmlist);
    //$output .= '<tr><td colspan="6">'.get_tagging_edit($qid).'</td></tr>';


    $output .= '</form>
          <div class="clr"></div></div>
        <div class="clr"></div>


';
    if (isAjax ())
        echo $output;
    else
        return $output;
}

//Moderator ajax works goes here

function moderator_ajax($action='') {

    global $gSitePath, $user, $gDocPath, $base_root;

    switch ($action) {
        case 'saveissue':

            $content = moderator_save_issue($_REQUEST);
            extract($content);
            break;
        case 'state':
            $explode = explode(',', $_REQUEST['ids']);
            $ret = '<select tabindex="18"  style="width: 100px;" multiple="multiple" id="q_state" name="q_state[]"> <option value="">--States--</option>';
            $results = array();
            if (count($explode) > 0) {
                foreach ($explode as $country) {

                    $geoid = db_result(db_query("SELECT geonameid FROM {geonames_countryinfo} where name LIKE '%" . $country . "%' limit 0,1"));

                    $query = array('geonameid' => $geoid);
                    $results = geonames_query('children', $query);
                    foreach ($results->results as $state) {
                        $set = '';
                       
                        if (strpos(strtolower($setstate), strtolower($state['name']))) {
                            $set = 'SELECTED=SELECTED';
                        }
                        $ret .= sprintf('<option value="%s,%s" %s >%s</option>', $state['geonameid'],$state['countrycode'],$set, $state['name']);
                    }
                }

                $ret .= "</select>";
                $err = false;
                $msg = 'No action found!';
                $output = $ret;
            } else {
                $ret .= "</select>";
                $err = true;
                $msg = 'No State found!';
                $output = $ret;
            }
            break;
        case 'city':
           
            $ret = '<select  tabindex="19"  style="width: 100px;" multiple="multiple"  id="q_city" name="q_city[]" > <option value="">--Cities--</option> ';
            $results = array();
            if (count($_REQUEST['ids']) > 0) {
                foreach ($_REQUEST['ids'] as $code) {
                 $explode = explode(',', $code);
                    $query = array('geonameid' => $explode[0]);
                    $result = geonames_query('children', $query);
                    foreach ($result->results as $state) {

                        $ret .= sprintf('<option value="%s,%s,%s">%s</option>', $state['geonameid'],$explode[0],$explode[1], $state['name']);
                    }
                }
                $ret .= "<option value='-1'>Others</option>";
                $ret .= "</select>";
                $err = false;
                $msg = 'No action found!';
                $output = $ret;
            } else {
                $ret .= "</select>";
                $err = true;
                $msg = 'No City found!';
                $output = $ret;
            }
            break;
        case 'issue':

            $modtype = check_plain($_REQUEST['mod-type']);

            switch ($modtype) {
                case 'new':
                    $msg = moderator_new_save($_REQUEST['qids']);
                    $err = false;
                    $output = '';
                    break;
                case 'flag':
                    $msg = moderator_flag_save();
                    $err = false;
                    $output = '';

                    break;
                default:
                    $err = true;
                    $msg = 'No action found!';
                    $output = '';
                    break;
            }

            break;
        case 'flaglist':

            $head = array(
                array('data' => t('Flag Type')),
                array('data' => t('User Flagged')),
                array('data' => t('Date ')),
            );

            $sql = "SELECT f.abuse_type,u.name,f.flag_date FROM {question_flags} as f,{users} as u where f.uid=u.uid AND nodeid='" . arg(3) . "' AND type='question' ";

            $result = db_query($sql);

            while ($coupon = db_fetch_object($result)) {
                $rows[] = array(
                    array('data' => $coupon->abuse_type),
                    array('data' => l($coupon->name, $gSitePath . 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
                    array('data' => ago($coupon->flag_date))
                );
            }

            //print drupal_render( );
            $html = theme_table($head, $rows, array('style' => 'width: 100%'));
            if (isAjax ())
                print $html;
            exit;
            break;
        case 'uflaglist':
            $head = array(
                array('data' => t('Flag Type')),
                array('data' => t('User Flagged')),
                array('data' => t('Date ')),
            );

            $sql = "SELECT f.abuse_type,u.name,f.flag_date FROM {question_flags} as f,{users} as u where f.uid=u.uid AND nodeid='" . arg(3) . "' AND type='user' ";

            $result = db_query($sql);

            while ($coupon = db_fetch_object($result)) {
                $rows[] = array(
                    array('data' => $coupon->abuse_type),
                    array('data' => l($coupon->name, $gSitePath . 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
                    array('data' => ago($coupon->flag_date))
                );
            }

            //print drupal_render( );
            $html = theme_table($head, $rows, array('style' => 'width: 100%'));
            if (isAjax ())
                print $html;
            exit;
            break;
        case 'dupelist':

            $query = "select * from {question}  where qid='" . arg(3) . "'";
            $ans = ExecuteQuery($query, "select");

            $words = explode(" ", $ans[0]['question']);

            $words = array_filter($words, 'word_array_filter');
            $words = array_filter($words);
            $query = "SELECT q.question,q.context,u.name,q.date_added,q.url,q.qid FROM {question} as q,{users} as u WHERE q.uid=u.uid AND q.qid!='" . arg(3) . "' ";
            for ($i = 0; $i < count($words); $i++) {
                $samples = " " . $words[$i] . "  ";
                //echo $samples;
                // $query = "SELECT * FROM question WHERE question LIKE ('$words[$i]%') or question LIKE ('%$words[$i]%') or  context LIKE ('%$words[$i]%') and status='0' ";
                //AND question LIKE '%hi%' and question LIKE '%issue%' and status='1'"
                if (!empty($words[$i]))
                    $query .= " AND q.question LIKE CONVERT(_utf8 '%%%s%%' USING latin1 ) COLLATE latin1_swedish_ci";
            }


            $result = db_query($query, $words);

            while ($coupon = db_fetch_object($result)) {
                $rows[] = array(
                    array('data' => l($coupon->question, $gSitePath . $coupon->url, array('attributes' => array('title' => t($coupon->context), 'class' => 'floatbox')))),
                    array('data' => l($coupon->name, $gSitePath . 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
                    array('data' => ago($coupon->date_added)),
                    array('data' => '<input type="radio" checked="checked" name="dupeq[]" value="' . $coupon->qid . '"/>'),
                );
            }
            $head = array(
                array('data' => t('Issues')),
                array('data' => t('User Posted ')),
                array('data' => t(' Posted Date')),
                array('data' => t('Set as dupe')),
            );
            //print drupal_render( );
            $html.='<form name="qdupeform" id="qdupeform" method="post" action="">';
            $html.= theme_table($head, $rows, array('style' => 'width: 100%'));
            $html.='<input type="submit" value="Duplicate" /><input type="hidden" name="issue" value="' . arg(3) . '"/></form>';

            if (empty($rows))
                $html = '<div class="warning">No Dupe Issues Found!</div>';

            if (isAjax ())
                print $html;
            exit;
            break;

        case 'mergeissue':

            if (is_numeric(arg(3)) && is_numeric(arg(4))) {


                $html = drupal_get_form('merge_dupeform', arg(3), arg(4));
            } else {

                $html = '<div class="warning">Sorry Required Data Missing Kindly reload the page !</div>';
            }
            //if (isAjax ())
            print $html;
            exit;
        case 'mergesave':

            $merge = dupe_merging_process($_REQUEST);
            $err = $merge['err'];
            $msg = $merge['msg'];
            $output = $merge['output'];

            break;
        case 'user':
            $modtype = check_plain($_REQUEST['mod-type']);

            switch ($modtype) {
                case 'new':
                    $msg = moderater_user_mail($_REQUEST['qids'], 'warning',$_REQUEST['actions']);
                    $err = false;
                    $output = '';
                    break;
                case 'flag':
                    $msg = moderater_user_mail($_REQUEST['qids'], 'reject',$_REQUEST['actions']);
                    $err = false;
                    $output = '';

                    break;
                default:
                    $err = true;
                    $msg = 'No action found!';
                    $output = '';
                    break;
            }

            $output = '';


            break;
        default:
            $err = true;
            $msg = 'No action found!';
            $output = '';
            break;
    }

    if (empty($msg))
        $msg = 'No Action Found!';
    if (isAjax ())
        print json_encode(array('err' => $err, 'msg' => $msg, 'content' => $output));
    else
        return 'No Action Found!';
}

function word_array_filter($word='') {

    $ret = true;
    if (empty($word)) {
        $ret = false;
    } elseif (strlen($word) < 3) {
        $ret = false;
    }
    return $ret;
}

function merge_dupeform($form_state, $qid, $dupeid) {
    // Access log settings:
    global $gSitePath, $user, $gDocPath, $base_root;
    $options = array('1' => t('Enabled'), '0' => t('Disabled'));
    $form['merge'] = array(
        '#type' => 'fieldset',
        '#title' => t('Merge the Dupe Issue'),
        '#tree' => TRUE,
    );
    $query = "select * from {possible_answer} where qid='$qid'";
    $loop = ExecuteQuery($query, 'select');
    $dupe = "select * from {possible_answer} where qid='$dupeid'";
    $dupelist = db_query($dupe);
    $row = array();
    $row['new'] = 'Mark as new';
    while ($gen = db_fetch_object($dupelist)) {
        $row[$gen->paid] = $gen->answer;
    }


    foreach ($loop as $main) {
        $period =
                $form['merge'][$main['paid']] = array(
            '#type' => 'select',
            '#title' => t($main['answer']),
            '#default_value' => variable_get('timer', 259200),
            '#options' => $row,
            '#description' => t('Possible answers'),
        );
    }

    $form['qid'] = array('#type' => 'hidden', '#value' => $qid);
    $form['dupeid'] = array('#type' => 'hidden', '#value' => $dupeid);
    //$form['#action'] =$gSitePath.'moderator/ajax/mergesave';
    $form['submit'] = array('#type' => 'submit', '#value' => t('Merge'));
    return $form;
}

function merge_dupeform_validate(&$form, $form_state, $form_id) {
    global $gSitePath, $user, $gDocPath, $base_root;
//validate form heere
}

function merge_dupeform_submit(&$form, $form_state, $form_id) {
    global $gSitePath, $user, $gDocPath, $base_root;

    //print_r($form);
    // possible answers merging process
    //  foreach ($form['#post']['merge'] as $key => $value) {
    //  echo "Key: $key; Value: $value<br />\n";
    // $query="update ";
    //}
    $qid = $form['#post']['qid'];
    $dupeid = $form['#post']['dupeid'];
    if (is_numeric($qid) && is_numeric($dupeid) && !is_null($qid) && !is_null($dupeid)) {
        $sel_dupe_answers = "select * from {possible_answer} where qid='$qid' ";
        $result = ExecuteQuery($sel_dupe_answers, 'select');
        //send notification mail before update the vote table
        question_merge_mail($qid, $dupeid);

        foreach ($result as $dalist) {

            $paid = $form['#post']['merge'][$dalist['paid']];


            if (is_numeric($paid)) {
                db_query("update {possible_answer_vote} set qid='$qid',panswer_id='" . $dalist['paid'] . "' where qid='$dupeid' AND panswer_id='$paid'");
                db_query("delete from {possible_answer} where qid='$dupeid' AND paid='$paid'");
                //   db_query("update {possible_answer_spectrum} set qid='$qid',possible_ans_id='" . $dalist['paid'] . "' where qid='$dupeid' AND possible_ans_id='$paid' ");
                //debate options merging
                //    db_query("update {debate_options} set paid='" . $dalist['paid'] . "' where paid='$paid'");
                // db_query("update {resource_options} set paid='" . $dalist['paid'] . "' where paid='$paid'");
            }
        }

        //merge remaining answers in answer table
        db_query("update {possible_answer} set qid='$qid' where qid='$dupeid'");
        db_query("update {possible_answer_vote} set qid='$qid' where qid='$dupeid'");
        db_query("update {possible_answer_spectrum} set qid='$qid' where qid='$dupeid'");
        //merge suggest answers
        db_query("update {suggest_answer} set qid='$qid' where qid='$dupeid'");
        db_query("update {suggest_answer_vote} set qid='$qid' where qid='$dupeid'");

        //Sections Merging process
        $sections = "select * from {question_cat} where qid IN ($qid,$dupeid)";
        $sresult = ExecuteQuery($sections, 'select');
        $cat = array();
        $scat = array();
        $sscat = array();
        foreach ($sresult as $slist) {
            array_push($cat, $slist['cat']);
            array_push($scat, $slist['scat']);
            array_push($sscat, $slist['sscat']);
        }
        $q_cat = array_unique(array_filter($cat));
        $q_scat = array_unique(array_filter($scat));
        $q_sscat = array_unique(array_filter($sscat));

        //clear all sections for 2 issues
        db_query("delete from {question_cat} where qid IN ($qid,$dupeid)");

        // insert new filtered sections
        if (!empty($q_cat)) {
            $cat1 = $q_cat;
            foreach ($cat1 as $ins1) {

                db_query("insert into {question_cat} set qid='$qid',uid='$user->uid',cat='$ins1'");
            }
            db_query("insert into {question_cat_revision} set qid='$qid',uid='$user->uid',cat='" . $ins1[0] . "'");
        }

        /// category 2nd level
        if (!empty($q_scat)) {
            $cat2 = $q_scat;
            foreach ($cat2 as $ins2) {

                $fetch = load_parent_cat($ins2, 2);
                $chk_exsit = db_result(db_query("select count(*) from {question_cat} where qid='$qid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='0' "));
                if ($chk_exsit > 0) {
                    db_query("update {question_cat} set scat='$ins2',uid='$user->uid' where qid='$qid' AND cat='" . $fetch[0]['lev1'] . "'");
                } else {
                    db_query("insert into {question_cat} set qid='$qid',uid='$user->uid',cat='" . $fetch[0]['lev1'] . "',scat='$ins2'");
                }
            }
        }
        ///category 3rd level
        if (!empty($q_sscat)) {
            $cat3 = $q_sscat;
            foreach ($cat3 as $ins3) {
                $fetch = load_parent_cat($ins3, 3);
                $chk_exsit = db_result(db_query("select count(*) from {question_cat} where qid='$qid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='" . $fetch[0]['lev2'] . "' AND sscat='0'"));
                if ($chk_exsit > 0) {
                    db_query("update {question_cat} set sscat='$ins3',uid='$user->uid'  where qid='$qid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='" . $fetch[0]['lev2'] . "'");
                } else {
                    db_query("insert into {question_cat} set qid='$qid',uid='$user->uid',cat='" . $fetch[0]['lev1'] . "',scat='" . $fetch[0]['lev2'] . "',sscat='$ins3'");
                }
            }
        }
        /// Sections merges over
        db_query("delete from {question_cat_revision} where qid='$dupeid'");
        // merge url alias
        $details = load_question($qid);
        $url = 'qlite/view/' . $dupeid;
        $dst = $details['url'];
        db_query("update {url_alias} set dst='" . $dst . "' where src='" . $url . "'");

        //Loaction Merge
        db_query("update {question_location} set qid='$qid' where qid='$dupeid'");

        //debate resource and their neutral, answers options
        db_query("update {debate} set qid='$qid' where qid='$dupeid'");
        db_query("update {resource} set qid='$qid' where qid='$dupeid'");


        //Guru points table
        db_query("update {tbl_user_points} set qid='$qid' where qid='$dupeid'");

        //badges table
        db_query("update {user_badges} set qid='$qid' where qid='$dupeid'");
        $dupe = load_question($dupeid);
        //delete the dupe Question
        db_query("delete from  {question} where qid='$dupeid'");
        watchdog('Dupe Issue Merged', 'Dupe Issue [@dupe] merged to [ @issue] By Moderator', array('@dupe' => $dupe['question'], '@issue' => $details['question'], '@username' => $user->name));

        print drupal_json(array('err' => false, 'msg' => 'Successfully Merged the Issues', 'content' => '', 'qid' => $qid));
        // send mail status as edited for final issue
       // question_edited_mail($qid);
    } else {

        watchdog('Dupe Issue Merged Error ', 'Dupe Issue @dupe merged to  @issue By Moderator ', array('@dupe' => $dupe['question'], '@issue' => $details['question'], '@username' => $user->name), WATCHDOG_ERROR);

        print drupal_json(array('err' => true, 'msg' => 'Sorry Merge Process Error Please Redo the Process Again', 'content' => ''));
    }
}

function ago($timestamp) {
    $difference = time() - strtotime($timestamp);
    $periods = array("second", "minute", "hour", "day", "week", "month", "years", "decade");
    $lengths = array("60", "60", "24", "7", "4.35", "12", "10");
    for ($j = 0; $difference >= $lengths[$j]; $j++)
        $difference /= $lengths[$j];
    $difference = round($difference);
    if ($difference != 1)
        $periods[$j].= "s";
    $text = "$difference $periods[$j] ago";
    return $text;
}

function moderator_save_issue($array) {

    global $gSitePath, $user, $gDocPath, $base_root;
    extract($array);
    $output = '';
    $nid = $qid;
    /* SAVING META INFORMATION */
    $query = "SELECT * FROM {possible_answer} where qid='" . $nid . "' ";
    $ans = ExecuteQuery($query, "select");
    $chk_exsit = db_result(db_query("select count(*) from {possible_answer_spectrum} where qid='$nid'"));
    if ($chk_exsit > 0) {
        $Spec_query2 = db_query("delete * from {possible_answer_spectrum} where qid='$nid'");
    }
    foreach ($ans as $ans_array) {
        $row_count = 1;
        $Spec_query2 = db_query("SELECT political_spec_id FROM {political_spectrum}");
        while ($Spec_result2 = db_fetch_object($Spec_query2)) {
            $radio_output = "sel_" . $ans_array['paid'] . "_" . $Spec_result2->political_spec_id . "_" . $row_count;
            $posted_rating = $array["$radio_output"];
            $ans_id = $ans_array['paid'];
            $political_id = $Spec_result2->political_spec_id;
            /* echo '<pre>';
              echo $posted_rating.'-';
              echo $Spec_result2->political_spec_id.'<br>'; */
            $insert_query = db_query("insert into possible_answer_spectrum set qid= '$nid' , possible_ans_id='$ans_id' , political_spec_id='$political_id',value='$posted_rating'");
            $row_count++;
        }
    }
    /* SAVING META INFORMATION */



    if (!empty($q_quest) && !empty($q_ans1) && !empty($q_ans2) && !empty($q_cat)) {

          $result = db_query("update {question} set question='".check_plain($q_quest)."',context='".check_plain($q_context)."' where qid='" . $nid . "' ");

        $del_result = db_query("delete from {question_cat} where qid='" . $nid . "'");

        // add scrutineer badge
        $sql = "SELECT fid FROM {question_flags} WHERE nodeid = '$nid'";
        $flagids = ExecuteQuery($sql, "select");
        foreach ($flagids as $flagid) {
            $fids[] = $flagid['fid'];
        }
        update_flag_badges($fids);
///  category  starts & 1st level
        $fetch = array();
        if (!empty($q_cat)) {
            $cat1 = $q_cat;
            foreach ($cat1 as $ins1) {
                
                db_query("insert into {question_cat} set qid='$nid',uid='$user->uid',cat='$ins1'");
            }
            db_query("insert into {question_cat_revision} set qid='$nid',uid='$user->uid',cat='" . $ins1[0] . "'");
        }

        /// category 2nd level
        if (!empty($q_scat)) {
            $cat2 = $q_scat;
            foreach ($cat2 as $ins2) {

                $fetch = load_parent_cat($ins2, 2);
                $chk_exsit = db_result(db_query("select count(*) from {question_cat} where qid='$nid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='0' "));
                if ($chk_exsit > 0) {
                    db_query("update {question_cat} set scat='$ins2',uid='$user->uid' where qid='$nid' AND cat='" . $fetch[0]['lev1'] . "'");
                } else {
                    db_query("insert into {question_cat} set qid='$nid',uid='$user->uid',cat='" . $fetch[0]['lev1'] . "',scat='$ins2'");
                }
            }
        }
        ///category 3rd level
        if (!empty($q_sscat)) {
            $cat3 = $q_sscat;
            foreach ($cat3 as $ins3) {
                $fetch = load_parent_cat($ins3, 3);
                $chk_exsit = db_result(db_query("select count(*) from {question_cat} where qid='$nid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='" . $fetch[0]['lev2'] . "' AND sscat='0'"));
                if ($chk_exsit > 0) {
                    db_query("update {question_cat} set sscat='$ins3',uid='$user->uid'  where qid='$nid' AND cat='" . $fetch[0]['lev1'] . "' AND scat='" . $fetch[0]['lev2'] . "'");
                } else {
                    db_query("insert into {question_cat} set qid='$nid',uid='$user->uid',cat='" . $fetch[0]['lev1'] . "',scat='" . $fetch[0]['lev2'] . "',sscat='$ins3'");
                }
            }
        }

        for ($i = 1; $i <= $ans_cnt; $i++) {
            $name = "q_ans" . $i;
            $aid = "aid" . $i;
            if (!empty($$name)) {

                if (!empty($$aid)) {
                    $result = db_query("UPDATE {possible_answer} set answer='%s' where paid='%d' AND qid='%d'", check_plain($$name), $$aid, $nid);
                } else {
                    // echo kkkkkkkkkk;
                    //	echo "INSERT INTO {possible_answer} (qid,answer) VALUES (%d,'%s')", $nid, $$name;
                    $result = db_query("INSERT INTO {possible_answer} (qid,answer) VALUES (%d,'%s')", $nid, check_plain($$name));
                }
            }
        }

        //multi location
        $del_result = db_query("delete from {question_location} where qid='" . $qid . "'");
        foreach ($q_country as $country) {

            db_query("insert into {question_location} set uid='%d',qid='%d',country='%s'", $user->uid, $qid, $country);
        }
        foreach ($q_state as $state) {
            $stat_cont=explode(',',$state);
            db_query("insert into {question_location} set uid='%d',qid='%d',state='%s',country='%s'", $user->uid, $qid, $stat_cont[0],$stat_cont[1]);
        }
        foreach ($q_city as $city) {
              $city_stat_cont=explode(',',$city);
            db_query("insert into {question_location} set uid='%d',qid='%d',city='%s',state='%s',country='%s'", $user->uid, $qid, $city_stat_cont[0],$city_stat_cont[1],$city_stat_cont[2]);
        }


        //location

        $output['msg'] = 'Thank you, Question updated successfully!';
        $output['err'] = false;

        //	print_r($result);
        question_edited_mail($nid);
        question_edited_mail_voters($nid);
        question_edited_mail_suggest($nid);
        //  drupal_goto("admin/moderatequestion");
    } else {


        $output['msg'] = 'Sorry, Some of the (*) required fields are Empty!';
        $output['err'] = true;
    }

    return $output;
}

//Badges call back
function update_flag_badges($qids) {
    foreach ($qids as $qid) {
        $sql = "SELECT uid,nodeid FROM (question_flags) WHERE nodeid = '$qid' AND type = 'question'";
        $users = ExecuteQuery($sql, 'select');

        foreach ($users as $user) {
            $uid = $user['uid'];
            $qid = $user['nodeid'];
            scrutineer($uid, $qid);
        }
    }
}

function moderator_flag_save() {

    global $gSitePath, $user, $gDocPath, $base_root;


    if ($_REQUEST['actions']) {
        $qids = implode(',', $_REQUEST['qids']);
        question_flagged_mail($qids);
        $query = db_query("delete from {question_flags} where type='question' AND nodeid in ($qids)");
        $msg = '<div class="success">Question updated successfully!</div>';
    } else {
        /*
          $query = "select nodeid from {question_flags} where fid in ($qids)";
          $ids = ExecuteQuery($query, "select");
          $target = array();

          foreach ($ids as $value) {
          $target = $value;
          }

          $target = array_unique($target);
          $qids = implode(',', $target);

         */
        $qids = $_REQUEST['qids'];
        $reporttext = check_plain($_REQUEST['reporttext']);
        foreach ($qids as $id) {
            question_flagged_ignore_mail($id, $reporttext);
        }

        // badges award "scruitneer"
        update_flag_badges($_REQUEST['qids']);

        //delete from db
        $qids = implode(',', $_REQUEST['qids']);
        delete_issues($qids);


        $msg = '<div class="success">Question updated successfully!</div>';
    }
    return $msg;
}

function question_flagged_ignore_mail($qaid, $reporttext) {
    global $gSitePath, $user, $gDocPath, $base_root;

    $from = variable_get('site_mail');
    $subject_proj = "Heardmentality Issue Has Been Rejected";
    // $delmsg = 'Has been Deleted By Headmentality admin';
    $qry = "select u.mail,q.question,u.name,q.url  from {question} as q left join {users} as u on u.uid=q.uid where q.qid='$qaid' ";

    $query = db_query($qry);
    $det = db_fetch_object($query);

    $to = $det->mail;
    //$msg = '<br/>Question : '.$det->question.' '.$delmsg.'<br/>';

    $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
    $rs_mgmt = db_query($sel_user_cmt);
    $list_content = db_fetch_object($rs_mgmt);

    $contentm = str_replace("#uname#", $det->name, $list_content->content);
    // $contentm = str_replace("#anothername#",$user->name, $contentm);
    $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
    //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
    $contentm = str_replace("#content#", " Question Rejected By Moderator due to <br/><b>$reporttext</b>", $contentm);
    //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
    $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
    db_query($ins_qry, $from, $from, $to, $subject_proj, $contentm);

    /*  if (! empty($to)) {
      $mail_suc = htmlmail($to, $subject, $msg, $from, '');
      } */
    return true;
}

function question_flagged_mail($qaid) {
    global $gSitePath, $user, $gDocPath, $base_root;

    $from = variable_get('site_mail');
    $subject_proj = "Heardmentality Question Has Been Ignore";
    // $delmsg = 'Has been Deleted By Headmentality admin';
    $qry = "select u.mail,q.question,u.name,q.url  from {question} as q left join {users} as u on u.uid=q.uid where q.qid='$qaid' ";

    $query = db_query($qry);
    $det = db_fetch_object($query);

    $to = $det->mail;
    //$msg = '<br/>Question : '.$det->question.' '.$delmsg.'<br/>';

    $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
    $rs_mgmt = db_query($sel_user_cmt);
    $list_content = db_fetch_object($rs_mgmt);

    $contentm = str_replace("#uname#", $det->name, $list_content->content);
    // $contentm = str_replace("#anothername#",$user->name, $contentm);
    $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
    //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
    $contentm = str_replace("#content#", 'Issue Ignore By Moderator which are flagged by site users', $contentm);
    //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
    $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
    db_query($ins_qry, $from, $from, $to, $subject, $contentm);
    /*  if (! empty($to)) {
      $mail_suc = htmlmail($to, $subject, $msg, $from, '');
      } */
    return true;
}

function moderator_new_save($qids='') {
    global $gSitePath, $user, $gDocPath, $base_root;
    $qids = implode(',', $qids);
    if ($_REQUEST['actions']) {

        // $query = db_query("update {question} set status='" . $_REQUEST['actions'] . "' where qid in ($qids)");
        //   $msg='<div class="success">Question updated successfully!</div>';
    } else {

        //send flag mails
        flag_quest_mail($qids);

        // delete from db
        delete_issues($qids);
        $msg = '<div class="success">Selected Issue(s) has been rejected successfully!</div>';
    }
    return $msg;
}

function delete_issues($qids='') {
    global $gSitePath, $user, $gDocPath, $base_root;

    //Delete Issues
    $query = db_query("delete from {question} where qid in ($qids)");
    //Delete Flags
    $query = db_query("delete from {question_flags} where type='question' AND nodeid in ($qids)");
}

function flag_quest_mail($qids = '') {

    global $gSitePath, $user, $gDocPath, $base_root;

    $from = variable_get('site_mail');
    $subject = 'Heardmentality Flag  Question Removal';
    $reporttext = $_REQUEST['reporttext'];
    $qids = explode(',', $qids);

    foreach ($qids as $id) {


        $query = db_query("select u.mail,q.question  from {question} as q left join {users} as u on u.uid=q.uid where qid='$id' ");
        $det = db_fetch_object($query);

        $to = $det->mail;
        $msg .= '<br/>Question : ' . $det->question . '<br/>';
        if (!empty($to)) {

            // $mail_suc = htmlmail($to, $subject, $msg, $from, '');

            $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
            $rs_mgmt = db_query($sel_user_cmt);
            $list_content = db_fetch_object($rs_mgmt);

            $contentm = str_replace("#uname#", $det->name, $list_content->content);
            // $contentm = str_replace("#anothername#",$user->name, $contentm);
            $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
            //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
            $contentm = str_replace("#content#", " Your Issue has been Rejected By Headmentality Moderator due to <br/><b>$reporttext</b>", $contentm);
            //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
            $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
            db_query($ins_qry, $from, $from, $to, $subject, $contentm);
        }
    }
    return true;
}

//modertor and admin save happens here
function question_edit_save_admin($array) {

    global $gSitePath, $user, $gDocPath, $base_root;
    $nid = substr($_GET['q'], strrpos($_GET['q'], "/") + 1);

    //  print_r($array);
    extract($array);
    $output = '';

    if (!empty($q_quest) && !empty($q_ans1) && !empty($q_ans2) && !empty($cat1)) {
        $edate = $q_edate;
        $result = db_query("update {question} set question='$q_quest',context='$q_context',cid='$cat1',scid='$cat2',sscid='$cat3',	 global='$q_global',country='$q_country',state='$q_state',city='$q_city',enddate='$edate' where qid='" . $nid . "' ");

        $ins_id = db_last_insert_id('question', 'qid');
        for ($i = 1; $i <= $ans_cnt; $i++) {
            $name = "q_ans" . $i;
            $aid = "aid" . $i;
            if (!empty($$name)) {

                if (!empty($$aid)) {
                    $result = db_query("UPDATE {possible_answer} set answer='" . $$name . "' where paid='" . $$aid . "' AND qid='" . $nid . "'");
                } else {
                    // echo kkkkkkkkkk;
                    //	echo "INSERT INTO {possible_answer} (qid,answer) VALUES (%d,'%s')", $nid, $$name;
                    $result = db_query("INSERT INTO {possible_answer} (qid,answer) VALUES (%d,'%s')", $nid, $$name);
                }
            }
        }

        if (db_query("select * from {qtag} where qid='" . $nid . "'")) {

            // db_query("update {qtag} set tag='".$q_tag."' where qid='".$nid."'");
        }

        if ($result)
            drupal_set_message(t('Thank you, Question updated successfully!'), $type = 'success');
        //	print_r($result);
        question_edited_mail($nid);
        question_edited_mail_voters($nid);
        question_edited_mail_suggest($nid);
        //  drupal_goto("admin/moderatequestion");
    } else {

        $_SESSION['post'] = $_POST;
        drupal_set_message($message = 'Sorry, Following required fields are Empty!', $type = 'error');

        if (empty($q_quest))
            drupal_set_message($message = 'Question should not be Empty!', $type = 'error');

        if (empty($q_ans1) || empty($q_ans2))
            drupal_set_message($message = 'Minimum 2 answers should be needed!', $type = 'error');

        if (empty($cat1))
            drupal_set_message($message = 'Main Category should not be Empty!', $type = 'error');
    }

    return $output;
}