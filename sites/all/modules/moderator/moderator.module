<?php

/**
 * Implementation of hook_perm().
 */
function moderator_perm() {
  return array('Moderate User', 'Moderate Question', 'Edit Question', 'View Question', 'Moderate Message', 'ahah search');
}

/**
 * Implementation of hook_menu().
 */
function moderator_menu() {
  $mdtrest['moderator/issues'] = array(
    'title' => 'Moderator Issues',
    'page callback' => 'moderator_issues',
    'access arguments' => array('Moderate Question'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/user'] = array(
    'title' => 'Moderator User',
    'page callback' => 'moderator_users',
    'access arguments' => array('Moderate Question'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );

  $mdtrest['moderator/issues/list/%'] = array(
    'title' => 'Moderator Issues',
    'page callback' => 'moderator_issues_list',
    'access arguments' => array('Moderate Question'),
    'page arguments' => array(3),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/user/list/%'] = array(
    'title' => 'Moderator Issues',
    'page callback' => 'moderator_user_list',
    'access arguments' => array('Moderate Question'),
    'page arguments' => array(3),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/issues/edit/%'] = array(
    'title' => 'Moderator Issues ',
    'page callback' => 'moderator_edit_issues',
    'access arguments' => array('Moderate Question'),
    'page arguments' => array(3),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/ajax/%'] = array(
    'title' => 'Moderator ajax ',
    'page callback' => 'moderator_ajax',
    'access arguments' => array('Moderate Question'),
    'page arguments' => array(2),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/msg/%'] = array(
    'title' => 'Moderator User Message ',
    'page callback' => 'moderator_send_message',
    'access arguments' => array('Moderate Message'),
    'page arguments' => array(2),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/msg/delete/%/%'] = array(
    'title' => 'Moderator User Message ',
    'page callback' => 'moderator_delete_message',
    'access arguments' => array('Moderate Message'),
    'page arguments' => array(3, 4),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'moderator.pages.inc',
  );
  $mdtrest['moderator/issue/ahah/%/%'] = array(
    'title' => 'Moderator Ahah Control',
    'page callback' => 'moderator_ahah_callback',
    'access arguments' => array('Moderate Question'),
    'page arguments' => array(3, 4),
  );
  $mdtrest['moderator/issue/addanswer'] = array(
    'title' => 'Moderator Ahah Control',
    'page callback' => 'moderator_add_choice_callback',
    'access arguments' => array('Moderate Question'),
  );

  return $mdtrest;
}

function moderator_init() {
  global $base_url;
  $inline = "      var admin='1';
                        var sitepath = '" . $base_url . "'";
  drupal_add_js("misc/ahah.js");
  drupal_add_js($inline, $type = 'inline');
  drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/moderator.js');
}

function moderator_issues() {
  global $base_url, $user;

  // drupal_set_html_head('<script src="http://ws.geonames.org/export/geonamesData.js" type="text/javascript"></script>');


  drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.js');
  drupal_add_css(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.css');
  $output = _moderator_left();



  $output.=' <div class="mod-midside-inner" id="mod-edit-issue">
            <div class="warning" >No Issue Selected !</div>
          <div class="clr"></div>
        </div>';


  return $output;
}

function moderator_users() {
  global $base_url, $user;

  // drupal_set_html_head('<script src="http://ws.geonames.org/export/geonamesData.js" type="text/javascript"></script>');

  drupal_add_js(drupal_get_path('module', 'question') . '/scripts/question.js');
  drupal_add_js(drupal_get_path('module', 'question') . '/scripts/qadmin.js');
  drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.js');
  drupal_add_css(drupal_get_path('module', 'moderator') . '/scripts/jquery.multiSelect.css');
  $output = _moderator_user_left();
  $output.=' <div class="mod-midside-inner-p-outer">
        <div class="mod-midside-inner-p">
        <div class="mod-midside-inner-leftpart">
         <div class="warning" >No User Selected !</div>
        <div class="clr"></div>
        </div>
           <div class="mod-midside-inner-rightpart" id="mod-edit-issue">
 <div class="mod-midside-inner-p-outer">
          <div class="mod-t-outer">
               <div class="clr"></div>
        </div>

          </div>
          <div class="clr"></div>
        </div>
        </div>
          <div class="clr"></div>
</div>';
  return $output;
}

function _moderator_user_left() {
  global $base_url, $user;

  $new = db_result(db_query("SELECT count(*) FROM {users} "));

  //$query = "SELECT u.uid,u.name,up.real_name from {question_flags} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.nodeid AND f.type='user' AND u.status='1' group by f.nodeid ORDER BY u.name ASC";

  $query = "SELECT u.uid,u.name,up.real_name from {abuse} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.oid AND f.type='user' AND u.status='1' group by f.oid ORDER BY u.name ASC";

  $flag = ExecuteQuery($query, 'norows');
  $output = '        <div class="commu">
        <form id="mod-user" name="mod-issue" method="POST" action="' . $base_url . '/moderator/ajax/user" >
          <div id="rotate">
            <ul id="tabmenu" class="mytabs">
              <li class="current"><a href="' . $base_url . '/moderator/user/list/new" title="User"><span>All Users (' . (!empty($new) ? $new : '0') . ')</span></a></li>
              <li class="ui-tabs-selected"><a href="' . $base_url . '/moderator/user/list/flag" title="Flagged User"><span>Flagged (' . (!empty($flag) ? $flag : '0') . ')</span></a></li>
                     </ul>

            <div id="rcontents" class="mytabs-container" style="height:auto;" >

              <div class="clr"></div>
            </div>

          </div>

  <div id="showbox" align="left" style="width:100%;display:none"><label for="reporttext"><b> Report Message :</b></label><br/><textarea name="reporttext" cols="55" row="17" id="reporttext"></textarea></div>
          <div class="mod-btn-outer">
      <input type="hidden" id="actions" name="actions" value="1"/>
            <div><input name="" type="button"  onclick="moderator_ignore_user(2);" class="mod-btn" value="Ignore"/></div>
          <div><input name="" type="button"  onclick="moderator_warn_user(1);" class="mod-btn" value="Warning"/></div>
          <div><input name="" type="button" onclick="moderator_reject_user(0);" class="mod-btn" value="Reject"/></div>
           <div> <small onclick="checkall(1);">Check All</small>&nbsp;<small onclick="checkall(0);">Uncheck All</small></div>
          <div class="clr"></div>
          </div>

</form>
        </div>';

  return $output;
}

function _moderator_left() {
  global $base_url, $user, $base_root, $base_path;
  //$query = "SELECT DISTINCT q.qid, q.question,(SELECT IFNULL( count( * ) , 0 ) FROM {question_cat_revision} WHERE uid = '$user->uid' and qid=q.qid) as tcnt FROM {question} AS q  having tcnt<1 ORDER BY q.qid DESC";
  $query = "SELECT DISTINCT n.nid, n.title,(SELECT IFNULL( count( * ) , 0 ) FROM {node_revisions} WHERE uid = '$user->uid' and nid=n.nid) as tcnt FROM {node} AS n WHERE n.type='poll'  AND tnid = '0' AND translate='0' having tcnt<1 ORDER BY n.nid DESC";
  $new = db_result(db_query($query));

  //$query = "SELECT *,ifnull((select count(*) from {question_flags} where nodeid=q.qid AND type='question' group by nodeid),0) as fcnt  FROM {question_flags} as f  join {question} as q  on f.nodeid=q.qid where f.type='question' group by q.qid ORDER BY f.flag_date DESC";
  $query = "SELECT *,ifnull((select count(*) from {abuse} where oid=n.nid AND type='node' group by oid),0) as fcnt  FROM {abuse} as f  join {node} as n  on f.oid=n.nid where f.type='node' AND n.type='poll' group by n.nid ORDER BY f.created DESC";

  $flag = db_result(db_query($query));
  $output = '        <div class="commu">
        <form id="mod-issue" name="mod-issue" method="POST" action="' . $base_url . '/moderator/ajax/issue" >
          <div id="rotate">
            <ul id="maintabs" class="mytabs">
              <li class="current"><a href="' . $base_url . '/moderator/issues/list/new" title="New Issues"><span>New (' . $new . ')</span></a></li>
              <li class="ui-tabs-selected"><a href="' . $base_url . '/moderator/issues/list/flag" title="Flagged Issues"><span>Flagged (' . $flag . ')</span></a></li>
                     </ul>

            <div id="tabcontent" class="mytabs-container" style="height:auto;" >
             
              <div class="clr"></div>
            </div>

          </div>

  <div id="showbox" align="left" style="width:100%;display:none"><label for="reporttext"><b>Send Report Message :</b></label><br/><textarea name="reporttext" cols="55" row="17" id="reporttext"></textarea></div>
          <div class="mod-btn-outer">
      <input type="hidden" id="actions" name="actions" value="1"/>
    
          <div><input name="" type="submit"  class="mod-btn" value="Ignore"/></div>
          <div><input name="" type="button" onclick="moderator_reject(0);" class="mod-btn" value="Reject"/></div>
           <div> <small onclick="checkall(1);">Check All</small>&nbsp;<small onclick="checkall(0);">Uncheck All</small></div>
          <div class="clr"></div>
          </div>

</form>
        </div>';

  return $output;
}

function moderator_issues_list($type='') {
  global $base_url, $user, $base_root, $base_path, $language;
  $curLanguage = $language->language;
  // root path
  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';


  //This is numbers per page
  $num_per_page = 25;

  $output = '';
  switch ($type) {
    case 'new':

      $query = "SELECT * FROM
(SELECT DISTINCT n.nid as qid, n.title as question,(SELECT IFNULL( COUNT( * ) , 0 ) FROM content_type_poll WHERE nid = n.nid AND field_mod_status_value =1) AS tcnt FROM node AS n
WHERE n.nid NOT IN (SELECT qr.nid FROM node_revisions AS qr WHERE qr.uid=$user->uid ) AND n.type = 'poll' AND tnid = '0' AND translate='0' ORDER BY n.nid DESC
) AS issue WHERE issue.tcnt<1";
      $sqlcnt = ExecuteQuery($query, 'norows');

      $aclass = '';
      $nclass = 'class="active"';
      $fclass = '';
      break;
    case 'flag':

      $query = "SELECT n.nid AS qid, n.title AS question, ifnull((select COUNT(*) FROM {abuse} WHERE oid = n.nid), 0) AS fcnt FROM {abuse} a JOIN {node} AS n ON a.oid = n.nid WHERE n.type = 'poll' GROUP BY n.nid ORDER BY a.created DESC";
      $sqlcnt = ExecuteQuery($query, 'norows');

      $aclass = '';
      $nclass = '';
      $fclass = 'class="active"';
      break;
    case 'all':

      //$query = "SELECT n.nid AS qid, n.title AS question FROM {node} AS n JOIN content_type_poll AS cp WHERE n.type = 'poll' AND n.nid NOT IN (SELECT qr.nid FROM node_revisions AS qr WHERE qr.uid=$user->uid ) AND n.tnid = '0' AND translate='0' AND cp.field_mod_status_value = 1 GROUP BY n.nid ORDER BY n.created DESC";
      /*       * Rallydev:521* */
      $query = "SELECT n.nid AS qid, n.title AS question FROM node AS n JOIN content_type_poll AS cp WHERE n.type = 'poll' AND n.nid NOT IN (SELECT qr.nid FROM node_revisions AS qr WHERE qr.uid = $user->uid ) AND n.tnid = '0' AND translate='0' AND (select field_mod_status_value from content_type_poll where nid = n.nid order by vid desc limit 1) = 0 GROUP BY n.nid ORDER BY n.created DESC";
      /*       * * */

      $sqlcnt = ExecuteQuery($query, 'norows');

      $aclass = 'class="active"';
      $nclass = '';
      $fclass = '';
      break;

    case 'user':
      $uid = arg(4);
      if (is_numeric($uid)) {

        $query = "select n.nid AS qid, n.title AS question from {node} n,{users} u where n.uid=u.uid AND u.uid='$uid' AND n.type = 'poll' ";
        $sqlcnt = ExecuteQuery($query, 'norows');
      }
      break;
    default:

      echo '<div class="warning">No Action(s) Found!</div>';

      break;
  }

  // filters
  $filter = '<a href="' . $sitelink . 'moderator/issues/list/all" title="All" ' . $aclass . '>' . t('All') . '</a> |
               <a href="' . $sitelink . 'moderator/issues/list/new" title="New Issues" ' . $nclass . '>' . t('New Issues') . '</a> |
               <a href="' . $sitelink . 'moderator/issues/list/flag" title="Flagged Items" ' . $fclass . '>' . t('Flagged Items') . '</a>';

  //pager_query function
  $rs = pager_query_new($query, $num_per_page, 0, $sqlcnt);
  $alt = 'm-even';
  $output.= '  <div class="mod-leftside-inner">';
  if ($sqlcnt) {
    while ($data = db_fetch_object($rs)) {

      $nid = $data->qid;
      $issue = $data->question;

      if ($type == 'flag')
        $flag = ('' . $data->fcnt . '<a href="' . $base_url . '/moderator/ajax/flaglist/' . $data->qid . '" class="floatbox" title="Flag List" data-fb-options="type:ajax width:640 height:385" ><img src="' . $base_url . '/' . path_to_theme() . '/images/flag.png" align="absmiddle"/></a>');
      $chk = ('<div align="right"><input type="checkbox" class="check-me" name="qids[]" value="' . $data->qid . '" />&nbsp; ' . $flag . '</div> ');
      $nd = ('<div class="' . $alt . '" > ');
      $nd .= l($data->question, $base_url . '/moderator/issues/edit/' . $data->qid, array('attributes' => array('class' => 'issue-links')));
      $nd.=$chk;
      $nd .= ( '</div>');
      $output .= ( $nd);
      if ($alt == 'm-even')
        $alt = 'm-odd';
      else
        $alt = 'm-even';

      $streams .= theme('moderator_issue_stream', $nid, $issue);
    }
    $pagination = theme('pager', array(), $num_per_page, 0);
  }else {
    echo '<div class="warning">No Issue(s) Found!</div>';
  }
  // print url($_GET['q'], array('absolute' => true));
  $uri = $base_root . request_uri();
  $output.=' <input name="mod-url" type="hidden" id="mod-url" value="' . $uri . '"/><input name="mod-type" type="hidden" id="mod-type" value="' . $type . '"/> <div class="clr"></div></div>';

  $stream = theme('moderator_stream', $filter, $streams, $pagination);
  return $stream;
}

function moderator_user_list($type='') {
  global $base_url, $user, $gDocPath, $base_root, $base_path;
  //This is numbers per page
  $num_per_page = 12;



  $output = '';
  switch ($type) {
    case 'new':

      //actual query
      $query = "SELECT u.uid,u.name,up.real_name from {users} as u,{user_profile} as up where u.uid=up.uid  ";
      $sqlcnt = db_result(db_query("SELECT count(*) FROM {users} "));
      //  $sqlcnt = ExecuteQuery($query, 'norows');
      break;
    case 'flag':
      //actual query
      //$query = "SELECT u.uid,u.name,up.real_name from {question_flags} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.nodeid AND f.type='user' AND u.status='1' group by f.nodeid ORDER BY u.name ASC";
      $query = "SELECT u.uid,u.name,up.real_name from {abuse} as f,{users} as u,{user_profile} as up  where u.uid=up.uid AND u.uid=f.oid AND f.type='user' AND u.status='1' group by f.oid ORDER BY u.name ASC";
      $sqlcnt = ExecuteQuery($query, 'norows');
      break;
    default:

      echo '<div class="warning">No Action(s) Found!</div>';
      exit;
      break;
  }

  //pager_query function
  $rs = pager_query_new($query, $num_per_page, 0, $sqlcnt);
  $alt = 'm-even';
  $output.= '  <div class="mod-leftside-inner">';

  while ($data = db_fetch_object($rs)) {
    if ($type == 'flag')
      $flag = ('' . $data->fcnt . '<a href="' . $base_url . '/moderator/ajax/uflaglist/' . $data->uid . '" class="floatbox" title="Flag List" data-fb-options="type:ajax width:640 height:385" ><img src="' . $base_url . '/' . path_to_theme() . '/images/flag.png" align="absmiddle"/></a>');
    $chk = ('<div align="right"><input type="checkbox" class="check-me" name="qids[]" value="' . $data->uid . '" />&nbsp; ' . $flag . '&nbsp;|&nbsp;<a href="javascript:void(0);" onclick="loadusermessage(\'' . $base_url . '/moderator/msg/' . $data->uid . '\',\'Message to User\')">Message</a>' . '</div> ');
    $nd = ('<div class="' . $alt . '" > ');
    $nd .= l($data->name, $base_url . '/moderator/issues/list/user/' . $data->uid, array('attributes' => array('class' => 'user-links', 'title' => $data->real_name)));
    $nd.=$chk;
    $nd .= ( '</div>');
    $output .= ( $nd);
    if ($alt == 'm-even')
      $alt = 'm-odd';
    else
      $alt = 'm-even';
  }
  $output .= theme('pager', array(), $num_per_page, 0);

  if (!$sqlcnt) {
    echo '<div class="warning">No User(s) Found!</div>';
  }
  // print url($_GET['q'], array('absolute' => true));
  $uri = $base_root . request_uri();
  $output.=' <input name="mod-url" type="hidden" id="mod-url" value="' . $uri . '"/><input name="mod-type" type="hidden" id="mod-type" value="' . $type . '"/> <div class="clr"></div></div>';
  echo $output;
  exit;
}

function moderator_edit_issues($qid = '') {
  global $base_url, $user, $gDocPath, $base_root;
  drupal_add_css(drupal_get_path('module', 'moderator') . '/scripts/style.css');

  // select sub categories for a issue

  $moderateform.= drupal_get_form('moderator_edit_issue_form', $qid);
  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.
  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {

          $filefield_ahah_settings[$id] = $ahah_settings;
        }
      }
    }
  }

  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $moderateform .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, ' . drupal_to_js($filefield_ahah_settings) . ');</script>';
  }

  // possible dupe form
  $possibledupeForm = drupal_get_form('possible_dupe_form', $qid);

  // moderation history
  //Moderator Revision
  $result = db_query("SELECT u.uid,u.name,nr.timestamp FROM
                        (SELECT * FROM (select * FROM node_revisions where nid = '$qid' order by timestamp desc) as subs group by uid) as nr
                        JOIN {users} as u on u.uid=nr.uid JOIN {node} as n ON n.nid = nr.nid ORDER BY nr.timestamp DESC");

  //owner uid
  $ownerId = db_result(db_query("SELECT uid FROM {node} WHERE nid = '$qid'"));

  while ($coupon = db_fetch_object($result)) {

    $owner = $ownerId == $coupon->uid ? '&nbsp;(owner)' : '';
    /*     * Rallydev:510* */
    if ($ownerId != $coupon->uid) {
      $updated = date("M d, Y", $coupon->timestamp);
      $modHistory .= theme('mod_history_thread', $coupon->name, $updated);
      //'<p class="issue-meta">'.t('Edited By').' <a href="">'.$coupon->name.'</a> '.t('On').' '.$updated.'</p><hr>';
    }
    else {
      $modHistory .= theme('mod_history_thread', $coupon->name . ':Owner', $updated);
    }
    /**/
  }
  // originally posted in
  $tnid = get_tnid($qid);
  $original = node_load($tnid);

  $originalPath = $original->language . '/' . $original->path;

  $originalLangKey = $original->language;
  $languageList = language_list();
  $originalLanguage = $languageList[$originalLangKey]->name;

  $moderationHistory = theme('mod_history_view', $modHistory, $originalLanguage, $originalPath);



  $output = theme('moderate_issue_edit_details', $moderateform, $possibledupeForm, $moderationHistory);

  return $output;
}

// possible dup form
function possible_dupe_form($form_state, $qid) {
  global $base_url;
  $dupes = get_dupe_query($qid);
  $result = db_query($dupes['query']);
  while ($coupons = db_fetch_object($result)) {
    $values[$coupons->nid] = $coupons->title;
  }
  $form['qid'] = array('#type' => 'hidden', '#value' => $qid, '#id' => 'o_qid');
  $form['possible_dupe'] = array('#type' => 'radios', '#options' => $values, '#id' => 'regularRadio');
  if ($values) {
    $form['possible_dupe_submit'] = array('#type' => 'submit',
      '#value' => t('Merge as Dupe'),
      '#attributes' => array('class' => 'remove'),
    );
//    $form['possible_dupe_submit'] = array('#type' => 'submit',
//                                          '#value' => t('Merge as Dupe'),
//                                          '#attributes' => array('class' => 'remove'),
//                                           '#prefix' => '<a data-fb-options="type:ajax width:740 height:385" title="Dupe List" href="' . $base_url . '/moderator/ajax/dupelist/' . $qid . '" class="floatbox">',
//                                            '#suffix' => '</a>');
  }
  else {
    $form['no_dupe_issues'] = array('#type' => 'markup', '#value' => t('No Dupe Issues Found'));
  }
  return $form;
}

function moderator_edit_issue_form($form_state, $qid) {
  global $base_url, $user, $gDocPath, $base_root, $theme;

  drupal_add_js(drupal_get_path('module', 'moderator') . '/scripts/multi_select.js');
  drupal_add_css(drupal_get_path('theme', 'heardmentalitylight') . '/floatbox/floatbox.css');
  drupal_add_js(drupal_get_path('theme', 'heardmentalitylight') . '/floatbox/floatbox.js');
  $inline = " var gSitePath = '" . $base_url . "/';
                jQuery(document).ready(function () {
                multi_select();});";
  drupal_add_js($inline, 'inline');
  // load node values
  $node = node_load($qid);
  $alias = drupal_get_path_alias('node/' . $qid);
  $originalPath = $node->language . '/' . $node->path;
  //echo '<pre>';print_r($node);

  $form['mod_main_div'] = array('#type' => 'markup',
    '#value' => ' <div class="grey-box"><a class="button light" href="' . $base_url . '/' . $originalPath . '" target="_blank">' . t('View issue') . '</a>
                                    <h2 class="din">Issue #</h2><div class="new-issue">
                                    <hr class="short2">');
  $form['quest_title'] = array(
    '#type' => 'markup',
    '#value' => '<label for="" class="add-on"><span class="title ">Question</span><br><span class="guides">' . t('Max 140 chars') . '.</span></label>');
  $form['title'] = array('#type' => 'textarea',
    '#default_value' => $node->title,
    '#suffix' => '<div class="clear"></div>
                                        <hr class="short2">',
    '#id' => 'q_quest',
    '#required' => TRUE,
    '#resizable' => FALSE);
  $dupecnt = get_dupe_query($qid);
  $dcnt = !empty($dupecnt['count']) ? $dupecnt['count'] : '0';

  $form['quest_context'] = array('#type' => 'markup',
    '#value' => '<label for="" class="add-on"><span class="title ">' . t('Context') . '</span><br><span class="guides">' . t('Enter a brief description or backstory to provide context. You may include links.') . '</span></label>');
  $form['context'] = array('#type' => 'textarea',
    '#default_value' => $node->body,
    '#cols' => 70,
    '#suffix' => '<hr class="short2">',
    '#resizable' => FALSE,
    '#id' => 'Question',
  );
  $query = "SELECT * FROM {poll_choices} where nid='" . $qid . "' ORDER BY chorder ASC";
  $ans = ExecuteQuery($query, "select");
  $i = 1;
  $tab = 3;
  $answer_count = 1;

  ///////////////////// CLONE OF POLL CHOICE MODULE

  if (isset($form_state['choice_count'])) {
    $choice_count = $form_state['choice_count'];
  }
  else {
    //$choice_count = count($ans);
    $choice_count = count($node->choice);
  }

  $form['choice_wrapper'] = array(
    '#tree' => FALSE,
    '#prefix' => '<div class="clear-block" id="poll-choice-wrapper">',
    '#suffix' => '</div>',
  );


  // Container for just the poll choices.
  $form['choice_wrapper']['choice'] = array(
    '#prefix' => '<div id="poll-choices">',
    '#suffix' => '</div>',
  );


  // Add the current choices to the form.
  for ($i = 0; $i < $choice_count; $i++) {
    $answer = $node->choice[$i]['chtext'] != '' ? $ans[$i]['chtext'] : '';
    $chorder = $node->choice[$i]['chorder'];
    $chovotes = $node->choice[$i]['chvotes'];
    $short = db_result(db_query("SELECT short_answer FROM {short_answers} where qid='" . $qid . "' AND chorder = '" . $chorder . "'"));
    $shortAns = $short != '' ? $short : '';
    // meta data for each moderators
    $posQuery = db_query("select value from {possible_answer_spectrum} where qid='$qid' AND possible_chorder = '" . $chorder . "' AND uid = '$user->uid' ORDER BY pid ASC");
    $pos_spectrum = array();
    while ($spectrum = db_fetch_object($posQuery)) {
      $pos_spectrum[] = $spectrum->value;
    }
    $form['choice_wrapper']['choice'][$i] = _mod_answer_form($i, $answer, $shortAns, $pos_spectrum, $chorder, $chovotes);
  }

  // AHAH-enabled buttons with the id 'more'.
  $form['choice_wrapper']['poll_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Another Answer'),
    '#description' => t("If the amount of boxes above isn't enough, click here to add more choices."),
    '#weight' => 1,
    '#ahah' => array(
      'path' => 'moderator/issue/addanswer',
      'wrapper' => 'poll-choices',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  ////////////////////////


  $form['quest_cat_mark'] = array('#type' => 'markup', '#value' => '<label class="cat">' . t('Categories') . '</label>');
  /* categories */
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $client_select = db_query("SELECT t.tid AS cat_id, t.name AS cat_name FROM term_data t RIGHT JOIN term_hierarchy h ON t.tid = h.tid where h.parent='0' AND t.vid = '$vid'");

  $qry_cat = "SELECT tid from {term_node} where nid='" . $qid . "'";
  $result_cat = db_query($qry_cat);
  $cat = array();

  while ($quest_cat = db_fetch_object($result_cat)) {
    $cat[] = $quest_cat->tid;
  }

  //$ecat1 = explode(",", $cat);
  while ($list = db_fetch_object($client_select)) {
    $options[$list->cat_id] = t(stripslashes($list->cat_name));
  }
  $form['cat1'] = array('#type' => 'hidden',
    '#default_value' => $cat, '#id' => 'cat1');

  $form['q_cat'] = array('#type' => 'select',
    '#options' => $options,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div>',
    '#multiple' => 'multiple',
    '#id' => 'q_cat',
    '#ahah' => array('wrapper' => 'sub-cat-wrapper',
      'event' => 'click',
      'path' => 'moderator/issue/ahah/category/scat',
      'effect' => 'fade',
      'method' => 'replace'),
    '#size' => 5,
    '#default_value' => $cat,
    '#required' => TRUE);
  foreach ($options as $tid => $value) {
    $childrenArray = taxonomy_get_children($tid);
    foreach ($childrenArray as $ctid => $scat) {
      $firstChildren[$ctid] = $scat->name;
    }
  }
  foreach ($firstChildren as $tid => $value) {
    $childrenArray = taxonomy_get_children($tid);
    foreach ($childrenArray as $ctid => $scat) {
      $secondChildren[$ctid] = $scat->name;
    }
  }
  //echo '<pre>'; print_r($firstChildren);
  $form['sub_categories'] = array('#type' => 'markup',
    '#value' => '<div id="sub-cat-wrapper" style="padding-left:5px; float:left"></div>',
  );
  $form['sub_sub_categories'] = array('#type' => 'markup',
    '#value' => '<div id="sub-sub-cat-wrapper" style="padding-left:5px; float:left">
                                                </div>',
    '#suffix' => '<br /><div class="clear"></div>');
  $form['quest_loc_mark'] = array('#type' => 'markup', '#value' => '<label class="cat">' . t('Location') . '</label>');

  $options = array(
    'sortby' => 'countryname',
  );
  $countryList = geonames_query('countryinfo', NULL, $options);
  //print_r($countryList);
  foreach ($countryList->results as $country) {
    $countries[$country['countryname']] = $country['countryname'];
  }
  $qcountries = db_query("SELECT field_issue_country_value AS country FROM {content_field_issue_country} WHERE nid = '$qid'");
  while ($country = db_fetch_object($qcountries)) {
    $countriesSelected[] = $country->country;
  }
  $form['q_country'] = array(
    '#type' => 'select',
    '#options' => $countries,
    '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
    '#multiple' => 'multiple',
    '#id' => 'q_country',
    '#ahah' => array('wrapper' => 'state-wrapper',
      'path' => 'moderator/issue/ahah/location/state',
      'effect' => 'fade',
      'event' => 'click',),
    '#size' => 5,
    '#default_value' => $countriesSelected
  );
  $form['state_div'] = array(
    '#type' => 'markup',
    '#value' => '<div id="state-wrapper" style="padding-left:5px; float:left"></div>');
  $form['city_div'] = array('#type' => 'markup',
    '#value' => '<div id="city-wrapper" style="padding-left:5px; float:left"></div>',
    '#suffix' => '<br /><div class="clear"></div>');
  $form['bottom_line'] = array('#type' => 'markup',
    '#value' => '<hr class="bottom">');
  $form['qid'] = array('#type' => 'hidden',
    '#default_value' => $qid);
  $form['mod_status'] = array('#type' => 'hidden',
    '#default_value' => $node->mod_status);

  $form['issue_delete'] = array('#type' => 'markup',
    '#value' => '<input type="button" value="Delete Issue" class="delete-issue" />',
  );

  $form['issue_edit'] = array('#type' => 'submit',
    '#value' => t('Update Issue'),
    '#attributes' => array('class' => 'update-issue'),
    '#suffix' => '<div class="clear"></div>',
  );

  $form['mod_main_close_div'] = array(
    '#type' => 'markup',
    '#value' => ' </div></div>'
  );

  return $form;
}

//Moderator ajax works goes here

function moderator_ajax($action='') {

  global $base_url, $user, $gDocPath, $base_root;

  switch ($action) {
    case 'saveissue':

      $content = moderator_save_issue($_REQUEST);
      extract($content);
      break;
    case 'state':
      $explode = explode(',', $_REQUEST['ids']);


      if (arg(3) != 'cck')
        $ret = '<select tabindex="18"  style="width: 100px;" multiple="multiple" id="q_state" name="q_state[]"> <option value="">--States--</option>';

      $results = array();
      if (count($explode) > 0) {
        foreach ($explode as $country) {

          $geoid = db_result(db_query("SELECT geonameid FROM {geonames_countryinfo} where name LIKE '%" . $country . "%' limit 0,1"));

          $query = array('geonameid' => $geoid);
          $results = geonames_query('children', $query);
          foreach ($results->results as $state) {
            $set = '';

            if (strpos(strtolower($setstate), strtolower($state['name']))) {
              $set = 'SELECTED=SELECTED';
            }
            $ret .= sprintf('<option value="%s" %s >%s</option>', $state['geonameid'], $set, $state['name']);
          }
        }
        if (arg(3) != 'cck')
          $ret .= "</select>";

        $err = false;
        $msg = 'No action found!';
        $output = $ret;
      } else {
        $ret .= "</select>";
        $err = true;
        $msg = 'No State found!';
        $output = $ret;
      }
      break;
    case 'statecck':

      include_once 'modules/node/node.pages.inc';
      $form_state = array('storage' => NULL, 'submitted' => FALSE);
      $form_build_id = $_POST['form_build_id'];
      // Get the form from the cache.
      $form = form_get_cache($form_build_id, $form_state);
      $args = $form['#parameters'];
      $form_id = array_shift($args);
      // We will run some of the submit handlers so we need to disable redirecting.
      $form['#redirect'] = FALSE;
      // We need to process the form, prepare for that by setting a few internals
      // variables.
      $form['#post'] = $_POST;
      $form['#programmed'] = FALSE;
      $form_state['post'] = $_POST;
      // Build, validate and if possible, submit the form.
      drupal_process_form($form_id, $form, $form_state);
      // This call recreates the form relying solely on the form_state that the
      // drupal_process_form set up.
      $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
      // Render the new output.
      $choice_form = $form['choice_wrapper']['choice'];
      unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.
      $output = theme('status_messages') . drupal_render($choice_form);

      break;
    case 'city':
      if (arg(3) != 'cck')
        $ret = '<select  tabindex="19"  style="width: 100px;" multiple="multiple"  id="q_city" name="q_city[]" > <option value="">--Cities--</option> ';
      $results = array();
      if (count($_REQUEST['ids']) > 0) {
        foreach ($_REQUEST['ids'] as $code) {
          $explode = explode(',', $code);
          $query = array('geonameid' => $explode[0]);
          $result = geonames_query('children', $query);
          foreach ($result->results as $state) {

            $ret .= sprintf('<option value="%s,%s,%s">%s</option>', $state['geonameid'], $explode[0], $explode[1], $state['name']);
          }
        }
        $ret .= "<option value='-1'>Others</option>";

        $err = false;
        $msg = 'No action found!';
        $output = $ret;
      }
      else {
        $ret .= "<option value='-1'>Others</option>";
        $err = true;
        $msg = 'No City found!';
      }
      if (arg(3) != 'cck')
        $ret .= "</select>";
      $output = $ret;
      break;
    case 'issue':

      $modtype = check_plain($_REQUEST['mod-type']);

      switch ($modtype) {
        case 'new':
          $msg = moderator_new_save($_REQUEST['qids']);
          $err = false;
          $output = '';
          break;
        case 'flag':
          $msg = moderator_flag_save();
          $err = false;
          $output = '';
          break;
        case 'hide':
          $msg = moderator_hide_issue($_REQUEST['nid']);
          $err = false;
          $output = 'Removed';
          break;
        default:
          $err = true;
          $msg = 'No action found!';
          $output = '';
          break;
      }

      break;
    case 'flaglist':

      $head = array(
        array('data' => t('Flag Type')),
        array('data' => t('User Flagged')),
        array('data' => t('Date ')),
      );

      $sql = "SELECT f.abuse_type,u.name,f.flag_date FROM {question_flags} as f,{users} as u where f.uid=u.uid AND nodeid='" . arg(3) . "' AND type='question' ";

      $result = db_query($sql);

      while ($coupon = db_fetch_object($result)) {
        $rows[] = array(
          array('data' => $coupon->abuse_type),
          array('data' => l($coupon->name, $base_url . '/profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
          array('data' => ago($coupon->flag_date))
        );
      }

      //print drupal_render( );
      $html = theme_table($head, $rows, array('style' => 'width: 100%'));
      if (isAjax())
        print $html;
      exit;
      break;
    case 'uflaglist':
      $head = array(
        array('data' => t('Flag Type')),
        array('data' => t('User Flagged')),
        array('data' => t('Date ')),
      );

      $sql = "SELECT f.abuse_type,u.name,f.flag_date FROM {question_flags} as f,{users} as u where f.uid=u.uid AND nodeid='" . arg(3) . "' AND type='user' ";

      $result = db_query($sql);

      while ($coupon = db_fetch_object($result)) {
        $rows[] = array(
          array('data' => $coupon->abuse_type),
          array('data' => l($coupon->name, $base_url . '/profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
          array('data' => ago($coupon->flag_date))
        );
      }

      //print drupal_render( );
      $html = theme_table($head, $rows, array('style' => 'width: 100%'));
      if (isAjax())
        print $html;
      exit;
      break;
    case 'dupelist':

      $final = get_dupe_query(arg(3));
      $result = db_query($final['query']);
      while ($coupon = db_fetch_object($result)) {
//              $rows[] = array(
//                    array('data' => l($coupon->question, $gSitePath . $coupon->url, array('attributes' => array('title' => t($coupon->context), 'class' => 'floatbox')))),
//                    array('data' => l($coupon->name, $gSitePath . 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
//                    array('data' => ago($coupon->date_added)),
//                    array('data' => '<input type="radio" checked="checked" name="dupeq[]" value="' . $coupon->qid . '"/>'),
//                );
        /* Node conversion */
        $url = drupal_get_path_alias('node/' . $coupon->nid);
        $rows[] = array(
          array('data' => l($coupon->title, $url, array('attributes' => array('title' => t($coupon->body), 'class' => 'floatbox')))),
          array('data' => l($coupon->name, 'profile/' . $coupon->name, array('attributes' => array('title' => t('View user profile.'), 'class' => 'floatbox')))),
          array('data' => $coupon->created),
          array('data' => '<input type="radio" checked="checked" name="dupeq[]" value="' . $coupon->nid . '"/>'),
        );
      }
      $head = array(
        array('data' => t('Issues')),
        array('data' => t('User Posted ')),
        array('data' => t(' Posted Date')),
        array('data' => t('Set as dupe')),
      );
      //print drupal_render( );
      $html.='<form name="qdupeform" id="qdupeform" method="post" action="">';
      $html.= theme_table($head, $rows, array('style' => 'width: 100%'));
      $html.='<input type="submit" value="Duplicate" /><input type="hidden" name="issue" value="' . arg(3) . '"/></form>';

      if (empty($rows))
        $html = '<div class="warning">No Dupe Issues Found!</div>';

      if (isAjax())
        print $html;
      else
        return $html;
      exit;
      break;

    case 'mergeissue':

      if (is_numeric(arg(3)) && is_numeric(arg(4))) {


        $html = drupal_get_form('merge_dupeform', arg(3), arg(4));
      }
      else {

        $html = '<div class="warning">Sorry Required Data Missing Kindly reload the page !</div>';
      }
      //if (isAjax ())
      print $html;
      exit;
    case 'mergesave':

      $merge = dupe_merging_process($_REQUEST);
      $err = $merge['err'];
      $msg = $merge['msg'];
      $output = $merge['output'];

      break;
    case 'user':
      $modtype = check_plain($_REQUEST['mod-type']);

      switch ($modtype) {
        case 'new':
          $msg = moderater_user_mail($_REQUEST['qids'], 'warning', $_REQUEST['actions']);
          $err = false;
          $output = '';
          break;
        case 'flag':
          $msg = moderater_user_mail($_REQUEST['qids'], 'reject', $_REQUEST['actions']);
          $err = false;
          $output = '';

          break;
        default:
          $err = true;
          $msg = 'No action found!';
          $output = '';
          break;
      }

      $output = '';


      break;
    default:
      $err = true;
      $msg = 'No action found!';
      $output = '';
      break;
  }

  if (empty($msg))
    $msg = 'No Action Found!';
  if (isAjax())
    print json_encode(array('err' => $err, 'msg' => $msg, 'content' => $output));
  else
    return 'No Action Found!';
}

function get_dupe_query($qid='') {
  if (is_numeric($qid)) {
    //$query = "select * from {question}  where qid='" . $qid . "'";
    $node = node_load($qid);
    $query = "select * from {node} where nid='" . $qid . "' AND type = 'poll'";
    $ans = ExecuteQuery($query, "select");

    //$words = explode(" ", $ans[0]['question']);
    $words = removeCommonWords($ans[0]['title']);
    $words = trim($words);
    $words = explode(" ", $words);

    $words = array_filter($words, 'word_array_filter');

    $words = array_filter($words);

    //$query = "SELECT q.question,q.context,u.name,q.date_added,q.url,q.qid FROM {question} as q,{users} as u WHERE q.uid=u.uid AND q.qid!='" . $qid . "' ";
    $query = "SELECT n.title ,nr.body ,u.name, n.nid FROM {node} as n JOIN {node_revisions} as nr ON n.nid = nr.nid, {users} as u WHERE n.uid=u.uid AND n.nid!='$qid' and n.type = 'poll' AND n.language = '$node->language' ";
    //$querycnt="SELECT ifnull(count(*),0) FROM {question} as q,{users} as u WHERE q.uid=u.uid AND q.qid!='" . $qid . "' ";
    $querycnt = "SELECT ifnull(count(*),0) FROM {node} as n,{users} as u WHERE n.uid=u.uid AND n.nid!='" . $qid . "' and n.type = 'poll'  ";
    $querysub.='AND (';
    for ($i = 0; $i < count($words); $i++) {
      if ($i)
        $querysub.=" OR ";

      //$querysub .= " q.question LIKE CONVERT(_utf8 '%%%s%%' USING latin1 ) COLLATE latin1_swedish_ci ";
      $querysub .= " n.title LIKE CONVERT(_utf8 '%%%s%%' USING utf8 ) COLLATE utf8_general_ci ";


      $flag = true;
    }
    $querysub.=')';

    if ($flag) {
      $query = $query . $querysub . ' group by n.nid';
      $querycnt = $querycnt . $querysub;
    }

    $final = call_user_func_array('sprintf', array_merge((array) $query, $words));
    $querycnt = call_user_func_array('sprintf', array_merge((array) $querycnt, $words));
    $final = preg_replace('/%/', '%%', $final);
    $querycnt = preg_replace('/%/', '%%', $querycnt);
    $count = db_result(db_query($querycnt));
  }

  return array('query' => $final, 'count' => $count);
}

function word_array_filter($word='') {

  $ret = true;
  if (empty($word)) {
    $ret = false;
  }
  elseif (strlen($word) < 3) {
    $ret = false;
  }
  return $ret;
}

function merge_dupeform($form_state, $qid, $dupeid) {
  // Access log settings:
  global $base_url, $user, $base_root;
  $options = array('1' => t('Enabled'), '0' => t('Disabled'));
  $form['merge'] = array(
    '#type' => 'fieldset',
    '#title' => t('Merge the Dupe Issue'),
    '#tree' => TRUE,
  );

  /* Node conversion */

  $query = "select * from {poll_choices} where nid='$qid'";
  $loop = ExecuteQuery($query, 'select');
  $dupe = "select * from {poll_choices} where nid='$dupeid'";
  $dupelist = db_query($dupe);
  $row = array();
  $row['new'] = 'Mark as new';
  while ($gen = db_fetch_object($dupelist)) {
    $row[$gen->chorder] = $gen->chtext;
  }


  foreach ($loop as $main) {
    $period =
            $form['merge'][$main['chorder']] = array(
      '#type' => 'select',
      '#title' => t($main['chtext']),
      '#default_value' => variable_get('timer', 259200),
      '#options' => $row,
      '#description' => t('Possible answers'),
    );
  }
  /* Node conversion */

  $form['qid'] = array('#type' => 'hidden', '#value' => $qid);
  $form['dupeid'] = array('#type' => 'hidden', '#value' => $dupeid);
  //$form['#action'] =$gSitePath.'moderator/ajax/mergesave';
  $form['submit'] = array('#type' => 'submit', '#value' => t('Merge'));
  return $form;
}

function merge_dupeform_validate(&$form, $form_state, $form_id) {
  global $user, $base_root;
//validate form heere
}

function merge_dupeform_submit(&$form, $form_state, $form_id) {
  global $base_url, $user, $base_root;


  $qid = $form['#post']['qid'];
  $dupeid = $form['#post']['dupeid'];
  if (is_numeric($qid) && is_numeric($dupeid) && !is_null($qid) && !is_null($dupeid)) {

    $mainQuest = node_load($qid);
    $dupeQuest = node_load($dupeid);

    $mainQuest->field_issue_country = array_unique(array_merge($mainQuest->field_issue_country, $dupeQuest->field_issue_country));
    $mainQuest->field_issue_state = array_unique(array_merge($mainQuest->field_issue_state, $dupeQuest->field_issue_state));
    $mainQuest->field_issue_city = array_unique(array_merge($mainQuest->field_issue_city, $dupeQuest->field_issue_city));

    //terms for $qid
    $terms = taxonomy_node_get_terms($mainQuest);
    $termlist = array();
    foreach ($terms as $key => $tobj) { // $key is the TID for the displayed node.
      $termlist[] = $tobj->tid;
    }
//temrs for $dupeid
    $terms = taxonomy_node_get_terms($dupeQuest);
    $termlist = array();
    foreach ($terms as $key => $tobj) { // $key is the TID for the displayed node.
      $termlist[] = $tobj->tid;
    }

//prefetch for debate resources merging
    $rtid = get_taxonomy_id('forum', 'Resource');
    $dtid = get_taxonomy_id('forum', 'Debate');


    //merge and filter the dupliacted votes from 2 issues done by same user and set recently voted //PHASE 6
    issue_merge_filter_vote($qid, $dupeid);
    //merge and filter the dupliacted votes from 2 issues done by same user //PHASE 6

    $mainQuest->taxonomy = array_unique($termlist);
    $mainQuest->field_active_rate = array_unique(array_merge($mainQuest->field_active_rate, $dupeQuest->field_active_rate));

    // echo '<pre>';
    // print_r($form_state['values']['merge']);
    //   $paid = $form['#post']['merge'][$dalist['paid']];
//         print_r($mainQuest->choice); exit;


    node_save($mainQuest);
//merging poll choices starts
    $sel_dupe_answers = "select * from {poll_choices} where nid='$qid' ";
    $result = ExecuteQuery($sel_dupe_answers, 'select');
    //send notification mail before update the vote table
    question_merge_mail($qid, $dupeid);

    foreach ($result as $dalist) {

      $paid = $form_state['values']['merge'][$dalist['chorder']];

      if (is_numeric($paid)) {
        db_query("update {poll_votes} set nid='$qid',chorder='" . $dalist['chorder'] . "' where nid='$dupeid' AND chorder='$paid'");
        db_query("delete from {poll_choices} where nid='$dupeid' AND chorder='$paid'");
        //delete short answer
        db_query("delete from {short_answers} where qid='$dupeid' AND chorder='$paid'");

        //  db_query("update {possible_answer_spectrum} set nid='$qid',possible_ans_id='" . $dalist['chid'] . "',possible_chorder='" . $dalist['chorder'] . "' where qid='$dupeid' AND possible_chorder='$paid' ");
        //debate options merging
        //first get the debate for the node
        $sql_debate_forum = "SELECT DISTINCT(f.nid) as forumid FROM forum as f LEFT JOIN content_type_forum as c ON f.nid = c.nid JOIN node as n ON f.nid = n.nid  WHERE f.tid = '$dtid' AND c.field_ref_qid_nid = '$dupeid' ";
        $get_debate_forum = ExecuteQuery($sql_debate_forum, 'select');
        foreach ($get_debate_forum as $tmp_debate_a) {
          db_query("update {debate_options} set chorder='" . $dalist['chorder'] . "' where nid='" . $tmp_debate_a['forumid'] . "' and chorder='$paid'");
        }
        //resource options merging
        //first get the resources for the node
        $sql_resource_forum = "SELECT DISTINCT(f.nid) as forumid FROM forum as f LEFT JOIN content_type_forum as c ON f.nid = c.nid JOIN node as n ON f.nid = n.nid  WHERE f.tid = '$rtid' AND c.field_ref_qid_nid = '$dupeid' ";
        $get_resource_forum = ExecuteQuery($sql_resource_forum, 'select');
        foreach ($get_resource_forum as $tmp_resource_a) {
          db_query("update {resource_options} set chorder='" . $dalist['chorder'] . "' where nid='" . $tmp_resource_a['forumid'] . "' and  chorder='$paid'");
        }
      }
      $totcnt = db_result(db_query("select count(*) from {poll_votes} where nid='$qid' and chorder='" . $dalist['chorder'] . "'"));

      if (is_numeric($totcnt))         // Reset the count of total  votes.
        db_query("UPDATE {poll_choices} SET chvotes =%d WHERE nid = %d AND chorder = %d", $totcnt, $qid, $dalist['chorder']);
    }

    //merge remaining answers in answer table
    $sel_dupe_rem_answers = "select * from {poll_choices} where nid='$dupeid' ";
    $result_rem = ExecuteQuery($sel_dupe_rem_answers, 'select');
    //find the max order and set next value to other choices
    $set_order = db_result(db_query("select max(chorder) from {poll_choices} where nid='$qid' "));



    foreach ($result_rem as $dalist_rem) {

      $set_order = $set_order + 1;
      db_query("update {poll_choices} set nid='$qid',chorder='$set_order' where chid='" . $dalist_rem['chid'] . "' and nid='$dupeid'");
      db_query("update {poll_votes} set nid='$qid',chorder='$set_order' where nid='$dupeid' AND chorder='" . $dalist_rem['chorder'] . "'");
      db_query("update {possible_answer_spectrum} set nid='$qid',possible_chorder='$set_order' where qid='$dupeid' AND possible_ans_id='" . $dalist['chid'] . "' ");
      //short answer
      db_query("update {short_answers} set qid='$qid',chorder='$set_order' where qid='$dupeid' AND chorder='" . $dalist_rem['chorder'] . "'");
      //debate options merging
      db_query("update {debate_options} set chorder='" . $set_order . "',nid='$qid' where nid='$dupeid' and chorder='" . $dalist_rem['chorder'] . "'");
      db_query("update {resource_options} set chorder='" . $set_order . "',nid='$qid' where nid='$dupeid' and  chorder='" . $dalist_rem['chorder'] . "'");
      //debate options merging
      //first get the debate for the node
      $sql_debate_forum = "SELECT DISTINCT(f.nid) as forumid FROM forum as f LEFT JOIN content_type_forum as c ON f.nid = c.nid JOIN node as n ON f.nid = n.nid  WHERE f.tid = '$dtid' AND c.field_ref_qid_nid = '$dupeid' ";
      $get_debate_forum = ExecuteQuery($sql_debate_forum, 'select');
      foreach ($get_debate_forum as $tmp_debate_b) {
        db_query("update {debate_options} set chorder='" . $set_order . "' where nid='" . $tmp_debate_b['forumid'] . "' and chorder='" . $dalist_rem['chorder'] . "'");
      }
      //resource options merging
      //first get the resources for the node
      $sql_resource_forum = "SELECT DISTINCT(f.nid) as forumid FROM forum as f LEFT JOIN content_type_forum as c ON f.nid = c.nid JOIN node as n ON f.nid = n.nid  WHERE f.tid = '$rtid' AND c.field_ref_qid_nid = '$dupeid' ";
      $get_resource_forum = ExecuteQuery($sql_resource_forum, 'select');
      foreach ($get_resource_forum as $tmp_resource_b) {
        db_query("update {resource_options} set chorder='" . $set_order . "' where nid='" . $tmp_resource_b['forumid'] . "' and  chorder='" . $dalist_rem['chorder'] . "'");
      }
      //reset vote count
      $totcnt = db_result(db_query("select count(*) from {poll_votes} where nid='$qid' and chorder=$set_order"));

      if (is_numeric($totcnt))         // Reset the count of total  votes.
        db_query("UPDATE {poll_choices} SET chvotes =%d WHERE nid = %d AND chorder = %d", $totcnt, $qid, $set_order);
    }
    //merge answers ends
    //merge suggest answers
    db_query("update {suggest_answer} set qid='$qid' where qid='$dupeid'");
    db_query("update {suggest_answer_vote} set qid='$qid' where qid='$dupeid'");

    //delete the remaining spectrum for dupe issue
    db_query("delete from {possible_answer_spectrum} where nid='$dupeid'");


    // merge url alias
    // $details = load_question($qid);
    $url = 'node/' . $dupeid;
    $dst = 'node/' . $qid;
    db_query("update {url_alias} set src='" . $dst . "' where src='" . $url . "'");

    /*     * ******Node Conversion******* */

    //debate resource and their neutral, answers options

    db_query("UPDATE {content_type_forum} SET field_ref_qid_nid = '$qid' WHERE field_ref_qid_nid = '$dupeid'");
    $vid = db_result("SELECT vid FROM {node_revisions} WHERE nid = '$qid'");
    db_query("UPDATE {forum} SET nid = '$qid', vid = '$vid' WHERE nid = '$dupeid'");
    db_query("UPDATE {term_node} SET nid = '$qid', vid = '$mainQuest->vid' WHERE nid = '$dupeid' AND tid IN('$rtid', '$dtid')");
    db_query("UPDATE {votingapi_vote} SET content_id = '$qid' WHERE content_id = '$dupeid' AND content_type = 'node'");
    db_query("UPDATE {comments} set nid='$qid' where nid='$dupeid'");


    //Guru points table
    db_query("update {tbl_user_points} set qid='$qid' where qid='$dupeid'");

    //badges table
    db_query("update {user_badges} set qid='$qid' where qid='$dupeid'");

    //delete the dupe Question
    delete_issues($dupeid);



    watchdog('Dupe Issue Merged', 'Dupe Issue [@dupe] merged to [ @issue] By Moderator', array('@dupe' => $dupeQuest->title, '@issue' => $mainQuest->title, '@username' => $user->name), WATCHDOG_INFO);
    //update the comment counts statistics
    $count = db_result(db_query('SELECT IFNULL(COUNT(*),0) FROM {node_comments} nc INNER JOIN {node} n ON n.nid = nc.cid WHERE nc.nid = %d AND n.status = %d', $qid, 1));
    db_query("UPDATE {node_comment_statistics} SET comment_count = %d, last_comment_timestamp = %d, last_comment_name = %d, last_comment_uid = %d,comment_count=%d WHERE nid = %d", 0, NULL, 0, 0, $count, $qid);

    print drupal_json(array('err' => false, 'msg' => 'Successfully Merged the Issues', 'content' => '', 'qid' => $qid));
    // send mail status as edited for final issue
    // question_edited_mail($qid);
  } else {

    watchdog('Dupe Issue Merged Error ', 'Dupe Issue @dupe merged to  @issue By Moderator ', array('@dupe' => $dupe['question'], '@issue' => $details['question'], '@username' => $user->name), WATCHDOG_ERROR);

    print drupal_json(array('err' => true, 'msg' => 'Sorry Merge Process Error Please Redo the Process Again', 'content' => ''));
  }
}

function issue_merge_filter_vote($qid='', $dupeid='') {
  global $base_url, $user;
//remove duplicated votes by same user while merging the issues
  if (is_numeric($qid) && is_numeric($dupeid)) {

    $sel_dupe_answers = "select count(*) as cnt,uid from {poll_votes} where nid in ($qid,$dupeid) group by uid ";
    $result = ExecuteQuery($sel_dupe_answers, 'select');

    foreach ($result as $tmp) {

      $cnt = $tmp['cnt'];
      if ($cnt > 1) {
        $max_date = db_result(db_query("SELECT max(date_voted) FROM {poll_votes} where nid in ($qid,$dupeid) and uid=" . $tmp['uid'] . ""));
        //except the recent one delete the other votes for this specific user
        db_query("delete  from {poll_votes} where nid in ($qid,$dupeid) AND uid=" . $tmp['uid'] . " AND date_voted<'$max_date' ");
      }
      // $totcnt=db_result(db_query("select count(*) from {poll_votes} where qid='$qid' and chorder='".$tmp['chorder']."'"));
      //     if(is_numeric($totcnt))         // Reset the to the votes.
      //   db_query("UPDATE {poll_choices} SET chvotes =%d WHERE nid = %d AND chorder = %d",$totcnt,$qid, $tmp['chorder']);
      // 
    }
  }
  watchdog('Merge Issue duplicate voting filtered ', 'Issue @id duplicate voting filtered while merging ', array('@id' => $qid), WATCHDOG_INFO);
}

function ago($timestamp) {
  $difference = time() - strtotime($timestamp);
  $periods = array("second", "minute", "hour", "day", "week", "month", "years", "decade");
  $lengths = array("60", "60", "24", "7", "4.35", "12", "10");
  for ($j = 0; $difference >= $lengths[$j]; $j++)
    $difference /= $lengths[$j];
  $difference = round($difference);
  if ($difference != 1)
    $periods[$j].= "s";
  $text = "$difference $periods[$j] ago";
  return $text;
}

function moderator_save_issue($array) {
  global $base_url, $user, $gDocPath, $base_root;
  extract($array);
  $output = '';
  $nid = $qid;

  if (!empty($q_quest) && !empty($q_ans1) && !empty($q_ans2) && !empty($q_cat)) {

    /* Node conversion */
    $sql = "SELECT aid FROM {abuse} WHERE oid = '$nid'";
    $flagids = ExecuteQuery($sql, "select");
    foreach ($flagids as $flagid) {
      $fids[] = $flagid['aid'];
    }
    update_flag_badges($fids);

    /*     * ******Node Conversion******* */
    $node = node_load($nid);
    $node->title = check_plain($q_quest);
    $node->body = check_plain($q_context);
    $node->nid = $nid;
    //print_r($node); exit;
    for ($i = 1; $i <= $ans_cnt; $i++) {
      $name = "q_ans" . $i;
      $aid = "aid" . $i;
      $node->choice[$$aid]['chtext'] = $$name;
      $node->choice[$$aid]['chorder'] = $$aid != '' ? $$aid : ($i - 1);
      $node->choice[$$aid]['chvotes'] = $node->choice[$$aid]['chvotes'] != '' ? $node->choice[$$aid]['chvotes'] : 0;
    }
    for ($i = 0; $i <= count($q_country); $i++) {
      $node->field_issue_country[$i]['value'] = $q_country[$i];
    }

    for ($i = 0; $i <= count($q_state); $i++) {
      $state = explode(",", $q_state[$i]);
      $node->field_issue_state[$i]['value'] = $state[0];
      //$node->field_scountry_value[$i]['value'] = $state[1];
    }
    for ($i = 0; $i <= count($q_city); $i++) {
      $city = explode(",", $q_city[$i]);
      $node->field_issue_city[$i]['value'] = $city[0];
      //$node->field_cstate_value[$i]['value'] = $city[1];
      //$node->field_ccountry_value[$i]['value'] = $city[2];
    }

    // print_r($node); exit;
    $nodeVal = node_save($node);

    // taxonomy (categories here)
    $q_cat = $q_cat != '' ? $q_cat : array();
    $q_scat = $q_scat != '' ? $q_scat : array();
    $q_sscat = $q_sscat != '' ? $q_sscat : array();

    $term = array_merge($q_cat, $q_scat, $q_sscat);
    taxonomy_node_save($node, $term);

    /* SAVING META INFORMATION */
    //$query = "SELECT * FROM {possible_answer} where qid='" . $nid . "' ";
    /* Node conversion */
    $query = "SELECT * FROM {poll_choices} where nid='" . $nid . "' ORDER BY chorder ASC";
    $ans = ExecuteQuery($query, "select");

    $chk_exsit = db_result(db_query("select count(*) from {possible_answer_spectrum} where qid='$nid'"));
    if ($chk_exsit) {

      $Spec_query2 = db_query("delete from {possible_answer_spectrum} where qid=%d", $nid);
    }
    $i = 1;
    foreach ($ans as $ans_array) {
      $row_count = 1;
      $Spec_query2 = db_query("SELECT political_spec_id FROM {political_spectrum}");
      /* insert short answers for each answer */
      $short_ans = 'short_answer_' . $i . '_' . $ans_array['chorder'];
      if ($short_ans != '') {
        db_query("DELETE FROM {short_answers} WHERE qid = '%d' AND chorder = '%d'", $nid, $ans_array['chorder']);
        db_query("INSERT INTO {short_answers} SET chid = '%d', short_answer = '%s', chorder = '%d', qid = '%d'", $ans_array['chid'], $$short_ans, $ans_array['chorder'], $nid);
      }
      /* insert short answers for each answer */
      while ($Spec_result2 = db_fetch_object($Spec_query2)) {
        $radio_output = "sel_" . $ans_array['chorder'] . "_" . $Spec_result2->political_spec_id . "_" . $row_count;
        $posted_rating = $array["$radio_output"];
        $ans_id = $ans_array['chid'];
        $political_id = $Spec_result2->political_spec_id;
        /* echo '<pre>';
          echo $posted_rating.'-';
          echo $Spec_result2->political_spec_id.'<br>'; */
        $sql = "insert into possible_answer_spectrum set qid= '$nid' , possible_ans_id='$ans_id' , political_spec_id='$political_id', possible_chorder = '" . $ans_array['chorder'] . "',value='$posted_rating'";
        $insert_query = db_query($sql);
        $row_count++;
      }
      $i++;
    }
    /* SAVING META INFORMATION */
    /*     * ******Node Conversion******* */
    //location

    $output['msg'] = 'Thank you, Question updated successfully!';
    $output['err'] = false;

    //	print_r($result);
    question_edited_mail($nid);
    question_edited_mail_voters($nid);
    question_edited_mail_suggest($nid);
    //  drupal_goto("admin/moderatequestion");
  }
  else {


    $output['msg'] = 'Sorry, Some of the (*) required fields are Empty!';
    $output['err'] = true;
  }

  return $output;
}

//Badges call back
function update_flag_badges($qids) {
  if ($qids) {
    foreach ($qids as $qid) {
      $sql = "SELECT uid,oid FROM (abuse) WHERE oid = '$qid' AND type = 'node'";
      $users = ExecuteQuery($sql, 'select');

      foreach ($users as $user) {
        $uid = $user['uid'];
        $qid = $user['oid'];
        scrutineer($uid, $qid);
      }
    }
  }
}

function moderator_flag_save() {
  global $base_url, $user, $gDocPath, $base_root;


  if ($_REQUEST['actions']) {

    $qids = implode(',', $_REQUEST['qids']);

    question_flagged_mail($qids);
    // $query = db_query("delete from {question_flags} where type='question' AND nodeid in ($qids)");
    $delids = $_REQUEST['qids'];
    foreach ($delids as $qid) {
      _abuse_cleanup_content('node', $qid);
    }
    $msg = '<div class="success">Question updated successfully!</div>';
  }
  else {
    /*
      $query = "select nodeid from {question_flags} where fid in ($qids)";
      $ids = ExecuteQuery($query, "select");
      $target = array();

      foreach ($ids as $value) {
      $target = $value;
      }

      $target = array_unique($target);
      $qids = implode(',', $target);

     */
    $qids = $_REQUEST['qids'];
    $reporttext = check_plain($_REQUEST['reporttext']);
    foreach ($qids as $id) {
      question_flagged_ignore_mail($id, $reporttext);
    }

    // badges award "scruitneer"
    update_flag_badges($_REQUEST['qids']);

    //delete from db
    $qids = implode(',', $_REQUEST['qids']);
    delete_issues($qids);


    $msg = '<div class="success">Question updated successfully!</div>';
  }
  return $msg;
}

function question_flagged_ignore_mail($qaid, $reporttext) {
  global $base_url, $user, $gDocPath, $base_root;

  $from = variable_get('site_mail');
  $subject_proj = "Heardmentality Issue Has Been Rejected";
  // $delmsg = 'Has been Deleted By Headmentality admin';
  $qry = "select u.mail,q.question,u.name,q.url  from {question} as q left join {users} as u on u.uid=q.uid where q.qid='$qaid' ";

  $query = db_query($qry);
  $det = db_fetch_object($query);

  $to = $det->mail;
  //$msg = '<br/>Question : '.$det->question.' '.$delmsg.'<br/>';

  $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
  $rs_mgmt = db_query($sel_user_cmt);
  $list_content = db_fetch_object($rs_mgmt);

  $contentm = str_replace("#uname#", $det->name, $list_content->content);
  // $contentm = str_replace("#anothername#",$user->name, $contentm);
  $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
  //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
  $contentm = str_replace("#content#", " Question Rejected By Moderator due to <br/><b>$reporttext</b>", $contentm);
  //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
  $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
  db_query($ins_qry, $from, $from, $to, $subject_proj, $contentm);

  /*  if (! empty($to)) {
    $mail_suc = htmlmail($to, $subject, $msg, $from, '');
    } */
  return true;
}

function question_flagged_mail($qaid) {
  global $user;

  $from = variable_get('site_mail');
  $subject_proj = "Heardmentality Question Has Been Ignore";
  // $delmsg = 'Has been Deleted By Headmentality admin';
  $qry = "select u.mail,q.question,u.name,q.url  from {question} as q left join {users} as u on u.uid=q.uid where q.qid='$qaid' ";

  $query = db_query($qry);
  $det = db_fetch_object($query);

  $to = $det->mail;
  //$msg = '<br/>Question : '.$det->question.' '.$delmsg.'<br/>';

  $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
  $rs_mgmt = db_query($sel_user_cmt);
  $list_content = db_fetch_object($rs_mgmt);

  $contentm = str_replace("#uname#", $det->name, $list_content->content);
  // $contentm = str_replace("#anothername#",$user->name, $contentm);
  $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
  //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
  $contentm = str_replace("#content#", 'Issue Ignore By Moderator which are flagged by site users', $contentm);
  //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
  $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
  db_query($ins_qry, $from, $from, $to, $subject, $contentm);
  /*  if (! empty($to)) {
    $mail_suc = htmlmail($to, $subject, $msg, $from, '');
    } */
  return true;
}

function moderator_new_save($qids='') {
  global $user;
  $qids = implode(',', $qids);
  if ($_REQUEST['actions']) {

    // $query = db_query("update {question} set status='" . $_REQUEST['actions'] . "' where qid in ($qids)");
    //   $msg='<div class="success">Question updated successfully!</div>';
  }
  else {

    //send flag mails
    flag_quest_mail($qids);

    // delete from db
    delete_issues($qids);
    $msg = '<div class="success">Selected Issue(s) has been rejected successfully!</div>';
  }
  return $msg;
}

function delete_issues($qids='') {

  global $user;
  $delids = explode(",", $qids);
  foreach ($delids as $delid) {
    //delete issues
    node_delete($delid);
    db_query("DELETE FROM {short_answers} WHERE qid = '%d'", $delid);
    db_query("DELETE FROM {debate_options} WHERE nid = '%d'", $delid);
    db_query("DELETE FROM {resource_options} WHERE nid = '%d'", $delid);
    db_query("DELETE FROM {suggest_answer} WHERE qid = '%d'", $delid);
    //delete flags
    _abuse_cleanup_content('node', $delid);
  }
}

// moderator hide issue from stream

function moderator_hide_issue($nid) {
  global $user;
  $node = node_load($nid);
  // make revision of this node
  $node->revision = TRUE;
  node_save($node);
  return 'hi';
}

function flag_quest_mail($qids = '') {

  global $user;

  $from = variable_get('site_mail');
  $subject = 'Heardmentality Flag  Question Removal';
  $reporttext = $_REQUEST['reporttext'];
  $qids = explode(',', $qids);

  foreach ($qids as $id) {


    $query = db_query("select u.mail,q.question  from {question} as q left join {users} as u on u.uid=q.uid where qid='$id' ");
    $det = db_fetch_object($query);

    $to = $det->mail;
    $msg .= '<br/>Question : ' . $det->question . '<br/>';
    if (!empty($to)) {

      // $mail_suc = htmlmail($to, $subject, $msg, $from, '');

      $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='8'";
      $rs_mgmt = db_query($sel_user_cmt);
      $list_content = db_fetch_object($rs_mgmt);

      $contentm = str_replace("#uname#", $det->name, $list_content->content);
      // $contentm = str_replace("#anothername#",$user->name, $contentm);
      $contentm = str_replace("#question#", rtrim($det->question, '?') . '?', $contentm);
      //$contentm = str_replace("#link#", $gSitePath . $det->url, $contentm);
      $contentm = str_replace("#content#", " Your Issue has been Rejected By Headmentality Moderator due to <br/><b>$reporttext</b>", $contentm);
      //$mail_success = htmlmail_function($u_rows->email, $subject_proj, $contentm, '');
      $ins_qry = "insert into {hm_mails} (from_mail_id,user_from_id,user_to_id,subject,content,posted_date) values ('%s','%s','%s','%s','%s',now())";
      db_query($ins_qry, $from, $from, $to, $subject, $contentm);
    }
  }
  return true;
}

function meta_data_generate($i = '', $pos_spectrum = array()) {
  $rangeQuery = db_query("SELECT min(spec_min_range) as minimum,max(spec_max_range) as maximum FROM political_spectrum");
  while ($range = db_fetch_object($rangeQuery)) {
    $min = $range->minimum;
    $max = $range->maximum;
  }
  // top numbers
  for ($j = $min; $j <= $max; $j++) {
    $mNum .= '<span>' . $j . '</span>';
  }
  $form['meta_val_div_' . $i] = array('#type' => 'markup',
    '#value' => '<div class="privacy-answer">
                                    ' . $mNum . '
                                    </div><br>');
  $Spec_query1 = db_query("SELECT political_spec_id,spec_name,spec_min_range,spec_max_range FROM political_spectrum");

  $count = 1;
  while ($spec = db_fetch_object($Spec_query1)) {
    $minRange = $spec->spec_min_range;
    $maxRange = $spec->spec_max_range;
    $spec_name = $spec->spec_name;
    list($left, $right) = explode(' ', $spec_name);

    $form['left_val_' . $count] = array('#type' => 'markup', '#value' => '<span class="left">' . t($left) . '/' . t($right) . '</span>');
    $form['radio_div_' . $count] = array('#type' => 'markup', '#value' => '<div id="radio-div">');
    for ($c = $minRange; $c <= $maxRange; $c++) {
      $meta[$c] = '';
    }
    $form['meta' . $i . '_' . $count . '_values'] = array('#type' => 'radios',
      '#options' => $meta,
      '#parents' => array('choice', $i, 'meta' . $count . '_values'),
      '#default_value' => $pos_spectrum[($count - 1)],
    );
    $form['radio_div_close_' . $count] = array('#type' => 'markup', '#value' => '</div>');

    $form['mark_' . $count] = array('#type' => 'markup', '#value' => '<br /><div class="clear"></div>');
    unset($meta);
    $count++;
  }
  return $form;
}

function moderator_ahah_callback($type = '', $key = '') {

  if ($type == 'category') {
    $qid = $_POST['qid'];
    // selected categories
    // get categories for a question
    $qry_cat = "SELECT tid from {term_node} where nid='" . $qid . "'";
    $result_cat = db_query($qry_cat);
    $cat = array();

    while ($quest_cat = db_fetch_object($result_cat)) {
      $cat[] = $quest_cat->tid;
    }

//print_r($cat);exit;
    if ($key == 'scat') {

      $catids = $_POST['q_cat'];
      $fieldName1 = 'q_scat';
    }
    if ($key == 'sscat') {

      $catids = $_POST['q_scat'];
      $fieldName2 = 'q_sscat';
    }
    $cids = implode(",", $catids);
    // SET SUB CATEGORIES

    $scats = array();

    foreach ($catids as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $tid => $value) {
        $stid[] = $tid;
      }

      array_push($scats, $stid);
    }
    // print_r($stid);exit;
    $i = 0;
    if (count($stid) > 0) {
      foreach ($stid as $value => $scid) {
        $options[$scid] = t(db_result(db_query("SELECT name FROM {term_data} WHERE tid = '" . $scid . "'")));
        $i++;
      }
    }
    else {
      $options[] = t('No Sub Category');
    }
    //print_r($firstLevel); exit;
    //print_r($keys[0]);exit;
    if ($key == 'scat') {

      $fields['q_scat'] = array('#type' => 'select',
        '#options' => $options,
        '#multiple' => 'multiple',
        '#ahah' => array('wrapper' => 'sub-sub-cat-wrapper',
          'path' => 'moderator/issue/ahah/category/sscat',
          'effect' => 'fade',
          'event' => 'click',
        ),
        '#size' => 5,
        '#value' => $cat,
        '#id' => 'q_scat',
      );

      $output .= ahah_render($fields, $fieldName1);
    }
    if ($key == 'sscat') {

      $fields['q_sscat'] = array('#type' => 'select',
        '#options' => $options,
        '#multiple' => 'multiple',
        '#size' => 5,
        '#value' => $cat,
        '#id' => 'q_sscat');

      $output .= ahah_render($fields, $fieldName2);
    }
  }
  elseif ($type == 'location') {
    $qid = $_POST['qid'];
    if ($key == 'state') {
      // select state
      $sQuery = db_query("SELECT field_issue_state_value AS state_code FROM {content_field_issue_state} WHERE nid = '$qid'");
      while ($list = db_fetch_object($sQuery)) {
        $selectedStates[] = $list->state_code;
      }

      $countryNames = $_POST['q_country'];
      $fieldNameState = 'q_state';


      if (!empty($countryNames)) {

        $countryList = geonames_query('countryinfo', NULL, $options);
        foreach ($countryNames as $country) {
          $xyz = geonames_countryinfo($country);
          $query = array('geonameid' => $xyz['geonameid']);
          $results = geonames_query('children', $query);
          // krumo($results);
          foreach ($results->results as $state) {
            $states[$state['geonameid']] = $state['name'];
          }
          // print_r($states);
        }
      }
      else {
        $states[] = t('No countries selected');
      }

      $fields['q_state'] = array('#type' => 'select', '#options' => $states,
        '#multiple' => 'multiple',
        '#ahah' => array('wrapper' => 'city-wrapper',
          'path' => 'moderator/issue/ahah/location/city',
          'effect' => 'fade',
          'event' => 'click',),
        '#size' => 5,
        '#id' => 'q_state',
        '#value' => $selectedStates);

      $output .= ahah_render($fields, $fieldNameState);
    }
    if ($key == 'city') {

      // select city
      $cQuery = db_query("SELECT field_issue_city_value AS city_code FROM {content_field_issue_city} WHERE nid = '$qid'");
      while ($list = db_fetch_object($cQuery)) {
        $selectedCities[] = $list->city_code;
      }

      // print_r($selectedCities);



      $steateIds = $_POST['q_state'];
      $fieldNameCity = 'q_city';

      if (!empty($steateIds)) {
        foreach ($steateIds as $code) {
          $explode = explode(',', $code);
          $query = array('geonameid' => $explode[0]);
          $result = geonames_query('children', $query);
          foreach ($result->results as $state) {
            $cities[$state['geonameid'] . $explode[0] . $explode[1]] = $state['name'];
          }
        }
      }
      else {
        $cities[] = t('No states selected');
      }

      $fields['q_city'] = array('#type' => 'select', '#options' => $cities,
        '#multiple' => 'multiple',
        '#size' => 5,
        '#value' => $selectedCities);

      $output .= ahah_render($fields, $fieldNameCity);
    }
  }

// set ahah behaviour for inner rendering buttons
  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.
  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {

          $filefield_ahah_settings[$id] = $ahah_settings;
        }
      }
    }
  }


  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, ' . drupal_to_js($filefield_ahah_settings) . ');</script>';
  }

//  $loadjs = 'jQuery(document).ready(function () {
//                    jQuery.getScript("'.drupal_get_path('module', 'moderator') . '/scripts/multi_select.js'.'");
//                    multi_select();});';
//
//  $output  .= drupal_add_js($loadjs, 'inline');
//$output .= '<script type="text/javascript">
  //  window.onload = multi_select();</script>';
  //print drupal_to_js(array('data' => $output, 'status' => true));
  print drupal_json(array('data' => $output, 'status' => true));
}

// submit moderatr edit issues
function moderator_edit_issue_form_submit($form, &$form_state) {
  global $base_url, $user, $gDocPath, $base_root;
  $sql = "SELECT aid FROM {abuse} WHERE oid = '$nid'";
  $flagids = ExecuteQuery($sql, "select");
  foreach ($flagids as $flagid) {
    $fids[] = $flagid['aid'];
  }
  update_flag_badges($fids);
  //save values
  $nid = $form_state['values']['qid'];
  $title = $form_state['values']['title'];
  $context = $form_state['values']['context'];
  $node = node_load($nid);
  $node->title = check_plain($title);
  $node->body = check_plain($context);
  $node->nid = $nid;

  $ans_cnt = count($form_state['values']['choice']);
  for ($i = 0; $i < $ans_cnt; $i++) {
    $chorder = $form_state['values']['choice'][$i]['chorder'];
    $chvotes = $form_state['values']['choice'][$i]['chvotes'];
    $node->choice[$i]['chtext'] = $form_state['values']['choice'][$i]['answer'];
    $node->choice[$i]['chorder'] = $chorder != '' ? $chorder : $i;
    $node->choice[$i]['chvotes'] = $chvotes != '' ? $chvotes : 0;
  }
  $node->revision = TRUE;
  //****** set field_mod_status as 1 if 3 moderators updated this issue ******///
  $revisions = node_revision_list($node);
  foreach ($revisions as $revision) {
    if ($revision->uid != $node->uid && $revision->uid != $user->uid) {
      $uid[] = $revision->uid;
    }
  }
  $modids = $uid != '' ? array_unique($uid) : array();
  $modCount = count($modids);
  if ($modCount == 2) {
    // set status as 1 for 3rd moderator
    $node->field_mod_status[0]['value'] = 1;
  }
  //****** set field_mod_status as 1 if 3 moderators updated this issue ******///
  // taxonomy terms
  $q_cat = $form_state['clicked_button']['#post']['q_cat'] != '' ? $form_state['clicked_button']['#post']['q_cat'] : array();
  $q_scat = $form_state['clicked_button']['#post']['q_scat'] != '' ? $form_state['clicked_button']['#post']['q_scat'] : array();
  $q_sscat = $form_state['clicked_button']['#post']['q_sscat'] != '' ? $form_state['clicked_button']['#post']['q_sscat'] : array();
  $term = array_merge($q_cat, $q_scat, $q_sscat);


  // location details
  db_query('DELETE FROM {content_field_issue_country} WHERE vid = %d', $node->vid);
  db_query('DELETE FROM {content_field_issue_state} WHERE vid = %d', $node->vid);
  db_query('DELETE FROM {content_field_issue_city} WHERE vid = %d', $node->vid);

  $q_country = $form_state['clicked_button']['#post']['q_country'];
  $q_state = $form_state['clicked_button']['#post']['q_state'];
  $q_city = $form_state['clicked_button']['#post']['q_city'];
  if ($q_country) {
    foreach ($q_country as $key => $country) {
      $countries[] = $country;
    }
  }
  if ($q_state) {
    foreach ($q_state as $key => $state) {
      $states[] = $state;
    }
  }
  if ($q_city) {
    foreach ($q_city as $key => $city) {
      $cities[] = $city;
    }
  }
  for ($i = 0; $i <= count($q_country); $i++) {
    $node->field_issue_country[$i]['value'] = $countries[$i];
  }

  for ($i = 0; $i <= count($q_state); $i++) {
    $state = explode(",", $q_state[$i]);
    $node->field_issue_state_text[$i]['value'] = $form['q_state']['q_state']['#options'][$states[$i]];
    $node->field_issue_state[$i]['value'] = $states[$i];
    //   krumo($node);
    //$node->field_scountry_value[$i]['value'] = $state[1];
  }
  for ($i = 0; $i <= count($q_city); $i++) {
    $city = explode(",", $q_city[$i]);
    $node->field_issue_city[$i]['value'] = $cities[$i];
  }

  node_save($node);
  taxonomy_node_delete($node);
  taxonomy_node_save($node, $term);

  /* SAVING META INFORMATION for each moderator */
  $query = "SELECT * FROM {poll_choices} where nid='" . $nid . "' ORDER BY chorder ASC";
  $ans = ExecuteQuery($query, "select");

  $chk_exsit = db_result(db_query("select count(*) from {possible_answer_spectrum} where qid='$nid' AND uid = '$user->uid'"));
  if ($chk_exsit) {

    $Spec_query2 = db_query("delete from {possible_answer_spectrum} where qid=%d AND uid=%d", $nid, $user->uid);
  }
  $i = 0;
  foreach ($ans as $ans_array) {
    $row_count = 1;
    $Spec_query2 = db_query("SELECT political_spec_id FROM {political_spectrum}");
    /* insert short answers for each answer */
    $short_ans = $form_state['values']['choice'][$i]['short_answer'];
    if ($short_ans != '') {
      db_query("DELETE FROM {short_answers} WHERE qid = '%d' AND chorder = '%d'", $nid, $ans_array['chorder']);
      db_query("INSERT INTO {short_answers} SET chid = '%d', short_answer = '%s', chorder = '%d', qid = '%d'", $ans_array['chid'], $short_ans, $ans_array['chorder'], $nid);
    }
    /* insert short answers for each answer */
    while ($Spec_result2 = db_fetch_object($Spec_query2)) {
      $metaCnt = 'meta' . $row_count . '_values';
      $posted_rating = $form_state['values']['choice'][$i][$metaCnt] . '<br />';
      $ans_id = $ans_array['chid'];
      $political_id = $Spec_result2->political_spec_id;
      $sql = "insert into possible_answer_spectrum set qid= '$nid' , possible_ans_id='$ans_id' , political_spec_id='$political_id', possible_chorder = '" . $ans_array['chorder'] . "',value='$posted_rating', uid = '$user->uid'";
      $insert_query = db_query($sql);
      $row_count++;
    }

    $i++;
  }

  question_edited_mail($nid);
  question_edited_mail_voters($nid);
  question_edited_mail_suggest($nid);
  drupal_set_message('Thank you, Question updated successfully!', 'success');
}

function moderator_add_choice_callback() {
  $delta = count($_POST['choice']);

  // Build our new form element.
  $form_element = _mod_answer_form($delta);
  drupal_alter('form', $form_element, array(), 'moderator/issue/addanswer');

  // Build the new form.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form['choice_wrapper']['choice'][$delta] = $form_element;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  $form_state['post'] = $_POST;
  // Build, validate and if possible, submit the form.
  // drupal_process_form($form_id, $form, $form_state);
  // Rebuild the form.
  $form = form_builder($form_id, $form, $args, $form_state);
//  $validate = issue_form_validate($form, $form_state);
//  if($validate){$delta = 1;}
  // Render the new output.

  $choice_form = $form['choice_wrapper']['choice'];
  unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.
  $choice_form[$delta]['#attributes']['class'] = empty($choice_form[$delta]['#attributes']['class']) ? 'ahah-new-content' : $choice_form[$delta]['#attributes']['class'] . ' ahah-new-content';
  //$choice_form[$delta]['chvotes']['#value'] = 0;
  $output = drupal_render($choice_form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function moderator_theme($existing, $type, $theme, $path) {

  return array(
    'mod_answer_des' => array(
      'arguments' => array('form' => NULL),
    ),
    'moderator_issue_stream' => array(
      'template' => 'moderator-issue-stream',
      'arguments' => array('nid' => NULL, 'issue' => NULL),
    ),
    'moderator_stream' => array(
      'template' => 'moderator-stream',
      'arguments' => array('filter' => NULL, 'streams' => NULL, 'pagination' => NULL),
    ),
    'mod_history_thread' => array(
      'template' => 'moderate-history-thread',
      'arguments' => array('modName' => NULL, 'updatedOn' => NULL),
    ),
    'mod_history_view' => array(
      'template' => 'moderate-history-view',
      'arguments' => array('modHistory' => NULL, 'originalLanguage' => NULL, 'originalPath' => NULL),
    ),
    'moderate_issue_edit_details' => array(
      'template' => 'moderate-issue-edit-details',
      'arguments' => array('moderateForm' => NULL, 'possibleDupeForm' => NULL, 'moderationHistory' => NULL),
    ),
  );
}

function theme_mod_answer_des($form) {
  // Change the button title to reflect the behavior when using JavaScript.
  drupal_add_js('if (Drupal.jsEnabled) { $(document).ready(function() { $("#edit-poll-more").val("' . t('Add Another Answer') . '"); }); }', 'inline');
}

// moderator generate dynamic answer form here
function _mod_answer_form($delta, $answer = '', $short_answer = '', $pos_spectrum = array(), $chorder = '', $votes = '') {
  $form = array(
    '#tree' => TRUE,
  );
  // limited fields 10 (0 to 9)
  if ($delta == 0 || $delta == 1) {
    $req = TRUE;
  }
  else {
    $req = FALSE;
  }
  if ($delta < 10) {
    //$answer = $value[$delta]['chtext']!=''?$value[$delta]['chtext']:'';
    $aCount = $delta + 1;
    if ($delta == 0 || $delta == 1) {
      $req = TRUE;
    }
    else {
      $req = FALSE;
    }
    $form['ans_title_' . $delta] = array('#type' => 'markup', '#value' => '<label for="" class="add-on"><span class="title ">' . t('Answer') . ' ' . $aCount . '</span></label>');
    //$form['meta_open_'.$delta] = array('#type' => 'markup', '#value' => '<div id="main-open">');

    $form['answer'] = array('#type' => 'textfield',
      '#suffix' => '<div class="clr"></div>',
      '#parents' => array('choice', $delta, 'answer'),
      '#default_value' => $answer,
      '#id' => 'q_ans' . $delta,
      '#required' => $req,
      '#attributes' => array('class' => 'b-textbox'),
    );
    $form['chorder'] = array('#type' => 'hidden',
      '#suffix' => '<div class="clr"></div>',
      '#parents' => array('choice', $delta, 'chorder'),
      '#default_value' => $chorder,
    );
    $form['chvotes'] = array('#type' => 'hidden',
      '#suffix' => '<div class="clr"></div>',
      '#parents' => array('choice', $delta, 'chvotes'),
      '#default_value' => $votes,
    );
    $form['short_answer_title'] = array('#type' => 'markup', '#value' => '<label for="" class="add-on"><span class="title ">Short Answer</span><br><span class="guides">Sed ut perspiciatis unde omnis iste natusab illo inventore </span> </label>');
    $form['short_answer'] = array('#type' => 'textfield',
      '#maxlength' => 16,
      '#parents' => array('choice', $delta, 'short_answer'),
      '#default_value' => $short_answer,
      '#suffix' => ' <br class="clear">',
      '#id' => 'Answer',
    );
    // get meta dada info
    $form['meta_info'] = array('#type' => 'markup',
      '#value' => '<label for="" class="add-on"><span class="title ">Assign Values</span> </label>
						<br class="clear">
                                                ');

    $form['meta'] = meta_data_generate($delta, $pos_spectrum);
//  $form['meta_info_close'] = array('#type' => 'markup',
//                                '#value' => '</div>');
    $form['meta_close'] = array('#type' => 'markup', '#value' => '<div class="clear"></div>');
  }
  else {
    $form['error_msg'] = array(
      '#type' => 'markup',
      '#value' => t('Maximum Fields Exceeded'),
      '#prefix' => '<label><span class="error">', '#suffix' => '</span></label>',
    );
  }
  return $form;
}

// moderator cron
function moderator_cron() {
  global $user, $language;
  $query = db_query("SELECT n.nid FROM {content_type_poll} AS cp JOIN {node} AS n ON cp.nid=n.nid WHERE cp.field_mod_status_value='%d' AND n.type='%s' AND n.tnid='%d' AND n.translate='%d'", 1, 'poll', 0, 0);
  while ($langNode = db_fetch_object($query)) {
    $nid = $langNode->nid;
    $node = node_load($nid);
    //echo '<pre>'; print_r($node); exit;
    // add content in multi languages (title, body, choices)
    issue_translator_action_node_translate($node);
    db_query("UPDATE {node} SET translate = '%d', tnid = '%d' WHERE nid = '%d' AND translate = '%d'", 1, $nid, $nid, 0);
  }
}

function removeCommonWords($input) {

  // EEEEEEK Stop words
  $commonWords = array('a', 'able', 'about', 'above', 'abroad', 'according', 'accordingly', 'across', 'actually', 'adj', 'after', 'afterwards', 'again', 'against', 'ago', 'ahead', 'ain\'t', 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'alongside', 'already', 'also', 'although', 'always', 'am', 'amid', 'amidst', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', 'aren\'t', 'around', 'as', 'a\'s', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', 'b', 'back', 'backward', 'backwards', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'begin', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', 'c', 'came', 'can', 'cannot', 'cant', 'can\'t', 'caption', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'c\'mon', 'co', 'co.', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', 'couldn\'t', 'course', 'c\'s', 'currently', 'd', 'dare', 'daren\'t', 'definitely', 'described', 'despite', 'did', 'didn\'t', 'different', 'directly', 'do', 'does', 'doesn\'t', 'doing', 'done', 'don\'t', 'down', 'downwards', 'during', 'e', 'each', 'edu', 'eg', 'eight', 'eighty', 'either', 'else', 'elsewhere', 'end', 'ending', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'evermore', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', 'f', 'fairly', 'far', 'farther', 'few', 'fewer', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'forever', 'former', 'formerly', 'forth', 'forward', 'found', 'four', 'from', 'further', 'furthermore', 'g', 'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', 'h', 'had', 'hadn\'t', 'half', 'happens', 'hardly', 'has', 'hasn\'t', 'have', 'haven\'t', 'having', 'he', 'he\'d', 'he\'ll', 'hello', 'help', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'here\'s', 'hereupon', 'hers', 'herself', 'he\'s', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'hundred', 'i', 'i\'d', 'ie', 'if', 'ignored', 'i\'ll', 'i\'m', 'immediate', 'in', 'inasmuch', 'inc', 'inc.', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'inside', 'insofar', 'instead', 'into', 'inward', 'is', 'isn\'t', 'it', 'it\'d', 'it\'ll', 'its', 'it\'s', 'itself', 'i\'ve', 'j', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'known', 'knows', 'l', 'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'let\'s', 'like', 'liked', 'likely', 'likewise', 'little', 'look', 'looking', 'looks', 'low', 'lower', 'ltd', 'm', 'made', 'mainly', 'make', 'makes', 'many', 'may', 'maybe', 'mayn\'t', 'me', 'mean', 'meantime', 'meanwhile', 'merely', 'might', 'mightn\'t', 'mine', 'minus', 'miss', 'more', 'moreover', 'most', 'mostly', 'mr', 'mrs', 'much', 'must', 'mustn\'t', 'my', 'myself', 'n', 'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'needn\'t', 'needs', 'neither', 'never', 'neverf', 'neverless', 'nevertheless', 'new', 'next', 'nine', 'ninety', 'no', 'nobody', 'non', 'none', 'nonetheless', 'noone', 'no-one', 'nor', 'normally', 'not', 'nothing', 'notwithstanding', 'novel', 'now', 'nowhere', 'o', 'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'one\'s', 'only', 'onto', 'opposite', 'or', 'other', 'others', 'otherwise', 'ought', 'oughtn\'t', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', 'p', 'particular', 'particularly', 'past', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provided', 'provides', 'q', 'que', 'quite', 'qv', 'r', 'rather', 'rd', 're', 'really', 'reasonably', 'recent', 'recently', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 'round', 's', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'shan\'t', 'she', 'she\'d', 'she\'ll', 'she\'s', 'should', 'shouldn\'t', 'since', 'six', 'so', 'some', 'somebody', 'someday', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', 't', 'take', 'taken', 'taking', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', 'that\'ll', 'thats', 'that\'s', 'that\'ve', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'there\'d', 'therefore', 'therein', 'there\'ll', 'there\'re', 'theres', 'there\'s', 'thereupon', 'there\'ve', 'these', 'they', 'they\'d', 'they\'ll', 'they\'re', 'they\'ve', 'thing', 'things', 'think', 'third', 'thirty', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'till', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 't\'s', 'twice', 'two', 'u', 'un', 'under', 'underneath', 'undoing', 'unfortunately', 'unless', 'unlike', 'unlikely', 'until', 'unto', 'up', 'upon', 'upwards', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', 'v', 'value', 'various', 'versus', 'very', 'via', 'viz', 'vs', 'w', 'want', 'wants', 'was', 'wasn\'t', 'way', 'we', 'we\'d', 'welcome', 'well', 'we\'ll', 'went', 'were', 'we\'re', 'weren\'t', 'we\'ve', 'what', 'whatever', 'what\'ll', 'what\'s', 'what\'ve', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'where\'s', 'whereupon', 'wherever', 'whether', 'which', 'whichever', 'while', 'whilst', 'whither', 'who', 'who\'d', 'whoever', 'whole', 'who\'ll', 'whom', 'whomever', 'who\'s', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', 'wonder', 'won\'t', 'would', 'wouldn\'t', 'x', 'y', 'yes', 'yet', 'you', 'you\'d', 'you\'ll', 'your', 'you\'re', 'yours', 'yourself', 'yourselves', 'you\'ve', 'z', 'zero');

  $input = preg_replace('/\b(' . implode('|', $commonWords) . ')\b/', '', $input);
  return $output = preg_replace('!\s+!', ' ', $input);
}

