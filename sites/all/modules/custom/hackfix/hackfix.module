<?php

function ExecuteQuery($Query, $Qrytype) {
  if (!empty($Query) && !empty($Qrytype)) {
    switch (strtolower($Qrytype)) {
      case "select":
        $Result = db_query($Query);
        if ($Result) {
          $ResultSet = array();
          while ($ResultSet1 = mysql_fetch_array($Result))
            $ResultSet[] = $ResultSet1;
          return $ResultSet;
        }
        else
          return false;
        break;
      case "update":
        $Result = db_query($Query);
        if ($Result) {
          $AffectedNums = mysql_affected_rows();
          return $AffectedNums;
        }
        else
          return false;
        break;
      case "norows":
        $Result = db_query($Query);
        if ($Result) {
          $Totalrows = mysql_num_rows($Result);
          return $Totalrows;
        }
        else
          return false;
        break;

      case "insert":
        $Result = db_query($Query);
        if ($Result) {
          $LastInsertedRow = mysql_insert_id();
          return $LastInsertedRow;
        }
        else
          return false;
        break;
      case "delete":
        $Result = db_query($Query);
        if ($Result)
          return true;
        else
          return false;
    }
  }
}

function pager_query_new($query, $limit = 10, $element = 0, $count_query = NULL) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';

  // Substitute in query arguments.
  $args = func_get_args();
  $args = array_slice($args, 4);
  // Alternative syntax for '...'
  if (isset($args[0]) && is_array($args[0])) {
    $args = $args[0];
  }

  // Construct a count query if none was given.
  if (!isset($count_query)) {
    $count_query = preg_replace(array('/SELECT.*?FROM /As', '/ORDER BY .*/'), array('SELECT COUNT(*) FROM ', ''), $query);
  }

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // We calculate the total of pages as ceil(items / limit).
  //$pager_total_items[$element] = db_result(db_query($count_query, $args));
  //edited for supporting inner and sub queries
  $pager_total_items[$element] = $count_query;
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int) $pager_page_array[$element], ((int) $pager_total[$element]) - 1));
  return db_query_range($query, $args, $pager_page_array[$element] * $limit, $limit);
}

function hackfix_menu() {
  $items['user/login_form/%ctools_js'] = array(
    'page callback' => 'hackfix_login_callback',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['login/validate/ajax'] = array(
    'page callback' => 'hackfix_login_validate_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function hackfix_login_callback($js) {
  $title = t('Login');
  $form_id = 'user_login';
  $msg = 'You are now logged in.';

  if ($js) {
    ctools_include('ajax');
    $form_state = array(
      'ajax' => TRUE,
      'title' => $title,
    );
    $output = dialog_form_wrapper($form_id, $form_state);
    if (empty($output)) {
      $output[] = dialog_command_display('Welcome', $msg);
      $output[] = ctools_ajax_command_redirect('user');
    }
    else {
      foreach ($output as $i => $command) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options']['height'] = 'auto';
          $output[$i]['options']['width'] = 600;

          $output[$i]['options']['position'] = 'center';
          $output[$i]['options']['resizable'] = FALSE;
        }
      }
    }
    ctools_ajax_render($output);
  }
  else {
    return drupal_get_form($form_id);
  }
}


  /*
  *  redirect user on login.
  *  standart form redirect ( $form['#action'] = 'url' ) not work
  *
  */
function hackfix_user($op, &$edit, &$account, $category = NULL){
  if ($op=='login' )
  {
    drupal_goto($_GET['q']);
  } elseif ($op == 'insert') {
    $value = $edit['news'];
    unset($edit['news']);
    if ($value == 1) {
      db_query("UPDATE {users} SET notify_etype='%d' WHERE uid='%d'", $value, $account->uid);
    }
  }
}


function hackfix_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('user_login', 'user_register'))) {
    $path = drupal_get_path('module', 'hackfix');
    drupal_add_js($path . '/js/hackfix.js');
    // add throbber plugin
    drupal_add_css($path . '/js/throbber/jquery.throbber.css');
    drupal_add_js($path . '/js/throbber/jquery.throbber.js');
  }
  if ($form_id == 'user_register') {    
    unset($form['civicrm-profile-register']);
    $form['#validate'][] = 'hackfix_register_form_validate';
    $form['account']['mail']['#title'] = t("What's your email address?");
    $form['account']['mail']['#description'] = '';
    $form['account']['pass']['#description'] = '';
    //$form['account']['name']['#access'] = FALSE;
    $form['account']['#title'] = '';
    $form['account']['name']['#description'] = '';
    $form['submit']['#value'] = t('Sign up');
    $form['news'] = array(
      '#type' => 'checkbox',
      '#title' => t('Yes, send me useful news about Heard Mentality.'),
      '#default_value' => 1,
    );


    $term = l('Terms of use', 'node/2537', array('attributes' => array('target' => '_blank')));
    $prpolicy = l('Privacy Policy', 'node/2536', array('attributes' => array('target' => '_blank')));
    $form['terms'] = array(
      '#type' => 'checkbox',
      '#title' => t("I agree to the $term and $prpolicy."),
    );
  }

  if ($form_id == 'user_login') {
    $form['name']['#description'] = '';
    $form['pass']['#description'] = '';
  }
}

function hackfix_register_form_validate($form, $form_state) {
  $value = $form_state['values']['terms'];
  if ($value == 0) {
    form_set_error('terms', t('You must agree with the Terms of use and Privacy Policy to get an account.'));
  }
}

/**
 * Validate login form ajax
 */
function hackfix_login_validate_ajax() {
  $form = array();
  $form_state = array();
  $form_state['values'] = $_POST;

  $errors = array();
  if (isset($form_state['values']['name']) && isset($form_state['values']['pass'])) {
    $validators = user_login_default_validators();
    array_unshift($validators, 'email_registration_user_login_validate');
    foreach ($validators as $validator) {
      if (function_exists($validator)) {
        $validator($form, $form_state);
      }
    }
    $errors = form_get_errors();
  }
  drupal_json(array('errors' => $errors, 'hasError' => (count($errors) > 0)));
  exit;
}