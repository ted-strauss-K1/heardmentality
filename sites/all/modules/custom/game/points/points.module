<?php

/**
 *
 */
include_once __DIR__ . '/points.track.inc';

/**
 * Implements custom hook_invoke_action()
 *
 * @param $timestamp
 * @param $params
 */
function points_invoke_action ($timestamp, $params) {
  $output = array('status' => false);
  $operations = points_operations();
  if (isset($params['operation']) && in_array($params['operation'], $operations)) {
    $params['time_stamp'] = $timestamp;
    $output = points_add($params);
  }
  return $output + array('params' => $params);
}

/**
 * @return array
 */
function points_operations () {
  return array(
    'view',
    'login',
    'vote',
    'share',
  );
}

/**
 *
 */
define('USERPOINTS_TERM_POINTS', 'userpoints_term_points');

/**
 * @return int
 */
function points_term () {
  return (int)variable_get(USERPOINTS_TERM_POINTS, 0);
}

/**
 * Wrapper to perform points tracking
 *
 * @param $params
 *
 * @return array
 */
function points_add (&$params) {
  # user
  up_validate_user($params);
  #
  if ($tid = points_term()) {
    $params['points'] = points_calculate($params);
    $params['tid'] = $tid;
    $params += array(
      'entity_id'   => $params['uid'],
      'entity_type' => 'user',
    );
    return up_add($params);
  }
  return array(
    'status' => false,
    'reason' => t('No points term'),
  );
}

/**
 * Calculate number of points we should give to user for the action
 *
 * @param $params
 */
function points_calculate ($params) {
  $action = $params['operation'];
  $actions = points_operations();

  if (in_array($action, $actions)) {
    # get current stats
    $stats = up_since($params['uid'], points_term(), $action);
    $stats['actions']++;

    # get info
    $points = variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_points', 0);
    $per = variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_per', 1);
    $limit = variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_limit', 5);

    # calculate
    if (((-1 == $limit) || ($stats['points'] < $limit)) && (0 == $stats['actions'] % $per)) {
      return $points;
    }
  }

  return 0;
}

/**
 *
 */
define('USERPOINTS_TERM_POINTS_PREFIX', 'userpoints_term_points_');


/**
 * @param       $op
 * @param array $params
 *
 * @return mixed
 */
function points_userpoints ($op, $params = array()) {
  switch ($op) {

    case 'setting':
      $group = 'points';
      $form[$group] = array(
        '#type'        => 'fieldset',
        '#collapsible' => true,
        '#collapsed'   => true,
        '#title'       => t('!Points for site actions', userpoints_translation()),
      );

      $actions = points_operations();
      foreach ($actions as $i => $action) {
        $form[$group][USERPOINTS_TERM_POINTS_PREFIX . $action . '_points'] = array(
          '#type'          => 'select',
          '#options'       => array_combine(range(-50, 50), range(-50, 50)),
          '#title'         => $action,
          '#default_value' => variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_points', 0),
          '#prefix'        => (0 == $i ? '<table><tr>
              <th>' . t('!Points awarded to user for action', userpoints_translation()) . '</th>
              <th>' . t('Actions required to get !points', userpoints_translation()) . '</th>
              <th>' . t('Limit of !points per day for action', userpoints_translation()) . '</th>
              </tr>' : '') . '<tr><td>',
          '#suffix'        => '</td>',
        );
        $form[$group][USERPOINTS_TERM_POINTS_PREFIX . $action . '_per'] = array(
          '#type'          => 'select',
          '#options'       => array_combine(range(1, 50), range(1, 50)),
          '#title'         => $action,
          '#default_value' => variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_per', 1),
          '#prefix'        => '<td>',
          '#suffix'        => '</td>',
        );
        $form[$group][USERPOINTS_TERM_POINTS_PREFIX . $action . '_limit'] = array(
          '#type'          => 'select',
          '#options'       => array(-1 => t('unlimited')) + array_combine(range(1, 50), range(1, 50)),
          '#title'         => $action,
          '#default_value' => variable_get(USERPOINTS_TERM_POINTS_PREFIX . $action . '_limit', 5),
          '#prefix'        => '<td>',
          '#suffix'        => '</td></tr>' . (count($actions) - 1 == $i ? '</table>' : ''),
        );
      }

      return $form;
  }
}
