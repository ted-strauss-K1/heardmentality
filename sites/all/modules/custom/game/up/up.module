<?php include_once __DIR__ . "/up.old.php";

/**
 * Filter keys
 *
 * @param $params
 */
function up_filter_keys(&$params) {
  $allowed = array(
    'points',
    'moderate',
    'uid',
    'time_stamp',
    'operation',
    'tid',
    'expirydate',
    'description',
    'reference',
    'display',
    'txn_id',
    'entity_id',
    'entity_type',
  );
  return array_intersect_key($params, array_flip($allowed));
}

/**
 * Check uid
 *
 * @param $params
 *
 * @return array
 */
function up_validate_user(&$params) {
  if (!isset($params['uid'])) {
    global $user;
    $params['uid'] = $user->uid;
  }
  return (bool) $params['uid'];
}

/**
 * Userpoints wrapper to perform action tracking
 *
 * @param array $params
 *
 * @return array
 */
function up_add(&$params) {
  # validate user
  if (!up_validate_user($params)) {
    return array(
      'status' => FALSE,
      'reason' => t('uid cannot be 0'),
    );
  }

  # check required params
  foreach (array(
             'points',
             'entity_id',
             'entity_type',
             'operation'
           ) as $key) {
    if (!isset($params[$key])) {
      return array(
        'status' => FALSE,
        'reason' => t('@key is not set', array('@key' => $key)),
      );
    }
  }

  # default
  $params['moderate'] = USERPOINTS_TXN_STATUS_APPROVED; // points are always approved
  $params['display'] = FALSE; // do not display messages

  # vars in reference
  if (!isset($params['reference'])) {
    $params['reference'] = array();
  }
  if (!is_array($params['reference'])) {
    $params['reference'] = array($params['reference']);
  }
  if (empty($params['reference'])) {
    $params['reference'] = array_diff_key($params, array_flip(array(
      'approver_uid',
      'points',
      'time_stamp',
      'changed',
      'status',
      'description',
      'reference',
      'expirydate',
      'expired',
      'parent_txn_id',
      'tid',
      'uid',
      'entity_id',
      'entity_type',
      'operation',
      'txn_id',
    )));
  }
  $params['reference'] = serialize($params['reference']);

  # perform write
  //  *    'uid' => $user->uid
  //  *    'time_stamp' => unix time of the points assignement date
  //  *    'tid' => 'category ID'
  //  *    'expirydate' => timestamp or 0, 0 = non-expiring; NULL = site default
  //  *    'reference' => reserved for module specific use
  //  *    'txn_id' => Transaction ID of points, If present an UPDATE is performed
  $ret = _userpoints_transaction($params);
  if ($ret == FALSE) {
    return array(
      'status' => FALSE,
      'reason' => 'transaction failed in _userpoints_transaction, this is an internal module error',
    );
  }

  return array(
    'status' => TRUE,
    'result' => $params,
  );
}

/**
 * Calcualate number of points and actions received since the given timestamp
 *
 * @param      $uid
 * @param      $operation
 * @param bool $since
 *
 * @return array|bool|null
 */
function up_since($uid, $tid, $operation = FALSE, $since = FALSE) {
  if (FALSE === $since) {
    $since = strtotime(date('Y-m-d'));
  }

  $query = "SELECT IFNULL(SUM(points),0) points, IFNULL(COUNT(*),0) actions FROM {userpoints_txn} WHERE uid = '%s' AND tid = '%s' AND time_stamp >= '%s'";
  $vars = array(
    $uid,
    $tid,
    $since
  );
  if (FALSE !== $operation) {
    $query .= " AND operation = '%s'";
    $vars[] = $operation;
  }
  $result = db_query($query, $vars);
  if ($output = db_fetch_array($result)) {
    return $output;
  }

  return array(
    'points'  => 0,
    'actions' => 0,
  );
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param      $node
 * @param      $op
 * @param null $a3
 * @param null $a4
 */
function up_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete' :
      up_cleanup($node->nid, 'node');
      break;
  }
}

/**
 * Implementation of hook_comment()
 *
 * @param $a1
 * @param $op
 */
function up_comment(&$a1, $op) {
  switch ($op) {
    case 'delete' :
      up_cleanup($a1->cid, 'comment');
      break;
  }
}

/*
 * Implementation of hook_user()
 *
 */
function up_user($op, &$edit, &$account, $category = '') {
  switch ($op) {
    case 'delete':
      up_cleanup($account->uid, 'user');
      break;
  }
}

/**
 * Remove all the userpoints for that
 *
 * @param $content_id
 * @param $content_type
 */
function up_cleanup($entity_id, $entity_type) {
  // todo cleanup
  // db_query("DELETE FROM {userpoints_txn} WHERE entity_type = '%s' AND entity_id = '%s'", $entity_type, $entity_id);
}
