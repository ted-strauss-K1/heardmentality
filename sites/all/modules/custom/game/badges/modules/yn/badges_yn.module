<?php

/**
 * Implementation of hook_badges()
 *
 * @return array
 */
function badges_yn_badges() {
  $badges = array();

  # vote ups
  $badges['yn_comment_bronze'] = array(
    'function'  => 'badges_yn_check',
    'name'      => t('Nice Reply'),
    'info'      => t('Reply voted up 10 times'),
    'type'      => 'bronze',
    'arguments' => array('content_type' => 'comment', 'count' => 10),
  );
  $badges['yn_comment_silver'] = array(
    'function'  => 'badges_yn_check',
    'name'      => t('Good Reply'),
    'info'      => t('Reply voted up 25 times'),
    'type'      => 'silver',
    'arguments' => array('content_type' => 'comment', 'count' => 25),
  );
  $badges['yn_comment_gold'] = array(
    'function'  => 'badges_yn_check',
    'name'      => t('Great Reply'),
    'info'      => t('Reply voted up 100 times'),
    'type'      => 'gold',
    'arguments' => array('content_type' => 'comment', 'count' => 100),
  );

  # vote ups for resources
  $badges['yn_argument_agreed_resource_bronze'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Paperboy'),
    'info'      => t('Resource posted by user gets 5 agrees'),
    'type'      => 'bronze',
    'arguments' => array('count' => 5, 'argument_type' => 'resource'),
  );
  $badges['yn_argument_agreed_resource_silver'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Newsstand'),
    'info'      => t('Resource posted by user gets 20 agrees'),
    'type'      => 'silver',
    'arguments' => array('count' => 20, 'argument_type' => 'resource'),
  );
  $badges['yn_argument_agreed_resource_gold'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Librarian'),
    'info'      => t('Resource posted by user gets 50 agrees'),
    'type'      => 'gold',
    'arguments' => array('count' => 50, 'argument_type' => 'resource'),
  );

  # vote ups for arguments
  $badges['yn_argument_agreed_debate_bronze'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Nice Post'),
    'info'      => t('Argument posted by user gets 5 agrees'),
    'type'      => 'bronze',
    'arguments' => array('count' => 5, 'argument_type' => 'argument'),
  );
  $badges['yn_argument_agreed_debate_silver'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Well Put'),
    'info'      => t('Argument posted by user gets 20 agrees'),
    'type'      => 'silver',
    'arguments' => array('count' => 20, 'argument_type' => 'argument'),
  );
  $badges['yn_argument_agreed_debate_gold'] = array(
    'function'  => 'badges_yn_argument_agreed_check',
    'name'      => t('Consensus Builder'),
    'info'      => t('Argument posted by user gets 50 agrees'),
    'type'      => 'gold',
    'arguments' => array('count' => 50, 'argument_type' => 'argument'),
  );

  # first vote up
  $badges['yn_upfirst'] = array(
    'function' => 'badges_yn_upfirst_check',
    'name'     => t('Supporter'),
    'info'     => t('First up vote'),
    'type'     => 'bronze',
  );

  # first vote ups
  $badges['yn_predict_bronze'] = array(
    'function'  => 'badges_yn_predict_check',
    'name'      => t('Seer'),
    'info'      => t('First agree on a post or resource that eventually gets 50 agrees'),
    'type'      => 'bronze',
    'arguments' => array('votes' => 50),
  );
  $badges['yn_predict_silver'] = array(
    'function'  => 'badges_yn_predict_check',
    'name'      => t('Oracle'),
    'info'      => t('First agree on a post or resource that eventually gets 100 agrees'),
    'type'      => 'silver',
    'arguments' => array('votes' => 100),
  );

  return $badges;
}


/**
 * @param       $uid
 * @param array $arguments
 *
 * @return bool
 */
function badges_yn_check($uid, $arguments = array()) {
  static $cache;

  $content_type = $arguments['content_type'];

  if (is_null($cache[$content_type])) {
    $cache[$content_type] = array();

    switch ($content_type) {
      case 'comment' :
        $query = "
          SELECT c.cid, c.uid, COUNT(*) count
          FROM {comments} c
          INNER JOIN {votingapi_vote} vv ON vv.content_id = c.cid AND vv.value = '%d'
          WHERE vv.content_type = '%s'
          GROUP BY c.cid, c.uid
          ORDER BY COUNT(*) ASC";
        break;
      case 'node' :
        $query = "
          SELECT n.nid, n.uid, COUNT(*) count
          FROM {node} n
          INNER JOIN {votingapi_vote} vv ON vv.content_id = n.nid AND vv.value = '%d'
          WHERE vv.content_type = '%s'
          GROUP BY n.nid, n.uid
          ORDER BY COUNT(*) ASC
        ";
        break;
    }
    if (!empty($query)) {
      $result = db_query($query, array(VOTE_AGREE, $content_type));
      while ($row = db_fetch_array($result)) {
        $cache[$content_type][$row['uid']][] = $row['count'];
      }
    }
  }

  return isset($cache[$content_type][$uid]) ? $cache[$content_type][$uid][0] >= $arguments['count'] : FALSE;
}

/**
 * @param       $uid
 * @param array $arguments
 *
 * @return bool
 */
function badges_yn_argument_agreed_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("
      SELECT n.uid, COUNT(*) count
      FROM {node} n
      INNER JOIN {votingapi_vote} vv ON vv.content_id = n.nid AND vv.content_type = '%s' AND vv.value = '%s'
      WHERE n.type = '%s'
      GROUP BY n.nid
      ORDER BY COUNT(*) DESC", 'node', VOTE_AGREE, $arguments['argument_type']);
    while ($row = db_fetch_array($result)) {
      if (!isset($cache[$row['uid']]) || ($cache[$row['uid']] < $row['count'])) {
        $cache[$row['uid']] = $row['count'];
      };
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['count'] : FALSE;
}

/**
 * @param       $uid
 * @param array $arguments
 *
 * @return bool
 */
function badges_yn_upfirst_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("SELECT uid FROM {votingapi_vote} GROUP BY content_type, content_id ORDER BY timestamp ASC");
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = TRUE;
    }
  }

  return isset($cache[$uid]);
}

/**
 * @param       $uid
 * @param array $arguments
 *
 * @return bool
 */
function badges_yn_predict_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("SELECT uid, COUNT(*) count FROM {votingapi_vote} vv WHERE vv.value = '%d' GROUP BY content_type, content_id ORDER BY timestamp", VOTE_AGREE);
    while ($row = db_fetch_array($result)) {
      if (!isset($cache[$row['uid']]) || ($cache[$row['uid']] < $row['count'])) {
        $cache[$row['uid']] = $row['count'];
      }
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['votes'] : FALSE;
}

/**
 * @param $params
 */
function badges_yn_queue_action($params) {
  if ('yn_voteup' == $params['operation']) {

    // voting user
    foreach (array('yn_upfirst', 'yn_predict_bronze', 'yn_predict_silver') as $badge) {
      badges_queue_badge(array(
        'uid'         => $params['uid'],
        'operation'   => BADGES_ACTION_PREFIX . $badge,
        'entity_id'   => 0,
        'entity_type' => 'badge',
        'time_stamp'  => $params['timestamp'],
      ));
    }

    // content author
    switch ($params['entity_type']) {
      case 'node':
        if ($debate = node_load($params['entity_id'])) {
          $badges = array();
          switch ($debate->type) {
            case 'argument' :
              $badges = array(
                'yn_argument_agreed_debate_bronze',
                'yn_argument_agreed_debate_silver',
                'yn_argument_agreed_debate_gold'
              );
              break;
            case 'resource' :
              $badges = array(
                'yn_argument_agreed_resource_bronze',
                'yn_argument_agreed_resource_silver',
                'yn_argument_agreed_resource_gold'
              );
              break;
          }

          foreach ($badges as $badge) {
            badges_queue_badge(array(
              'uid'         => $debate->uid,
              'operation'   => BADGES_ACTION_PREFIX . $badge,
              'entity_id'   => 0,
              'entity_type' => 'badge',
              'time_stamp'  => $params['timestamp'],
            ));
          }
        }
        break;
      case 'comment':
        if ($comment = _comment_load($params['entity_id'])) {
          foreach (array('yn_comment_bronze', 'yn_comment_silver', 'yn_comment_gold') as $badge) {
            badges_queue_badge(array(
              'uid'         => $comment->uid,
              'operation'   => BADGES_ACTION_PREFIX . $badge,
              'entity_id'   => 0,
              'entity_type' => 'badge',
              'time_stamp'  => $params['timestamp'],
            ));
          }
        }
        break;
    }
  }
}
