<?php

/**
 * Implementation of hook_badges()
 *
 * @return array
 */
function badges_statistics_badges() {
  $badges = array();

  $badges['statistics_bronze'] = array(
    'function'  => 'badges_statistics_check',
    'name'      => t('Notable Issue'),
    'info'      => t('Posted issue with 1,000 views'),
    'type'      => 'bronze',
    'arguments' => array('views' => 1000),
  );
  $badges['statistics_silver'] = array(
    'function'  => 'badges_statistics_check',
    'name'      => t('Popular Issue'),
    'info'      => t('Posted issue with 2,500 views'),
    'type'      => 'silver',
    'arguments' => array('views' => 2500),
  );
  $badges['statistics_gold'] = array(
    'function'  => 'badges_statistics_check',
    'name'      => t('Provocative Issue'),
    'info'      => t('Posted issue with 10,000 views'),
    'type'      => 'gold',
    'arguments' => array('views' => 10000),
  );

  $badges['statistics_tumbleweed'] = array(
    'function'  => 'badges_statistics_tumbleweed_check',
    'name'      => t('Tumbleweed'),
    'info'      => t('Asked a question with no answers, no comments, and low views for a week'),
    'arguments' => array('views' => 10, 'days' => 7),
  );

  return $badges;
}

/**
 * @param $uid
 *
 * @return bool
 */
function badges_statistics_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("
      SELECT n.uid, MAX(nc.totalcount) count
      FROM {node} n
      LEFT JOIN {node_counter} nc ON n.nid = nc.nid
      GROUP BY n.uid");
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = $row['count'];
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['views'] : FALSE;
}

/**
 * @param $uid
 *
 * @return bool
 */
function badges_statistics_tumbleweed_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("
      SELECT
        n.uid,
        DATEDIFF(CURDATE(), FROM_UNIXTIME(n.created, '%Y-%m-%d')) days,
        IFNULL(nc.totalcount, 0) views
      FROM {node} n
      LEFT JOIN {node_counter} nc ON n.nid = nc.nid
      WHERE n.type = '%s'", 'issue');
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']][] = array('days' => $row['days'], 'views' => $row['views']);
    }
  }

  if (isset($cache[$uid])) {
    foreach (isset($cache[$uid]) as $data) {
      if (($data['views'] <= $arguments['views']) && ($data['days'] >= $arguments['days'])) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * @param $params
 */
function badges_statistics_queue_action($params) {
  if ('view' == $params['operation']) {
    if ($issue = node_load($params['entity_id'])) {
      foreach (array(
                 'statistics_bronze',
                 'statistics_silver',
                 'statistics_gold',
                 'statistics_tumbleweed',
               ) as $badge) {
        badges_queue_badge(array(
          'uid'         => $issue->uid,
          'operation'   => BADGES_ACTION_PREFIX . $badge,
          'entity_id'   => 0,
          'entity_type' => 'badge',
          'time_stamp'  => $params['timestamp'],
        ));
      }
    }
  }
}
