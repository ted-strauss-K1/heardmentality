<?php

/**
 * Implementation of hook_badges()
 *
 * @return array
 */
function badges_comment_yn_badges() {
  $badges = array();

  $badges['comment_agreed_bronze'] = array(
    'function'  => 'badges_comment_yn_check',
    'name'      => 'Pamphleteer',
    'info'      => 'Left 10 Comments that Got a Minimum of One Agree',
    'type'      => 'bronze',
    'arguments' => array('comment_count' => 10),
  );
  $badges['comment_agreed_gold'] = array(
    'function'  => 'badges_comment_yn_check',
    'name'      => 'Senator',
    'info'      => 'Left 500 Comments that Got a Minimum of One Agree',
    'type'      => 'bronze',
    'arguments' => array('comment_count' => 500),
  );

  return $badges;
}

/**
 * @param $uid
 *
 * @return bool
 */
function badges_comment_yn_agreed_check($uid, $arguments = array()) {
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("
      SELECT c.uid, COUNT(DISTINCT(cid)) count
      FROM {comments} c
      INNER JOIN {votingapi_vote} vv ON vv.content_id = c.cid
      WHERE vv.content_type = '%s' AND vv.value = '%d'
      GROUP BY c.uid", 'comment', VOTE_AGREE);
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = $row['count'];
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['comment_count'] : FALSE;
}

/**
 * @param $params
 */
function badges_comment_yn_queue_action($params) {
  if ('yn_voteup' == $params['operation']) {
    if ($comment = _comment_load($params['entity_id'])) {
      foreach (array('comment_agreed_bronze', 'comment_agreed_gold') as $badge) {
        badges_queue_badge(array(
          'uid'         => $comment->uid,
          'operation'   => BADGES_ACTION_PREFIX . $badge,
          'entity_id'   => 0,
          'entity_type' => 'badge',
          'time_stamp'  => $params['timestamp'],
        ));
      }
    }
  }
}
