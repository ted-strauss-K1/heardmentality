<?php

function solr_issues_menu() {

  $items['issues_solr2/ajax/%'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['issues_solr2/ajax'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['issues_solr2/submit'] = array(
    'page callback' => 'solr_issues_form_submit',
    //'page arguments' => array('issues'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}











function solr_issues_ajax_response2($page_id, $keys, $path_replacer = NULL) {
  if ($_POST['all'] == TRUE) {
    $keys = '*:*';
  }
  $search_page = apachesolr_search_page_load($page_id);
  $search_page->search_path = str_replace('%', $path_replacer, $search_page->search_path);
  $search_page->settings['apachesolr_search_browse'] = 'results';
// Retrieve the conditions that apply to this page
  $conditions = apachesolr_search_conditions_default($search_page);
// Retrieve the results of the search
  $results = apachesolr_search_search_results($keys, $conditions, $search_page);
  $build_results = solr_issues_search_output($results);

  $query = apachesolr_drupal_query();
  $searcher = $query->getSearcher();
  $adapter = facetapi_adapter_load('apachesolr@solr');
  $top_categ = $adapter->getBuild('block');
  $top3 = array_slice($top_categ['im_taxonomy_vid_3'], 0, 3, TRUE);
  if (count($top3)) {
    $output = t('Top categories:<br /> ');
    foreach ($top3 as $key => $category) {
      $output .= '<span id="' . $key . '">' . $category['#value'] . '</span> ';
    }
  }
  global $pager_page_array, $pager_total, $pager_total_items, $pager_limits;
  $count = $pager_total_items[0];
  $_SESSION['top_categ'] = $output;
  $build_results .= theme('pager', NULL, 10, 0);
  // $count = count($results);
// $build_results = apachesolr_search_search_page_custom($results, $search_page, $build);
  print drupal_json(array(
            'data' => $build_results, 'count' => $count, 'categories' => $output));
}

function solr_issues_apachesolr_query_alter($query) {
  $query->addParam('fl', 'sm_field_issue_country');
  $query->addParam('fl', 'tid');
  $query->addParam('fl', 'sm_field_issue_city');
  $query->addParam('fl', 'itm_field_issue_state'); //itm_field_votes_count
  $query->addParam('fl', 'sm_field_issue_state_text');
  $query->addParam('fl', 'itm_field_votes_count');
  $query->addParam('fl', 'itm_field_visits_count');

  if (count($_POST['tid'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['tid'] as $key => $value) {
      $query2->addFilter('tid', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }

  if (count($_POST['country'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['country'] as $key => $value) {
      $countryName = solr_issues_country_name($value);
      if ($countryName) {
        $query2->addFilter('sm_field_issue_country', $countryName);
      }
      $query2->addFilter('sm_field_issue_country', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }

  if (count($_POST['state'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['state'] as $key => $value) {
      $query2->addFilter('itm_field_issue_state', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }

  if ($_POST['myregion']) {
    global $user;
    $user_region = profile_get_user_region($user->uid);
  }


  switch ($_POST['date_filter']) {
    case 'This Week':
      $query->addFilter('ds_created', '[' . apachesolr_date_iso(strtotime("-1 week")) . ' TO ' . apachesolr_date_iso(strtotime("Today")) . ']');
      break;
    case 'Month':
      $query->addFilter('ds_created', '[' . apachesolr_date_iso(strtotime("-4 week")) . ' TO ' . apachesolr_date_iso(strtotime("Today")) . ']');
      break;
    default:
      break;
  }


  if (count($_POST['city'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['city'] as $key => $value) {
      $query2->addFilter('sm_field_issue_city', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }
  /*
    print '<pre>';
    print_r($query);
    print '</pre>';
    exit;
   */
}

/**
 * Implementation of hook_apachesolr_process_results();
 */
function solr_issues_apachesolr_process_results(&$results, DrupalSolrQueryInterface $query) {
  foreach ($results as &$result) {
    $result['nid'] = array_pop(split('/', $result['fields']['path']));
  }
}

function solr_issues_search_output($results) {
  $output = '';
  foreach ($results as $result) {
    $node = node_load($result['nid']);
//    $output .= solr_issues_node_output($node);
//    $output .= drupal_get_form('issue_vote_form', $node);
    $output .= node_view($node, true);
  }

  return $output;
}

function profile_get_user_region($uid) {
  $result = db_query("SELECT up.state from {user_profile} up where up.uid ='%d'", $uid);
  return db_result($result);
}

//nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
function solr_issues_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'load' && $node->type == 'poll') {
    $result = db_query("SELECT count(aid) FROM {accesslog} a WHERE a.path = 'node/%d'", $node->nid);
    $node->field_visits_count[0]['value'] = db_result($result);
    $votes = issue_get_votes($node->nid);
    $node->field_votes_count[0]['value'] = $votes['#all'];
    $node->location = $node->field_location[0]['lat'] . ',' . $node->field_location[0]['lng'];
  }

  if ($op == 'view' && $node->field_issue_country) {
    // remove tags <p> from country name
    foreach ($node->field_issue_country as &$country) {
      $country['safe'] = trim($country['value']);
    }
  }
  if ($op == 'view' && $node->field_issue_state_text) {
    foreach ($node->field_issue_state_text as &$state) {
      $country['safe'] = trim($state['value']);
    }
  }
  if ($op == 'presave' && $node->type == 'poll') {
    // TODO Dima, why??

//    unset($node->field_issue_state);
//    unset($node->field_issue_state_text);
//    unset($node->field_issue_city);
//    $xyz = geonames_countryinfo($node->field_issue_country[0]['value']);
//    $query = array('geonameid' => $xyz['geonameid']);
//    $results = geonames_query('extendedFindNearby', $query);
//    $state_id = mt_rand(0, 6);
//    $node->field_issue_state[0]['value'] = $results->results[$state_id]['geonameid'];
//    $node->field_issue_state_text[0]['value'] = $results->results[$state_id]['name'];
//    $query = array('geonameid' => $node->field_issue_state[0]['value']);
//    $results = geonames_query('children', $query);
//    $node->field_issue_city[0]['value'] = $results->results[$state_id]['name'];
  }
  if ($op == 'view' && $node->type == 'poll') {
    // krumo($node);
  }
}

function geonames_countryinfo_geonameid($param) {
  $param = check_plain($param);
  $result = db_fetch_array(db_query("SELECT * FROM {geonames_countryinfo} WHERE geonameid = '%s'", $param));
  return $result;
}

/**
 * Get country name by country ID
 * @param int $geonameid Country ID
 * @return string Name of country
 */
function solr_issues_country_name($geonameid) {
  static $countries = array();
  if (!$countries) {
    foreach (geonames_countries() as $country) {
      $countries[$country['geonameid']] = $country['name'];
    }
  }
  return $countries[$geonameid];
}

function show_print($var, $return = FALSE) {
  $output = '<pre>' . print_r($var, TRUE) . '</pre>';
  if ($return) {
    return $output;
  }
  else {
    print $output;
  }
}

function solr_issues_form_submit($form_state) {

  if (isset($_POST['choice'])) {
    if ($_POST['check_login']) {
      $date_time = date("y-m-d H:i:s", time());
      db_query('INSERT INTO {poll_votes} (nid, chorder, uid) VALUES (%d, %d, %d)', $_POST['nid_val'], $_POST['choice'], $_POST['check_login']);
      $node = node_load($_POST['nid_val']);
      $message = node_view($node);
    }
    else {
      
    }
  }

  print drupal_json(array(
            'data' => $message));
}

function solr_issues_node_output($node) {
  $node = node_build_content($node, $teaser, $page);
  $content = drupal_render($node->content);
  $node->body = $content;
  //unset($node->teaser);
  // node_invoke_nodeapi($node, 'alter', $teaser, $page);
  return theme('node', $node, $teaser, $page);
}

function solr_issues_apachesolr_query_prepare($query) {
  switch ($_POST['sort']) {
    case 'Votes':
      $query->setSolrsort('itm_field_votes_count', 'desc');
      break;
    case 'Latest':
      $query->setSolrsort('ds_created', 'desc');
      break;
    case 'Views':
      $query->setSolrsort('itm_field_visits_count', 'desc');
      break;

    default:
      $query->setSolrsort('itm_field_votes_count', 'desc');
      break;
  }
}