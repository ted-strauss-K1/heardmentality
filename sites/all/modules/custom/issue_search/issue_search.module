<?php

/**
 * @file
 *  Issue search module: hooks and core functions.
 */
require_once 'includes/issue_search.apachesolr.inc';
require_once 'includes/issue_search.theme.inc';

/**
 * Implementation of hook_init().
 * Perform setup tasks.
 * 
 * @global object $user
 *  Current Drupal user.
 * @global object $_issue_search_user
 *  Copy of real user for this module.
 */
function issue_search_init() {
    global $user, $_issue_search_user;
    $_issue_search_user = $user;
}

/**
 * Implementation of hook_menu().
 * Define menu items and page callbacks.
 *
 * @return array
 *  An associative array whose keys define paths and whose values are an associative array of properties for each path.
 */
function issue_search_menu() {
    $menu = array();

    // Issues list.
    $menu['issues'] = array(
        'page callback' => 'drupal_get_form',
        'title' => t('Issues'),
        'page arguments' => array('issue_search_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'includes/issue_search.pages.inc',
    );

    // AJAX callback for processing a search.
    $menu['issues/ajax'] = array(
        'page callback' => 'issue_search_ajax',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'includes/issue_search.pages.inc',
    );

    return $menu;
}

/**
 * Implementation of hook_nodeapi().
 * Act on nodes defined by other modules.
 * 
 * @global object $user
 *  Current Drupal user.
 * 
 * @param object $node
 *  The node the action is being performed on
 * @param type $op
 *  What kind of action is being performed. Possible values:
 *    "alter": the $node->content array has been rendered, so the node body or teaser is filtered and now contains HTML. This op should only be used when text substitution, filtering, or other raw text operations are necessary.
 *    "delete": The node is being deleted.
 *    "delete revision": The revision of the node is deleted. You can delete data associated with that revision.
 *    "insert": The node has just been created (inserted in the database).
 *    "load": The node is about to be loaded from the database. This hook can be used to load additional data at this time.
 *    "prepare": The node is about to be shown on the add/edit form.
 *    "prepare translation": The node is being cloned for translation. Load additional data or copy values from $node->translation_source.
 *    "print": Prepare a node view for printing. Used for printer-friendly view in book_module
 *    "rss item": An RSS feed is generated. The module can return properties to be added to the RSS item generated for this node. See comment_nodeapi() and upload_nodeapi() for examples. The $node passed can also be modified to add or remove contents to the feed item.
 *    "search result": The node is displayed as a search result. If you want to display extra information with the result, return it.
 *    "presave": The node passed validation and is about to be saved. Modules may use this to make changes to the node before it is saved to the database.
 *    "update": The node has just been updated in the database.
 *    "update index": The node is being indexed. If you want additional information to be indexed which is not already visible through nodeapi "view", then you should return it here.
 *    "validate": The user has just finished editing the node and is trying to preview or submit it. This hook can be used to check the node data. Errors should be set with form_set_error().
 *    "view": The node content is being assembled before rendering. The module may add elements $node->content prior to rendering. This hook will be called after hook_view(). The format of $node->content is the same as used by Forms API.
 * @param type $a3
 *  For "view" and "alter", passes in the $teaser parameter from node_view().
 *  For "validate", passes in the $form parameter from node_validate().
 * @param type $a4
 *  For "view" and "alter", passes in the $page parameter from node_view().
 * 
 * @return array 
 *  The "presave", "insert", "update", "delete", "print" and "view" operations have no return value.
 *  The "load" operation should return an array containing pairs of fields => values to be merged into the node object.
 */
function issue_search_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
    global $user;

    // Enqueue a node into apachesolr node queue for indexing a new amount of views.
    if ($op == 'view') {
        if ($node->type == 'poll') {
            $is_admin = (in_array('administrator', $user->roles) || ($user->uid == 1) || ($user->uid == $node->uid));
            if (!$is_admin) {
                if (!((strpos(request_uri(), "/cron.php") === 0) && ($user->uid == 0))) {
                    db_query("UPDATE {apachesolr_search_node} SET changed = %d WHERE nid = %d", time(), $node->nid);
                }
            }
        }
    }
}

/**
 * Implementation of hook_theme().
 * Register a module (or theme's) theme implementations.
 * 
 * @param array $existing 
 *  An array of existing implementations that may be used for override purposes. This is primarily useful for themes that may wish to examine existing implementations to extract data (such as arguments) so that it may properly register its own, higher priority implementations.
 * @param string $type
 *  What 'type' is being processed. This is primarily useful so that themes tell if they are the actual theme being called or a parent theme. May be one of:
 *    - module: A module is being checked for theme implementations.
 *    - base_theme_engine: A theme engine is being checked for a theme which is a parent of the actual theme being used.
 *    - theme_engine: A theme engine is being checked for the actual theme being used.
 *    - base_theme: A base theme is being checked for theme implementations.
 *    - theme: The actual theme in use is being checked.
 * @param string $theme
 *  The actual name of theme that is being being checked (mostly only useful for theme engine).
 * @param string $path
 *  The directory path of the theme or module, so that it doesn't need to be looked up.
 * 
 * @return array
 *  A keyed array of theme hooks.
 */
function issue_search_theme($existing = array(), $type = '', $theme = '', $path = '') {
    $functions = array();

    $functions['issue_search_results'] = array(
        'arguments' => array(
            'results' => array()
        ),
        'file' => 'includes/issue_search.theme.inc',
    );
    $functions['issue_search_filter'] = array(
        'arguments' => array(),
        'file' => 'includes/issue_search.theme.inc',
    );

    return $functions;
}

/**
 * Implementation of hook_preprocess_page().
 * Preprocess theme variables for a page theming function or template.
 * 
 * @param type $variables
 *  The variables array (modify in place).
 */
function issue_search_preprocess_page(&$variables) {

    // Case Issues search page.
    if (arg(0) == 'issues') {

        // Set page template.
        array_push($variables['template_files'], 'page_12_4');

        // Javascripts.
        drupal_add_js(drupal_get_path('module', 'issue_search') . '/js/issue_search.js');
        drupal_add_js(drupal_get_path('module', 'issue') . '/issue.view.js');

        // Filters sidebar.
        $variables['right'] = theme('issue_search_filter');
    }
}

/**
 * Implementation of hook_exit().
 * Perform cleanup tasks.
 * 
 * @global object $user
 *  Current Drupal user.
 * 
 * @param string $destination
 *  If this hook is invoked as part of a drupal_goto() call, then this argument will be a fully-qualified URL that is the destination of the redirect.
 */
function issue_search_exit($destination = NULL) {
    global $user;

    // Check if we are counting views.
    if (variable_get('statistics_count_content_views', 0)) {

        // Check if current page displays a node in viewing mode.
        if ((arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == '') {

            // Check if the user is admin or author.
            $is_admin = (in_array('administrator', $user->roles) || ($user->uid == 1) || ($user->uid == node_load(arg(1))->uid));
            if ($is_admin) {

                // Decrement total view count and day view count of current node.
                db_query('UPDATE {node_counter} SET daycount = daycount - 1, totalcount = totalcount - 1, timestamp = %d WHERE nid = %d', time(), arg(1));
            }
        }
    }
}

/**
 * Search function.
 * 
 * @return array
 *  Search results.
 */
function issue_search() {

    $keywords = $_POST['keywords'];
    $params = array(
        'q' => $keywords,
    );

    $results = apachesolr_search_run('apachesolr', $params);

    return $results;
}