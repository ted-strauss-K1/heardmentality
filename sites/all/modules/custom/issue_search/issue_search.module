<?php

define('SEARCH_RESULTS_PER_PAGE', 5);

/**
 * @file
 *  Issue search module: hooks and core functions.
 */
require_once 'includes/issue_search.query.inc';
require_once 'includes/issue_search.index.inc';
require_once 'includes/issue_search.pages.inc';
require_once 'includes/issue_search.theme.inc';

/**
 * @return array
 */
function issue_search_content_translate_rebuild_js() {
  $path = drupal_get_path('module', 'issue_search');
  return array(
    $path . '/issue_search.js' => array(
      'No issues for you region',
    ),
  );
}

/**
 * Implementation of hook_init().
 * Perform setup tasks.
 *
 * @global object $user
 *  Current Drupal user.
 * @global object $_issue_search_user
 *  Copy of real user for this module.
 */
function issue_search_init() {
  global $user, $_issue_search_user;
  $_issue_search_user = $user;
}

/**
 * Implementation of hook_menu().
 * Define menu items and page callbacks.
 *
 * @return array
 *  An associative array whose keys define paths and whose values are an associative array of properties for each path.
 */
function issue_search_menu() {
  $menu = array();

  # search page
  $menu['issues'] = array(
    'page callback'   => 'drupal_get_form',
    'title'           => __('Issues', array('@code' => 'search-page-title')),
    'page arguments'  => array('issue_search_form'),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'includes/issue_search.pages.inc',
  );

  # search with ajax
  $menu['issues/ajax'] = array(
    'page callback'   => 'issue_search_ajax',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'includes/issue_search.pages.inc',
  );

  # index
  $menu['issues/index'] = array(
    'page callback'   => 'issue_search_index_issues',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'includes/issue_search.index.inc',
  );


  return $menu;
}

/**
 * @param      $node
 * @param      $op
 * @param null $a3
 * @param null $a4
 */
function issue_search_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  // Enqueue a node into apachesolr node queue for indexing a new amount of views.
  if ('view' == $op) {
    if ('issue' == $node->type) {
      $is_admin = (in_array('administrator', $user->roles) || ($user->uid == 1) || ($user->uid == $node->uid));
      if (!$is_admin) {
        if (!((strpos(request_uri(), "/cron.php") === 0) && ($user->uid == 0))) {
          // todo do we need to update viewcount every time?
          // issue_search_index_node($node->nid);
        }
      }
    }
  }
}

/**
 * Search function.
 *
 * @return array
 *  Search results.
 */
function issue_search() {
  $keywords = $_POST['keywords'];
  $params = array(
    'q' => $keywords,
  );
  $page = isset($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;

  try {
    $results = apachesolr_search_run('apachesolr', $params, '', '', $page - 1);
  } catch (Exception $e) {
    $json = array(
      'status'  => TRUE,
      'message' => __('No results found', array('@code' => 'search-page-notfound')) . '<!-- ' . $e->getMessage() . ' -->',
      'rows'    => 0,
      'time'    => 0,
    );

    print json_encode($json);

    exit;
  }

  return $results;
}

/**
 * @param array  $existing
 * @param string $type
 * @param string $theme
 * @param string $path
 *
 * @return array
 */
function issue_search_theme() {
  $theme = array();

  $theme['issue_search_results'] = array(
    'arguments' => array(
      'results' => array()
    ),
    'file'      => 'includes/issue_search.theme.inc',
  );
  $theme['issue_search_pager_link'] = array(
    'arguments' => array(
      'page'        => 1,
      'page_active' => 1,
      'anchor'      => FALSE,
    ),
    'file'      => 'includes/issue_search.theme.inc',
  );
  $theme['issue_search_filter'] = array(
    'arguments' => array(),
    'file'      => 'includes/issue_search.theme.inc',
  );

  return $theme;
}

/**
 * Implementation of hook_preprocess_page().
 * Preprocess theme variables for a page theming function or template.
 *
 * @param type $variables
 *  The variables array (modify in place).
 */
function issue_search_preprocess_page(&$variables) {
  #
  if (arg(0) == 'issues') {
    // Set page template.
    array_push($variables['template_files'], 'page_12_4');

    // js
    drupal_add_js(drupal_get_path('module', 'issue_search') . '/js/issue_search.js');

    // Filters sidebar.
    $variables['right'] = theme('issue_search_filter');

    drupal_set_subtitle(__('Search', array('@code' => 'search-page-title')));
  }
}

/**
 * Implementation of hook_exit().
 * Perform cleanup tasks.
 *
 * todo when do we call it? we don't use drupal_goto on site
 *
 * @global object $user
 *  Current Drupal user.
 *
 * @param string  $destination
 *  If this hook is invoked as part of a drupal_goto() call, then this argument will be a fully-qualified URL that is the destination of the redirect.
 */
function issue_search_exit($destination = NULL) {
  global $user;

  // Check if we are counting views.
  if (variable_get('statistics_count_content_views', 0)) {

    // Check if current page displays a node in viewing mode.
    if ((arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == '') {

      // Check if the user is admin or author.
      $is_admin = (in_array('administrator', $user->roles) || ($user->uid == 1) || ($user->uid == node_load(arg(1))->uid));
      if ($is_admin) {

        // Decrement total view count and day view count of current node.
        db_query('UPDATE {node_counter} SET daycount = daycount - 1, totalcount = totalcount - 1, timestamp = %d WHERE nid = %d', time(), arg(1));
      }
    }
  }
}
