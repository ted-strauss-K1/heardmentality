<?php

/**
 *
 */
include_once "charts.inc";

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function charts_theme() {
  $theme = array();

  $theme['charts'] = array(
    'arguments'            => array('node' => NULL),
    'template'             => 'charts',
    'preprocess functions' => array('charts_theme_preprocess'),
  );
  $theme['charts_inner'] = array(
    'arguments'            => array('node' => NULL),
    'template'             => 'charts-inner',
    'preprocess functions' => array('charts_inner_theme_preprocess'),
  );

  # chart parts
  $theme['charts_legend'] = array(
    'arguments' => array('node' => NULL),
  );
  $theme['charts_gmap'] = array(
    'arguments' => array('node' => NULL),
  );
  $theme['charts_history'] = array(
    'arguments' => array('node' => NULL),
  );
  $theme['charts_filter'] = array(
    'arguments' => array('node' => NULL),
  );


  // todo check below


  $theme['charts_quickfacts'] = array(
    'arguments' => array('node' => NULL),
  );


  $theme['charts_strength'] = array(
    'arguments' => array('node' => NULL),
  );

  return $theme;
}

/**
 * Preprocess function for issue_charts
 *
 * @param $vars
 */
function charts_theme_preprocess(&$vars) {
  $node = $vars['node'];

  # load js/css
  $path = drupal_get_path('module', 'charts') . '/include/';
  drupal_add_css($path . 'nvd3/nv.d3.css');
  drupal_add_js($path . 'd3/d3.v3.js');
  drupal_add_js($path . 'nvd3/nv.d3.js');
  drupal_add_js($path . 'd3/crossfilter.js');

  #
  drupal_add_js($path . 'custom.js');
  drupal_add_js($path . 'charts.update.js');


  # save settings to js
  $chtexts = charts_chtexts($node);
  drupal_add_js(array('charts' => array('choices' => $chtexts)), 'setting');
  drupal_add_js(array('charts' => array('count' => count($chtexts))), 'setting');
  drupal_add_js(array('charts' => array('colors' => charts_colors(TRUE))), 'setting');
  drupal_add_js(array('charts' => array('vote' => $node->vote || !$node->cpoll['active'])), 'setting');

  # charts content
  $vars['charts'] = '';
  if (!$node->vote && $node->cpoll['active']) {
    $vars['charts'] = '<span class="no_show">' . t('Vote now to show results.') . '</span>';
  }
  $vars['charts'] .= theme('charts_inner', $node);
}

/**
 * Preprocess function for issue_charts_inner
 *
 * @param $vars
 */
function charts_inner_theme_preprocess(&$vars) {
  $node = $vars['node'];

  # legend
  $vars['legend'] = theme('charts_legend', charts_chtexts($node));
  # Google map
  $vars['gmap'] = theme('charts_gmap', $node);
  # History
  $vars['history'] = theme('charts_history', $node);
  # Filter
  $vars['filter'] = theme('charts_filter', $node);
  # Quick facts
  $vars['quickfacts'] = $node->votecount <= 10 ? t('We need 10 votes to show the results goodies, use the share links above  to let your peeps know.') : theme('charts_quickfacts', $node);
}

/**
 * Graph Legend
 *
 * @param $chtexts
 *
 * @return string
 */
function theme_charts_legend($chtexts) {
  $output = '';
  $pattern = '<dl><dd>%s:</dd><dt style="background-color:%s;">color</dt></dl>';
  foreach ($chtexts as $index => $answer) {
    $output .= sprintf($pattern, $answer, charts_colors($index));
  }
  return $output;
}

/**
 * Graphs' pages Google Map
 *
 * @param $node
 *
 * @return string
 */
function theme_charts_gmap($node) {
  $gmap = charts_gmap($node);

  drupal_add_js(array('charts' => array('gmap' => $gmap)), 'setting');
  drupal_add_js(array('charts' => array('gmap_icons' => drupal_get_path('module', 'charts') . '/include/icons')), 'setting');
  drupal_add_js(drupal_get_path('module', 'charts') . '/include/charts.gmap.js');
  return '
    <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script>
    <div id="map_div" style="width: 100%; min-height: 280px"></div>
  ';
}

/**
 * @param $node
 *
 * @return array
 */
function charts_gmap($node) {
  $gmap = array();

  $fieldmap = variable_get(PROFILE_FIELDMAP, array());

  $result = db_query("
    SELECT pv1.value lat, pv2.value lng, v.chid
    FROM {cpoll_choices} c
    INNER JOIN {cpoll_votes} v ON v.chid = c.chid AND v.status = 1
    INNER JOIN {users} u ON u.uid = v.uid
    INNER JOIN {profile_values} pv1 ON pv1.fid = '%s' AND pv1.uid = u.uid
    INNER JOIN {profile_values} pv2 ON pv2.fid = '%s' AND pv2.uid = u.uid
    WHERE c.nid = '%d' AND pv1.value <> '' AND pv2.value <> ''", $fieldmap['profile_lat']->fid, $fieldmap['profile_lng']->fid, $node->nid);


  while ($row = db_fetch_object($result)) {
    $gmap[] = array($row->lat, $row->lng, charts_colors($node->choices[$row->chid]['index']));
  }

  return $gmap;
}

/**
 * History
 *
 * @param $node
 *
 * @return string
 */
function theme_charts_history($node) {
  charts_history_preprocess($node);
  // drupal_add_js(drupal_get_path('module', 'charts') . "/includes/highstock/highstock.js");
  drupal_add_js(drupal_get_path('module', 'charts') . "/include/charts.history.js");
  //  return '
  //    <div id="container_graph" class="highcharts-container" style="min-height:280px; width: 100%;"></div>
  //    <div id="resource" style="height:auto; width: 100%; margin: 0 auto; clear:both"></div>
  //  ';
  return '<div id="chart-history"><svg style="height:280px;"></svg></div>';
}

/**
 * Preprocess function for issue_charts_history
 *
 * @param $vars
 */
function charts_history_preprocess($node) {
  $history = charts_history($node);

  # Put the data to Drupal.settings
  drupal_add_js(array('charts' => array('history' => $history)), 'setting');
}

/**
 * @param $node
 *
 * @return array
 */
function charts_history($node) {
  # short names for choices
  $chtexts = charts_chtexts($node);

  # Get the vote history
  $votes = array();
  $mindate = time();
  $maxdate = date('Y-m-d');
  $result = db_query("
    SELECT v.*, DATE(v.cdate) AS date
    FROM {cpoll_choices} c
    INNER JOIN {cpoll_votes} v ON v.chid = c.chid
    WHERE c.nid = '%d' ORDER BY v.cdate ASC", $node->nid);
  $cvotes = array();
  while ($row = db_fetch_array($result)) {
    $row['time'] = strtotime($row['date']);
    if ($row['time'] < $mindate) {
      $mindate = $row['time'];
    }
    $row += array('index' => $node->choices[$row['chid']]['index']);
    if (isset($cvotes[$row['uid']])) {
      $vote = $cvotes[$row['uid']];
      $vote['status'] = 0;
      $vote['date'] = $row['date'];
      $vote['time'] = $row['time'];
      $votes[] = $vote;
    }
    $cvotes[$row['uid']] = $row;
    $row['status'] = 1;
    $votes[] = $row;
  }
  # Get the date range of the votes
  $date_range = dates_range(date('Y-m-d', $mindate), $maxdate);
  $week = count($date_range) > 6;
  if (!$week) {
    $date_range = dates_range(date('Y-m-d', strtotime('-6 days', strtotime($maxdate))), $maxdate);
  }
  # Get the starting date for graph
  $mindate = array(
    'year'  => date('Y', $mindate),
    'month' => date('m', $mindate) - 1,
    'day'   => $week ? date('d', $mindate) : date("d") - 6,
  );

  # Initialize statistics array
  $stats = array();
  $stats_patt = array();
  foreach ($chtexts as $i => $choice) {
    $stats_patt[$i] = 0;
  }
  foreach ($date_range as $date) {
    $stats[$date] = $stats_patt;
  }

  # Collect statistics
  $cdate = $date_range[0];
  $ctime = strtotime($cdate);
  $votes_count = count($votes);
  for ($i = 0; $i < $votes_count; $i++) {
    $vote = $votes[$i];
    # Copy prev results
    if ($vote['time'] > $ctime) {
      $tmp_date = strtotime('+1 day', $ctime);
      while ($tmp_date <= $vote['time']) {
        $stats[date('Y-m-d', $tmp_date)] = $stats[$cdate];
        $tmp_date = strtotime('+1 day', $tmp_date);
      }
      $ctime = $vote['time'];
      $cdate = date('Y-m-d', $ctime);
    }
    $m = $vote['status'] == 1 ? 1 : -1;
    $stats[$cdate][$vote['index']] += $m;
  }

  // fix the lail of data
  $stats_last = $stats[$cdate];
  while ($ctime < time()) {
    $ctime = strtotime('+1 day', $ctime);
    $cdate = date('Y-m-d', $ctime);
    $stats[$cdate] = $stats_last;
  }

  # Create a response arrays
  $list = array();
  foreach ($stats as $stat) {
    foreach ($chtexts as $i => $choice) {
      $list[$i][] = $stat[$i];
    }
  }

  $history = array(
    'date'  => $mindate,
    'stats' => $stats,
    'cdate' => $cdate,
  );
  foreach ($chtexts as $i => $choice) {
    $history += array(
      'choice' . $i => array(
        'name' => $choice,
        'data' => $list[$i],
      )
    );
  }

  return $history;
}

/**
 * Filter
 *
 * @param $node
 *
 * @return null|string
 */
function theme_charts_filter($node) {
  charts_filter_theme_preprocess($node);
  drupal_add_js(drupal_get_path('module', 'charts') . "/include/charts.filter.js");
  return drupal_get_form('charts_filter_form');
}

/**
 * Preprocess for Filter
 *
 * @param $node
 *
 * @return mixed
 */
function charts_filter_theme_preprocess($node) {
  static $dataset = NULL;

  if (is_null($dataset)) {
    $dataset = array();

    $chtexts = charts_chtexts($node);

    # Get categories
    $cat = charts_filter_categories();

    # template for vote count
    $pattern = array();
    foreach ($chtexts as $i => $choice) {
      $pattern[$i] = array();
    }

    # Initialize statistics
    foreach ($cat as $key => &$data) {
      if ($key == '') {
        $data['#results'] = array();
        $data['#options'] = $chtexts;
      }
      $data['#results'] = $pattern;
      foreach ($data['#results'] as &$results) {
        foreach ($data['#options'] as $optkey => $option) {
          $results[$optkey] = 0;
        }
      }
    }

    # get total votes
    $counts = & $cat['']['#results'];
    foreach ($node->choices as $choice) {
      $counts[$choice['index']][$choice['index']] = (int) $choice['votes'];
    }

    # Collect statistics
    $y = date('Y');
    $stat_fields = charts_filter_fields();
    foreach ($stat_fields as $field) {
      $result = db_query("
        SELECT pval.value, v.chid
        FROM cpoll_choices c
        INNER JOIN cpoll_votes v ON v.chid = c.chid AND v.status = 1
        LEFT JOIN profile_values pval ON v.uid = pval.uid
          AND pval.fid = (SELECT fid FROM profile_fields WHERE name = '%s')
        WHERE c.nid = '%d'", $field, $node->nid);
      while ($vote = db_fetch_array($result)) {
        $vote['index'] = $node->choices[$vote['chid']]['index'];
        switch ($field) {
          case 'profile_yob' :
            $counts = & $cat['age']['#results'][$vote['index']];
            if ($vote['value'] == '') {
              $counts[3]++;
            }
            else {
              $age = $y - $vote['value'];
              if ($age >= 51) {
                $counts[2]++;
              }
              elseif ($age >= 31) {
                $counts[1]++;
              }
              else {
                $counts[0]++;
              }
            }
            break;
          default:
            $name = str_replace('profile_', '', $field);
            $counts = & $cat[$name]['#results'][$vote['index']];
            if (isset($cat[$name]['#options'][$vote['value']])) {
              $counts[$vote['value']]++;
            }
            else {
              $counts[sizeof($counts) - 1]++;
            }
            break;
        }
      }
    }

    drupal_add_js(array('charts' => array('filter' => $cat)), 'setting');
    $dataset = $cat;
  }

  return $dataset;
}

/**
 * Filter -- form
 *
 * @return array
 */
function charts_filter_form() {
  $form = array();

  $form['filter'] = array(
    '#type'    => 'select',
    '#options' => array( //
    ),
    '#suffix'  => '<div id="chart-filter" style="width:100%;"><svg style="height:280px;"></svg></div>',
    '#id'      => 'filter',
  );
  $cat = charts_filter_categories();
  foreach ($cat as $key => $data) {
    $form['filter']['#options'][$key] = $data['#name'];
  }

  return $form;
}

/**
 * Filter -- categories
 *
 * @return mixed
 */
function charts_filter_categories() {
  static $cat = NULL;

  if (is_null($cat)) {
    $cat = array();

    $stat_fields = charts_filter_fields();
    $fields = array();
    $result = db_query("SELECT * FROM {profile_fields} WHERE name IN (" . db_placeholders($stat_fields, 'varchar') . ")", $stat_fields);
    while ($row = db_fetch_object($result)) {
      $fields[] = $row;
    }

    $cat[''] = array(
      '#name'    => t('Total Votes'),
      '#options' => array(
        'Total Votes',
      ),
    );

    foreach ($fields as $field) {

      switch ($field->name) {
        case 'profile_yob' :
          $cat['age'] = array(
            '#name'    => t('Age'),
            '#options' => array(
              '18-30',
              '30-50',
              '50 above',
              'undefined',
            ),
          );
          break;
        default:
          $name = str_replace('profile_', '', $field->name);
          $cat[$name] = array(
            '#name'    => t($field->title),
            '#options' => explode("\n", $field->options),
          );
          $cat[$name]['#options'][] = 'undefined';
          break;
      }
    }
  }

  return $cat;
}

/**
 * Filter -- profile fields
 *
 * @return array
 */
function charts_filter_fields() {
  return array(
    'profile_yob',
    'profile_gender',
    'profile_religion',
    'profile_ethnicity',
    'profile_sorient',
    'profile_education',
    'profile_income'
  );
}

/**
 * Strength chart
 *
 * @param $node
 *
 * @return string
 */
function theme_charts_strength($node) {
  # settings
  drupal_add_js(array('charts' => array('strength' => charts_strength($node))), 'setting');
  drupal_add_js(drupal_get_path('module', 'charts') . "/include/charts.strength.js");

  return '<div class="expanding stat"><h6 class="button" id="deb-ana">' . t('Stats') . '</h6></div>';
}

/**
 * @param $node
 *
 * @return array
 */
function charts_strength($node) {
  # Prepare the data for the debate analysis
  $data = array();
  foreach ($node->choices as $choice) {
    $data[$choice['index']] = array(
      'x'     => $choice['chtext_short'],
      'color' => '#C2499B',
      'y'     => 0,
    );
  }

  $result = db_query("
    SELECT ao.chid, IFNULL(SUM(vv.value)*ao.val,0) AS value
    FROM {content_field_reference} cfr
    INNER JOIN {cpoll_choices} c ON c.nid = cfr.field_reference_nid
    INNER JOIN {argument_options} ao ON ao.chid = c.chid AND ao.nid = cfr.nid
    LEFT JOIN {votingapi_vote} vv ON vv.content_id = cfr.nid AND vv.content_type = 'node'
    WHERE c.nid = '%d'
    GROUP BY cfr.nid, ao.chid
    ORDER BY ao.chid ASC
  ", $node->nid);
  $args = array();
  while ($row = db_fetch_array($result)) {
    $args[$node->choices[$row['chid']]['index']] += $row['value'];
  }
  foreach ($node->choices as $chid => $choice) {
    $index = $choice['index'];
    $value = $args[$index];
    $data[$index]['color'] = $value > 0 ? '#55BA59' : '#C2499B';
    $data[$index]['y'] = (float) $value;
  }

  return $data;
}

/**
 * Quick facts
 *
 * @param $node
 *
 * @return string
 */
function theme_charts_quickfacts($node) {
  # get the data
  $data = charts_filter_theme_preprocess($node);

  $totals_all = 0;
  $totals = & $data['']['#results'];
  foreach ($totals as $i => &$total) {
    $total = $total[$i];
    $totals_all += $total;
  }

  $list_total = array();
  $list_choices = array();
  foreach ($data as $key => &$dataset) {
    if ($key == '') {
      continue;
    }
    $results = $dataset['#results'];

    # get "27% of voters make between $150,000 - $299,999"
    # get "57% of votes for rumor are Hindu"
    $tmp_total = array();
    foreach ($results as $chorder => $counts) {
      foreach ($counts as $optkey => $count) {
        $tmp_total[$optkey] += $count;
        if ($dataset['#options'][$optkey] != 'undefined' && $count != 0) {
          $list_choices[$chorder . '-' . $optkey . '-' . $key] = round(100 * $count / $totals[$chorder], 0);
        }
      }
    }

    foreach ($tmp_total as $optkey => $count) {
      if ($dataset['#options'][$optkey] != 'undefined' && $count != 0) {
        $list_total[$key . '-' . $optkey] = round(100 * $count / $totals_all, 0);
      }
    }
  }
  arsort($list_total);
  arsort($list_choices);

  # output
  $output = array();
  #1
  $i = 0;
  foreach ($list_total as $key => $percent) {
    $key = explode('-', $key);
    $optkey = $key[1];
    $key = $key[0];

    switch ($key) {
      case 'age' :
        $output[] = $percent . '% ' . t('of voters are') . ' <span class="highlight">' . t($data[$key]['#options'][$optkey]) . ' ' . t('yo') . '</span>';
        break;
      case 'income' :
        $output[] = $percent . '% ' . t('of voters make') . ' <span class="highlight">' . t($data[$key]['#options'][$optkey]) . '</span>';
        break;
      case 'gender' :
      case 'ethnicity' :
      case 'marital' :
      case 'sorient' :
      case 'education' :
      case 'religion' :
      default :
        $output[] = $percent . '% ' . t('of voters are') . ' <span class="highlight">' . t($data[$key]['#options'][$optkey]) . '</span>';
        break;
    }
    if (++$i > 1) {
      break;
    }
  }

  $chtexts = charts_chtexts($node);

  $i = 0;
  foreach ($list_choices as $key => $percent) {
    $key = explode('-', $key);
    $chorder = $key[0];
    $optkey = $key[1];
    $key = $key[2];

    $text = $chtexts[$chorder];

    $output[] = $percent . '% ' . t('of votes for') . ' <span class="highlight">' . t($text) . '</span> ' . t('are') . ' ' . ($data[$key]['#options'][$optkey]);

    if (++$i > 3) {
      break;
    }
  } # get "57% of votes for rumor are Hindu"

  return '<span>' . implode('</span></br><span>', $output) . '</span></br>';
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function charts_menu() {
  $menu = array();

  $menu['charts/update'] = array(
    'page callback'   => 'charts_update',
    'page arguments'  => array(2),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * @param $nid
 */
function charts_update($nid) {
  // check permission
  if (!($node = node_load($nid)) || ('issue' != $node->type)) {
    print json_encode(array(
      'status'  => FALSE,
      'message' => t("Content does not exist"),
    ));
  }
  else {
    print json_encode(array(
      'status'  => TRUE,
      'message' => t('Success'),
      'data'    => array(
        'filter'   => charts_filter_theme_preprocess($node),
        'gmap'     => charts_gmap($node),
        'history'  => charts_history($node),
        'strength' => charts_strength($node),
      ),
    ));
  }
  exit;
}
