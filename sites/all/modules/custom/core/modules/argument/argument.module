<?php

include_once "argument.theme.inc";
include_once "argument.forms.inc";
include_once "argument.pages.inc";

/**
 *
 */
function argument_theme() {
  $theme = array();

  $theme['argument_tab'] = array(
    'arguments' => array('nodes' => array()),
  );
  $theme['argument_item'] = array(
    'arguments' => array('node' => NULL),
    'template' => 'templates/argument-item',
  );
  $theme['argument_comment'] = array(
    'arguments' => array('comment' => NULL),
    'template' => 'templates/argument-comment',
  );
  $theme['argument_resource_preview'] = array(
    'arguments' => array('node' => NULL),
    'template' => 'templates/argument-resource-preview',
  );

  $theme['argument_result_ball'] = array(
    'arguments' => array('vote_sum' => NULL),
  );

  $theme['argument_delete'] = array(
    'arguments' => array(
      'comment_type' => NULL,
      'comment_id' => NULL,
    ),
  );

  return $theme;
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function argument_menu()
{
  $menu = array();

  # switch tabs
  $menu['argument/tab/%/%/%'] = array(
    'page callback' => 'argument_tab',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
  );

  # comment creation
  $menu['argument/create/comment'] = array(
    'page callback' => 'argument_create_comment',
    'type' => MENU_CALLBACK,
    'access arguments' => array('post comments without approval'),
  );

  # preview resource
  $menu['argument/preview/resource'] = array(
    'page callback' => 'argument_preview_resource',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  # create argument/resource
  $menu['argument/create'] = array(
    'page callback' => 'argument_create',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $menu['argument/delete/%/%'] = array(
    'page callback' => 'argument_delete',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );



  return $menu;
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function argument_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  if ('argument' == $node->type || 'resource' == $node->type) {
    switch ($op) {
      case 'load' :
        $node->creation_time = time_interval($node->created, true);
        $node->comments = argument_recent_comments($node->nid);
        break;
    }
  }
}

/**
 * Implementation of hook_comment()
 *
 * @param $a1
 * @param $op
 */
function argument_comment(&$a1, $op)
{
  switch ($op) {
    case 'view' :
      $a1->creation_time = time_interval($a1->timestamp, true);
      break;
  }
}

/**
 * Get recent comments
 *
 * @param $nid
 * @return array
 */
function argument_recent_comments($nid)
{
  $comments = array();

  $result = db_query("SELECT * FROM {comments} WHERE nid = '%d' AND status = '%d' AND comment <> '' ORDER BY cid DESC", $nid, COMMENT_PUBLISHED);
  while ($comment = db_fetch_object($result)) {
    $comment->content_id = $comment->cid;
    $comment->content_type = 'comment';
    $comments[] = $comment;
  }

  return $comments;
}

/**
 * @param $nid
 * @param $info
 * @return array
 */
function argument_get_list($nid, &$info) {
  $items = array();

  $result = db_query("
    SELECT n.*
    FROM {node} n
    INNER JOIN {content_field_reference} cfr
      ON n.nid = cfr.nid
    WHERE n.status = 1 AND cfr.field_reference_nid = '%d'
    ORDER BY nid DESC", $nid);
  while ($row = db_fetch_object($result)) {
    $items[] = $row;
    $info['all']++;
    $info[$row->type]++;
  }

  return $items;
}