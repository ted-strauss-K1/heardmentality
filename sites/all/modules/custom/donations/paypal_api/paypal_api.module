<?php

/**
 * Include required class
 */
require('paypal_api.class');

/**
 * Define permissions
 */
define('PAYPAL_ADMIN', 'Administer Paypal API Credentials');

/**
 * Implementation of hook_perm()
 */
function paypal_api_perm()
{
  return array(PAYPAL_ADMIN);
}

/**
 * Implementation of hook_menu()
 */
function paypal_api_menu()
{
  $menu = array();

  $menu['admin/settings/paypal_api'] = array(
    'title' => t('Paypal API'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_api_form'),
    'access arguments' => array(PAYPAL_ADMIN),
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu;
}

/**
 * Admin form for Paypal API Credentials
 */
function paypal_api_form()
{
  $form = array();

  $form['user'] = array(
    "#type" => "textfield",
    "#title" => t("PayPal API user name"),
    "#value" => variable_get('paypal_api_user', ''),
  );
  $form['pwd'] = array(
    "#type" => "textfield",
    "#title" => t("PayPal API password"),
    "#value" => variable_get('paypal_api_pwd', ''),
  );
  $form['signature'] = array(
    "#type" => "textfield",
    "#title" => t("PayPal API signature string"),
    "#value" => variable_get('paypal_api_signature', ''),
  );
  $form['live'] = array(
    '#type' => 'checkbox',
    '#title' => t('Live mode'),
    '#value' => variable_get('paypal_api_live', false),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Admin form for Paypal API Credentials - Submission
 */
function paypal_api_form_submit($form, $form_state)
{
  $post = $form_state["clicked_button"]["#post"];
  variable_set('paypal_api_user', $post['user']);
  variable_set('paypal_api_pwd', $post['pwd']);
  variable_set('paypal_api_signature', $post['signature']);
  variable_set('paypal_api_live', (bool)$post['live']);
}

/**
 * Paypal API class constructor
 */
function paypal_api()
{
  $credentials = array(
    'USER' => variable_get('paypal_api_user', ''),
    'PWD' => variable_get('paypal_api_pwd', ''),
    'SIGNATURE' => variable_get('paypal_api_signature', ''),
  );
  $live = variable_get('paypal_api_live', false);
  return new Paypal($credentials, $live);
}

/**
 * Paypal API request
 *
 * @var array $params The array containing the list of params to send to Paypal
 * The list of params
 *  RETURNURL
 *  CANCELURL
 *  PAYMENTREQUEST_0_AMT
 *  PAYMENTREQUEST_0_SHIPPINGAMT
 *  PAYMENTREQUEST_0_CURRENCYCODE
 *  PAYMENTREQUEST_0_ITEMAMT
 *  L_PAYMENTREQUEST_0_NAME0
 *  L_PAYMENTREQUEST_0_DESC0
 *  L_PAYMENTREQUEST_0_AMT0
 *  L_PAYMENTREQUEST_0_QTY0
 */
function paypal_api_request(&$params)
{
  $requestParams = array();
  foreach (array(
             'AMT', 'CURRENCYCODE', 'RETURNURL', 'CANCELURL',
             'PAYMENTREQUEST_0_AMT', 'PAYMENTREQUEST_0_SHIPPINGAMT', 'PAYMENTREQUEST_0_CURRENCYCODE', 'PAYMENTREQUEST_0_ITEMAMT',
             'L_PAYMENTREQUEST_0_NAME0', 'L_PAYMENTREQUEST_0_DESC0', 'L_PAYMENTREQUEST_0_AMT0', 'L_PAYMENTREQUEST_0_QTY0')
           as $key
  ) {
    if (isset($params[$key])) {
      $requestParams[$key] = $params[$key];
    }
  }
  $paypal_api = paypal_api();
  $response = $paypal_api->request('SetExpressCheckout', $requestParams);
  if (is_array($response) && $response['ACK'] == 'Success') {
    $params['token'] = $response['TOKEN'];
    return true;
  } else {
    return false;
  }

}