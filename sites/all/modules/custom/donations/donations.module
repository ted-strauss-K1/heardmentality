<?php

/**
 * Admin
 */
require_once "donations.admin.inc";

/**
 * Define permissions
 */
define('DONATIONS_MAKE', 'Make Donations');

/**
 * Define statuses
 */
define('DONATION_PENDING', 0);
define('DONATION_SUCCESS', 1);
define('DONATION_FAILURE', 2);
define('DONATION_CANCEL', 3);

/**
 * Implementation of hook_perm()
 */
function donations_perm()
{
  return array(DONATIONS_MAKE) + donations_admin_perm();
}

/**
 * @return array
 */
function donations_api() {
  return module_invoke_all('donations');
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function donations_menu()
{
  $menu = array();

  $menu['donate'] = array(
    'title' => t('Donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('donations_donate_form'),
    'access arguments' => array(DONATIONS_MAKE),
    'type' => MENU_CALLBACK,
  );
  $menu['donate/success/%'] = array(
    'title' => t('Donate'),
    'page callback' => 'donations_success',
    'page arguments' => array(2),
    'access arguments' => array(DONATIONS_MAKE),
    'type' => MENU_CALLBACK,
  );
  $menu['donate/cancel/%'] = array(
    'title' => t('Donate'),
    'page callback' => 'donations_cancel',
    'page arguments' => array(2),
    'access arguments' => array(DONATIONS_MAKE),
    'type' => MENU_CALLBACK,
  );

  return $menu + donations_admin_menu();
}

/**
 * User Donation Form
 */
function donations_donate_form()
{
  $form = array();

  $form['#action'] = url('donate', array('absolute' => TRUE));

  $form['prefix'] = array(
    "#type" => "markup",
    "#value" => variable_get('donations_prefix', ''),
  );

  $values = variable_get('donations_values', array());
  $values['other'] = 'Other';
  if (!empty($values)) {
    foreach ($values as &$value) {
      $value = t($value);
    }
    $keys = array_keys($values);
    $rand_key = array_rand($values, 1);
    $form['values'] = array(
      "#type" => "radios",
      "#title" => t("Donation amount"),
      '#default_value' => $rand_key == count($values) - 1 ? $keys[0] : $rand_key,
      '#options' => $values,
    );
  }

  $form['other'] = array(
    "#type" => "textfield",
    "#title" => t("Other amount"),
    "#value" => '',
  );

  $payment_methods = donations_api();
  $form['api'] = array(
    "#type" => "radios",
    "#title" => t("Payment method"),
    '#default_value' => array_key_exists('paypal_api', $payment_methods) ? 'paypal_api': @key($payment_methods),
    '#options' => $payment_methods,
  );

  $form['suffix'] = array(
    "#type" => "markup",
    "#value" => variable_get('donations_suffix', ''),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Donate'),
  );

  return $form;
}

/**
 * User Donation Form - Validation
 */
function donations_donate_form_validate($form, $form_state)
{
  $post = $form_state["clicked_button"]["#post"];
  if ($post['values'] == 'other' && !is_numeric($post['other'])) {
    form_set_error('other', t('Value should be numeric'));
  }
  if (empty($post['api'])) {
    form_set_error('api', t('Select a payment method'));
  }
}

/**
 * User Donation Form
 */
function donations_donate_form_submit($form, $form_state)
{
  $post = $form_state["clicked_button"]["#post"];
  $amount = $post['values'] == 'other' ? $post['other'] : $post['values'];
  $payment_method = $post['api'];

  donations_make($payment_method, $amount);
}

/**
 * @param $payment_method
 * @param $amount
 */
function donations_make($payment_method, $amount) {
  # hardcode
  $currency = "USD";
  $comment = "";

  global $user;
  db_query("
    INSERT INTO {donations}
    SET
      uid = '%d',
      amount = '%d',
      currency = '%s',
      payment_method = '%s',
      token = '%s',
      transaction_id = '%s',
      comment = '%d',
      status = '%d'",
      $user->uid, $amount, $currency, $payment_method, '', '', $comment, DONATION_PENDING
  );
  $op_id = db_last_insert_id('donations', 'id');

  $function = $payment_method . '_donation_make';
  if (function_exists($function) && $op_id) {
    $function($op_id);
  }
  drupal_goto();
}

/**
 * @param $op_id
 * @return bool|null|object|stdClass
 */
function donations_record($op_id) {
  return db_fetch_object(db_query("SELECT * FROM {donations} WHERE id = '%d'", $op_id));
}

/**
 * Cancel callback for the donation
 */
function donations_cancel($payment_method)
{
  $function = $payment_method . '_donations_cancel';
  if (function_exists($function)) {
    if ($record = $function()) {
      db_query("UPDATE {donations} SET status = '%d' WHERE id = '%d'", DONATION_CANCEL, $record->id);
    }
  }
  drupal_goto();
}

/**
 * Success callback for the donation
 */
function donations_success($payment_method)
{
  $function = $payment_method . '_donations_success';
  if (function_exists($function)) {
    if ($record = $function()) {
      db_query("UPDATE {donations} SET status = '%d' WHERE id = '%d'", DONATION_SUCCESS, $record->id);
    }
  }
  drupal_goto();
}