<?php

/**
 * Donations init
 */
function donations_init() {
  //
//  $s = drupal_install_schema('donations');
}

/**
 * Define permissions
 */
define('DONATIONS_ADMIN', 'Administer Donations');

/**
 * Define permissions
 */
define('DONATIONS_MAKE', 'Make Donations');

/**
 * Implementation of hook_perm()
 */
function donations_perm() {
  return array(DONATIONS_ADMIN, DONATIONS_MAKE);
}

/**
 * Implementation of hook_menu()
 */
function donations_menu() {
  $menu = array();

  $menu['admin/donations'] = array(
    'title'            => t('Donations'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('donations_admin_form'),
    'access arguments' => array(DONATIONS_ADMIN),
    'type'             => MENU_NORMAL_ITEM,
  );

  $menu['donate'] = array(
    'title'            => t('Donate'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('donations_donate_form'),
    'access arguments' => array(DONATIONS_MAKE),
    'type'             => MENU_CALLBACK,
  );
  $menu['donate/success'] = array(
    'title'            => t('Donate'),
    'page callback'    => 'donations_donate_success',
    'access arguments' => array(DONATIONS_MAKE),
    'type'             => MENU_CALLBACK,
  );
  $menu['donate/cancel'] = array(
    'title'            => t('Donate'),
    'page callback'    => 'donations_donate_cancel',
    'access arguments' => array(DONATIONS_MAKE),
    'type'             => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Donation Admin form
 */
function donations_admin_form() {
  $form = array();

  $form['prefix'] = array(
    "#type"         => "textarea",
    "#title"        => t("Prefix text"),
    "#value"        => variable_get('donations_prefix', ''),
  );

  $values = variable_get('donations_values', array());
  $tmp = array();
  foreach ($values as $item => $string) {
    $tmp[] = $item . '|' . $string;
  }
  $form['values'] = array(
    "#type"         => "textarea",
    "#title"        => t("Values"),
    "#value"        => implode("\n", $tmp),
    '#description'  => t('On value per row in format "50|50$"')
  );

  $form['suffix'] = array(
    "#type"         => "textarea",
    "#title"        => t("Suffix text"),
    "#value"        => variable_get('donations_suffix', ''),
  );

  $form['submit'] = array(
    '#type'         => 'submit',
    '#value'        => t('Submit'),
  );

  return $form;
}

/**
 * Donation Admin form - Submission
 */
function donations_admin_form_submit($form, $form_state) {
  $post = $form_state["clicked_button"]["#post"];
  $values = explode("\n", $post['values']);
  $list = array();
  foreach ($values as $item) {
    if (!empty($item)) {
      $item = explode("|", $item, 2);
      $list[$item[0]] = empty($item[1]) ? $item[0] : $item[1];
    }
  }
  variable_set('donations_values', $list);
  variable_set('donations_prefix', $post['prefix']);
  variable_set('donations_suffix', $post['suffix']);
}

/**
 * User Donation Form
 */
function donations_donate_form() {
  $form = array();

  $form['#action'] = url('donate', array('absolute' => true));
  $form['prefix'] = array(
    "#type"         => "markup",
    "#value"        => variable_get('donations_prefix', ''),
  );

  $values = variable_get('donations_values', array());
  $values['other'] = 'Other';
  if (!empty($values)) {
    foreach ($values as &$value) {
      $value = t($value);
    }
    $keys = array_keys($values);
    $rand_key = array_rand($values, 1);
    $form['values'] = array(
      "#type"           => "radios",
      "#title"          => t("Donation amount"),
      '#default_value'  => $rand_key == count($values) - 1 ? $keys[0] : $rand_key,
      '#options'        => $values,
    );
  }

  $form['other'] = array(
    "#type"         => "textfield",
    "#title"        => t("Other amount"),
    "#value"        => '',
  );

  $form['suffix'] = array(
    "#type"         => "markup",
    "#value"        => variable_get('donations_suffix', ''),
  );

  $form['submit'] = array(
    '#type'         => 'submit',
    '#value'        => t('Donate'),
  );

  return $form;
}

/**
 * User Donation Form - Validation
 */
function donations_donate_form_validate($form, $form_state) {
  $post = $form_state["clicked_button"]["#post"];
  if ($post['values'] == 'other' && !is_numeric($post['other'])) {
    form_set_error('other', t('Value should be numeric'));
  }
}

/**
 * User Donation Form
 */
function donations_donate_form_submit($form, $form_state) {
  $post = $form_state["clicked_button"]["#post"];
  $amt = $post['values'] == 'other' ? $post['other'] : $post['values'];

  $requestParams = array(
    'RETURNURL' => url('donate/success', array('absolute' => true)),
    'CANCELURL' => url('donate/cancel', array('absolute' => true)),
  );

  $currency = 'USD';

  $orderParams = array(
    'PAYMENTREQUEST_0_AMT' => $amt,
    'PAYMENTREQUEST_0_SHIPPINGAMT' => '0',
    'PAYMENTREQUEST_0_CURRENCYCODE' => $currency,
    'PAYMENTREQUEST_0_ITEMAMT' => $amt
  );

  $item = array(
    'L_PAYMENTREQUEST_0_NAME0' => t('Donation'),
    'L_PAYMENTREQUEST_0_DESC0' => t('Donation to ') . variable_get('site_name', 'HeardMentality'),
    'L_PAYMENTREQUEST_0_AMT0' => $amt,
    'L_PAYMENTREQUEST_0_QTY0' => '1'
  );

  $params = $requestParams + $orderParams + $item;
  $output = paypal_api_request($params);
  if ($output === false) {
    form_set_error('request failed', t('Request to Paypal failed'));
  } else {
    global $user;
    db_query("
      INSERT INTO {donations}
      SET
        uid = '%d',
        amount = '%d',
        currency = '%s',
        comment = '%d',
        status = '%d',
        token = '%s',
        transaction_id = '%s'",
      $user->uid, $amt, $currency, '', 0, $params['token'], ''
    );
    drupal_goto( 'https://www.sandbox.paypal.com/webscr', 'cmd=_express-checkout&token=' . urlencode($params['token']) );
  }
}

/**
 * Cancel the donation
 */
function donations_donate_cancel() {
  if (isset($_GET['token']) && !empty($_GET['token'])) {
    db_query("DELETE FROM {donations} WHERE token = '%s'", $_GET['token']);
  }
  drupal_goto();
}

/**
 * Cancel the donation
 */
function donations_donate_success() {
  if (isset($_GET['token']) && !empty($_GET['token'])) {
    $payment = db_fetch_object(db_query("SELECT * FROM {donations} WHERE token = '%s'", $_GET['token']));
    $paypal = paypal_api();
    $requestParams = array(
      'TOKEN' => $_GET['token'],
      'PAYMENTACTION' => 'Sale',
      'PAYERID' => $_GET['PayerID'],
      'PAYMENTREQUEST_0_AMT' => $payment->amount,
      'PAYMENTREQUEST_0_CURRENCYCODE' => $payment->currency,
    );

    $response = $paypal -> request('DoExpressCheckoutPayment', $requestParams);
    if( is_array($response) && $response['ACK'] == 'Success') {
      db_query("UPDATE {donations} SET status = '%d', transaction_id = '%s' WHERE token = '%s'", 1, $response['PAYMENTINFO_0_TRANSACTIONID'], $_GET['token']);
      drupal_set_message(t('Thank you for you donation!'));
    } else {
      db_query("UPDATE {donations} SET status = '%d' WHERE token = '%s'", 2, $_GET['token']);
    }
  }
  drupal_goto();
}