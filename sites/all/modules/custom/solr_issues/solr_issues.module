<?php

function solr_issues_menu() {
  $items['issues2'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('solr_issues_search_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
          // 'file' => 'issue.pages.inc',
  );
  $items['issues_solr/ajax/%'] = array(
    'page callback' => 'solr_issues_ajax_response',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
          // 'file' => 'issue.pages.inc',
  );
  $items['issues_solr2/ajax/%'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
          // 'file' => 'issue.pages.inc',
  );
  $items['issues_solr2/ajax'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
          // 'file' => 'issue.pages.inc',
  );
  return $items;
}

function solr_issues_search_form($form_state) {
  $form['linkbox'] = array(
    '#type' => 'item',
    '#value' => '<div id ="linkbox"></div>',
  );
  return $form;
}

function solr_issues_seach_form_submit($form, &$form_state) {
  $search_page = $form['#search_page'];
  $redirect = $search_page->search_path;
  if (strlen($form_state['values']['keys'])) {
    $redirect .= '/' . $form_state['values']['keys'];
  }
  if (isset($form_state['values']['get'])) {
    $get = json_decode($form_state['values']['get'], TRUE);
  }
  if (!empty($form_state['values']['retain-filters'])) {
    // Add our saved value
    $get['retain-filters'] = '1';
    // Add the query values into the redirect.
    $form_state['redirect'] = array($redirect, array('query' => $get));
  }
  else {
    // Redirects to path set in configuration.
    $form_state['redirect'] = $redirect;
  }
}

function solr_issues_form_alter(&$form, $form_state, $form_id) {
  //krumo('dfg');
  //krumo($form);
}

function solr_issues_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Issues'),
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
      break;

    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          $block['subject'] = t('Find A Golf Course:');
          $block['content'] = drupal_get_form('solr_issues_block_form');
          break;
      }
      return $block;
  }
}

function solr_issues_block_form($form_state) {
  ahah_helper_register($form, $form_state);
  $query = array('geonameid' => 'Canada');
  $result = geonames_query('children', $query);
  drupal_add_js(drupal_get_path('module', 'solr_issues') . '/solr_issues.js');
  drupal_add_js(array('base_url' => "$base_url"), 'setting');
  global $language;
  $curLanguage = $language->language;
  $cck_country = db_query("select cc.field_issue_country_value from content_field_issue_country cc, node n where cc.nid = n.nid and n.language = '$curLanguage' group by field_issue_country_value");
  while ($ccklist = db_fetch_object($cck_country)) {
    if (!empty($ccklist->field_issue_country_value))
      $countries[$ccklist->field_issue_country_value] = $ccklist->field_issue_country_value;
  }
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $client_select = db_query("SELECT t.tid AS cat_id, t.name AS cat_name FROM term_data t RIGHT JOIN term_hierarchy h ON t.tid = h.tid where h.parent='0' AND t.vid = '$vid'");
  $options[''] = t('SUBJECT');
  while ($list = db_fetch_object($client_select)) {
    $cnt = taxonomy_term_count_nodes($list->cat_id);
    if ($cnt != 0) {
      $options[$list->cat_id] = t(stripslashes($list->cat_name));
    }
  }

  if (!isset($form_state['storage']['category']['subject'])) {
    $usage_default_value = t('SUBJECT');
  }
  else {
    $usage_default_value = $form_state['storage']['category']['subject'];
    foreach ($usage_default_value as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $value) {
        $area_opts[$value->tid] = $value->name;
      }
    }

    if (isset($form_state['storage']['category']['defarea'])) {
      foreach ($form_state['storage']['category']['defarea'] as $areatid) {
        $ids = taxonomy_get_children($areatid);
        foreach ($ids as $value) {
          $detail_opts[$value->tid] = $value->name;
        }
      }
    }
    else {
      $detail_opts = array();
    }
  }
  $form['category'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="category-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  $form['category']['subject'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('category')),
      'wrapper' => 'category-wrapper',
    ),
    '#default_value' => $usage_default_value,
    '#multiple' => TRUE,
  );
  $form['category']['defarea'] = array(
    '#default_value' => $form_state['storage']['category']['defarea'],
    '#type' => 'select',
    '#options' => $area_opts,
    '#multiple' => TRUE,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('category')),
      'wrapper' => 'category-wrapper',
    ),
  );
  $form['category']['defdetail'] = array(
    '#default_value' => $form_state['storage']['category']['defdetail'],
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $detail_opts,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('category')),
      'wrapper' => 'category-wrapper',
    ),
  );

  if (isset($form_state['storage']['location']['country'])) {
    foreach ($form_state['storage']['location']['country'] as $country) {
      $xyz = geonames_countryinfo($country);
      $query = array('geonameid' => $xyz['geonameid']);
      $results = geonames_query('children', $query);
      foreach ($results->results as $state) {
        $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_state} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_state_value = '%s' $langQuery", $state['geonameid']));
        if ($count > 0) {
          $states[$state['geonameid']] = $state['name'];
        }
      }
    }
  }
  if (isset($form_state['storage']['location']['defstate'])) {

    foreach ($form_state['storage']['location']['defstate'] as $state) {

      $query = array('geonameid' => $state);
      $results = geonames_query('children', $query);
      foreach ($results->results as $city) {
        $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_city} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_city_value = '%s' $langQuery", $city['geonameid'] . $state));
        if ($count > 0) {
          $cities[$city['geonameid'] . $state] = $city['name'];
        }
      }
    }
  }
  $form['location'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="location-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  $form['location']['country'] = array(
    '#type' => 'select',
    '#options' => $countries,
    '#multiple' => TRUE,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('location')),
      'wrapper' => 'location-wrapper',
    ),
    '#default_value' => $form_state['storage']['location']['country'],
  );

  // default state, city
  $form['location']['defstate'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#default_value' => $form_state['storage']['location']['defstate'],
    '#options' => $states,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('location')),
      'wrapper' => 'location-wrapper',
    ),
          //  '#default_value' => $getState
  );
  $form['location']['defcity'] = array(
    '#type' => 'select',
    '#options' => $cities,
    '#multiple' => TRUE,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('location')),
      'wrapper' => 'location-wrapper',
    ),
    '#default_value' => $getCity
  );

  $form['search_text'] = array(
    '#type' => 'textfield',
  );

  $form['search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#id' => 'search-solr-block',
          //  '#attributes' => array('class' => 'search-button')
  );
  // unset($form['#submit']);
  $form['#submit'][] = 'solr_issues_block_form_submit';
  unset($form_state['storage']['category']);
  unset($form_state['storage']['location']);
  return $form;
}

function solr_issues_block_form_submit($form, &$form_state) {
  // krumo($form_state);
}

function solr_issues_ajax_response() {
  $return = menu_execute_active_handler('issues_search/' . search_get_keys());
  $json = array('regions' => array('apachesolr_ajax' => $return));
  print drupal_json(array(
            'data' => $json));
}

function solr_issues_ajax_response2($page_id, $keys, $path_replacer = NULL) {
  $search_page = apachesolr_search_page_load($page_id);
  // krumo($search_page);
  $search_page->search_path = str_replace('%', $path_replacer, $search_page->search_path);
  // Retrieve the conditions that apply to this page
  $conditions = apachesolr_search_conditions_default($search_page);
  // Retrieve the results of the search
  $results = apachesolr_search_search_results($keys, $conditions, $search_page);
  // krumo($results);
  $build_results = apachesolr_search_search_page_custom($results, $search_page, $build);
  print drupal_json(array(
            'data' => $build_results['search_results']));
  /* foreach ($build_results as $build_result) {
    $build_output .= $build_result;
    } */
}