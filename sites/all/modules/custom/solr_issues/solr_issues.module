<?php

function solr_issues_menu() {
  $items['issues2'] = array(
    'page callback' => 'drupal_get_form',
    'title' => t('Issues'),
    'page arguments' => array('solr_issues_search_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['issues_solr/ajax/%'] = array(
    'page callback' => 'solr_issues_ajax_response',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['issues_solr2/ajax/%'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['issues_solr2/ajax'] = array(
    'page callback' => 'solr_issues_ajax_response2',
    'page arguments' => array('issues'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function solr_issues_search_form($form_state) {
  $form['date_filters'] = array(
    '#type' => 'item',
    '#value' => '<ul class="date_filter"><li><a class="date-solr-filter first" href="issues">This Week</a></li><li><a class="date-solr-filter" href="issues">Month</a></li><li><a class="date-solr-filter last active" href="issues">All time</a></li></ul>',
  );
  $form['sorting'] = array(
    '#type' => 'item',
    '#value' => '<ul class="options_filter"><li><a class="solr-sort first" href="issues">views</a></li><li><a href="issues" class="solr-sort">latest</a></li><li><a href="issues" class="solr-sort last">votes</a></li></ul>',
  );

  $form['linkbox'] = array(
    '#type' => 'item',
    '#value' => '<div id="linkbox"></div>',
  );
  return $form;
}

function solr_issues_seach_form_submit($form, &$form_state) {
  $search_page = $form['#search_page'];
  $redirect = $search_page->search_path;
  if (strlen($form_state['values']['keys'])) {
    $redirect .= '/' . $form_state['values']['keys'];
  }
  if (isset($form_state['values']['get'])) {
    $get = json_decode($form_state['values']['get'], TRUE);
  }
  if (!empty($form_state['values']['retain-filters'])) {
// Add our saved value
    $get['retain-filters'] = '1';
// Add the query values into the redirect.
    $form_state['redirect'] = array($redirect, array('query' => $get));
  }
  else {
// Redirects to path set in configuration.
    $form_state['redirect'] = $redirect;
  }
}

function solr_issues_form_alter(&$form, $form_state, $form_id) {
  /* $node = node_load(852);
    $node->field_issue_country[0]['value'] = 'Canada';
    node_save($node); */$result = geonames_query('countryinfo');
  // krumo($result);exit;
}

function solr_issues_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Issues'),
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
      break;

    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          $block['subject'] = t('');
          $block['content'] = drupal_get_form('solr_issues_block_form');
          break;
      }
      return $block;
  }
}

function solr_issues_block_form($form_state) {
  $form = array();
  ahah_helper_register($form, $form_state);
  global $user, $base_url;
  $query = array('geonameid' => 'Canada');
  $result = geonames_query('children', $query);
  drupal_add_js(drupal_get_path('module', 'solr_issues') . '/solr_issues.js');
  drupal_add_js(array('base_url' => "$base_url"), 'setting');
  global $language;

  $curLanguage = $language->language;
  $cck_country = db_query("
    SELECT gc.name, gc.geonameid FROM {geonames_countryinfo} gc ORDER BY gc.name ASC"
  );

  while ($ccklist = db_fetch_object($cck_country)) {
    $countries[$ccklist->geonameid] = $ccklist->name;
  }
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $client_select = db_query("SELECT t.tid AS cat_id, t.name AS cat_name FROM term_data t RIGHT JOIN term_hierarchy h ON t.tid = h.tid where h.parent='0' AND t.vid = '$vid'");

  while ($list = db_fetch_object($client_select)) {
    $cnt = taxonomy_term_count_nodes($list->cat_id);
    if ($cnt != 0) {
      $options[$list->cat_id] = t(stripslashes($list->cat_name));
    }
  }

  if (!isset($form_state['storage']['block']['subject'])) {
//  $usage_default_value = t('SUBJECT');
  }
  else {
    $return_info = t('Issues about ');
    foreach ($form_state['storage']['block']['subject'] as $key => $value) {
      $return_info .= '<span>' . $options[$value] . '</span> <span class="del-item">x</span> ';
    }
    $usage_default_value = $form_state['storage']['block']['subject'];
    foreach ($usage_default_value as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $value) {
        $area_opts[$value->tid] = $value->name;
      }
    }
    if (isset($form_state['storage']['block']['defarea'])) {
      foreach ($form_state['storage']['block']['defarea'] as $key => $value) {
        $return_info .= '<span>' . $area_opts[$value] . '</span> <span class="del-item">x</span> ';
      }
      foreach ($form_state['storage']['block']['defarea'] as $areatid) {
        $ids = taxonomy_get_children($areatid);
        foreach ($ids as $value) {
          $detail_opts[$value->tid] = $value->name;
        }
      }
      if (isset($form_state['storage']['block']['defdetail'])) {
        foreach ($form_state['storage']['block']['defdetail'] as $key => $value) {
          $return_info .= '<span>' . $detail_opts[$value] . '</span> <span class="del-item">x</span>';
        }
      }
    }
    else {
      $detail_opts = array();
    }
  }
  $form['block'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="block-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  $form['block']['results'] = array(
    '#value' => '<span>0</span>' . ' issues',
    '#type' => 'item',
    '#id' => 'count_results'
  );
  $form['block']['information'] = array(
    '#value' => $return_info,
    '#type' => 'item',
  );
  $form['block']['subject'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Narrow by'),
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('block')),
      'wrapper' => 'block-wrapper',
    ),
    '#default_value' => $usage_default_value,
    '#multiple' => TRUE,
    '#attributes' => array('class' => 'solr-block-form'),
  );
  if (count($area_opts) != 0) {
    $form['block']['defarea'] = array(
      '#default_value' => $form_state['storage']['block']['defarea'],
      '#type' => 'select',
      '#options' => $area_opts,
      '#attributes' => array('class' => 'solr-block-form'),
      '#multiple' => TRUE,
      '#ahah' => array(
        'event' => 'change',
        'path' => ahah_helper_path(array('block')),
        'wrapper' => 'block-wrapper',
      ),
    );
  }
  if (count($detail_opts) != 0) {
    $form['block']['defdetail'] = array(
      '#default_value' => $form_state['storage']['block']['defdetail'],
      '#type' => 'select',
      '#multiple' => TRUE,
      '#attributes' => array('class' => 'solr-block-form'),
      '#options' => $detail_opts,
      '#ahah' => array(
        'event' => 'change',
        'path' => ahah_helper_path(array('block')),
        'wrapper' => 'block-wrapper',
      ),
    );
  }
  if (isset($form_state['storage']['block']['country'])) {
    foreach ($form_state['storage']['block']['country'] as $country) {
      $xyz = geonames_countryinfo_geonameid($country);
  //    krumo($form_state['storage']['block']['country']);
    //  krumo($xyz);
      $query = array('geonameid' => $xyz['geonameid']);
      $results = geonames_query('children', $query);
    //  krumo($results);
      foreach ($results->results as $state) {
      //  $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_state} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_state_value = '%s' $langQuery", $state['geonameid']));
      //  if ($count > 0) {
          $states[$state['geonameid']] = $state['name'];
      //  }
      }
    }
  }

  $form['block']['country'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#options' => $countries,
    '#multiple' => TRUE,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('block')),
      'wrapper' => 'block-wrapper',
    ),
    '#default_value' => $form_state['storage']['block']['country'],
  );
  if (isset($form_state['storage']['block']['defstate'])) {

    foreach ($form_state['storage']['block']['defstate'] as $state) {

      $query = array('geonameid' => $state);
      $results = geonames_query('children', $query);
      foreach ($results->results as $city) {
      //  $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_city} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_city_value = '%s' $langQuery", $city['geonameid'] . $state));
      //  if ($count > 0) {
          $cities[$city['geonameid'] . $state] = $city['name'];
      //  }
      }
    }
  }
  if (count($states)) {
    $form['block']['defstate'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#default_value' => $form_state['storage']['block']['defstate'],
      '#options' => $states,
      '#ahah' => array(
        'event' => 'change',
        'path' => ahah_helper_path(array('block')),
        'wrapper' => 'block-wrapper',
      ),
    );
  }
  if (count($cities)) {
    $form['block']['defcity'] = array(
      '#type' => 'select',
      '#options' => $cities,
      '#multiple' => TRUE,
      '#ahah' => array(
        'event' => 'change',
        'path' => ahah_helper_path(array('block')),
        'wrapper' => 'block-wrapper',
      ),
      '#default_value' => $form_state['storage']['block']['defcity'],
    );
  }
  if ($user->uid) {
    //  $result = profile_get_user_coordinates($user->uid);
    $result = TRUE;
    if ($result) {
      $form['my_region'] = array(
        '#type' => 'checkbox',
        '#title' => t('My region'),
        '#id' => 'my_region',
      );
    }
    else {
      $form['my_region'] = array(
        '#type' => 'item',
        '#value' => l('Add location to your profile', $base_url . '/account/edit'),
      );
    }
  }
  $form['voted_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show only not voted'),
  );

  $form['search_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword'),
  );
  $form['search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#id' => 'search-solr-block',
          //  '#attributes' => array('class' => 'search-button')
  );
// unset($form['#submit']);
  $form['#submit'][] = 'solr_issues_block_form_submit';
  unset($form_state['storage']['block']);
  return $form;
}

function solr_issues_block_form_submit($form, &$form_state) {
// krumo($form_state);
}

function solr_issues_ajax_response() {
  $return = menu_execute_active_handler('issues_search/' . search_get_keys());
  $json = array('regions' => array('apachesolr_ajax' => $return));
  print drupal_json(array(
            'data' => $json));
}

function solr_issues_ajax_response2($page_id, $keys, $path_replacer = NULL) {
  $search_page = apachesolr_search_page_load($page_id);
// krumo($search_page);
  $search_page->search_path = str_replace('%', $path_replacer, $search_page->search_path);
// Retrieve the conditions that apply to this page
  $conditions = apachesolr_search_conditions_default($search_page);
// Retrieve the results of the search
  $results = apachesolr_search_search_results($keys, $conditions, $search_page);

  $build_results = solr_issues_search_output($results);
  $build_results.= theme('pager', NULL, 10, 0);
  $count = count($results);
// $build_results = apachesolr_search_search_page_custom($results, $search_page, $build);

  print drupal_json(array(
            'data' => $build_results, 'count' => $count));
}

function solr_issues_apachesolr_query_alter($query) {
  $query->addParam('fl', 'sm_field_issue_country');
  $query->addParam('fl', 'tid');
  $query->addParam('fl', 'sm_field_issue_city');
  $query->addParam('fl', 'itm_field_issue_state');

// $query->addFilter('sm_field_issue_city', '16497571923047');
  if (count($_POST['tid'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['tid'] as $key => $value) {
      $query2->addFilter('tid', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }
  if (count($_POST['country'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['country'] as $key => $value) {
      $query2->addFilter('sm_field_issue_country', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }
  if (count($_POST['state'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['state'] as $key => $value) {
      $query2->addFilter('itm_field_issue_state', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }
  if (count($_POST['city'])) {
    $query2 = apachesolr_drupal_query();
    foreach ($_POST['city'] as $key => $value) {
      $query2->addFilter('sm_field_issue_city', $value);
    }
    $query->addFilterSubQuery($query2, 'OR', 'AND');
  }
  /*
    print '<pre>';
    print_r($query);

    print '</pre>';
    exit;
   */
}

function solr_issues_search_output($results) {
  /* krumo($results);
    exit; */
  foreach ($results as $result) {
    $node = node_load($result['node']->entity_id);
    if ($node->nid == $node->tnid || $node->tnid == 0) {
      if ($_POST['voted'] && $node->allowvotes == TRUE) {
        $output .= node_view($node);
      }
      else if ($_POST['voted'] == FALSE) {
        $output .= node_view($node);
      }
    }
  }
  return $output;
}

function solr_issues_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  if (!empty($entity->views_count)) {
    $document->views_count = (int) $entity->views_count;
  }
  if (!empty($entity->votecount)) {
    $document->votecount = (int) $entity->votecount;
  }
  //exit;
}

function profile_get_user_coordinates($uid) {
  $result = db_query("SELECT latitude from {user_profile} up where up.uid ='%d'", $uid);
  return db_result($result);
}

//nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
function solr_issues_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'load' && $node->type == 'poll') {
    $result = db_query("SELECT count(aid) FROM {accesslog} a WHERE a.path = 'node/%d'", $node->nid);
    $node->views_count = db_result($result);
    // $result = db_query("SELECT count(nid) FROM {poll_votes} p WHERE p.nid = '%d'", $node->nid);
    //  $node->votes_count = db_result($result);
  }
}

function geonames_countryinfo_geonameid($param) {
  $param = check_plain($param);
  $result = db_fetch_array(db_query("SELECT * FROM {geonames_countryinfo} WHERE geonameid = '%s'", $param));
  return $result;
}