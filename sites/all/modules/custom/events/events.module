<?php

// todo dependencies

# api functions
require_once "events.api.php";

/**
 * @return array
 */
function events_content_translate_rebuild_js() {
  $path = drupal_get_path('module', 'events');
  return array(
    $path . '/events.js' => array(
      'second',
      'seconds',
      'minute',
      'minutes',
      'hour',
      'hours',
      'day',
      'days',
      'week',
      'weeks',
      'month',
      'months',
      'year',
      'years',
      'ago',
      'just now',
    ),
  );
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function events_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'delete' :
      events_del(array(
        'content_id' => $node->nid,
        'content_type' => 'node',
      ));
      // comments
      $result = db_query("
        (SELECT cid FROM comments WHERE nid = '%d') UNION
        (SELECT content_id FROM events WHERE
          content_type = 'comment' AND content_id NOT IN (SELECT cid FROM comments))", $node->nid);
      while ($cid = db_result($result)) {
        events_del(array(
          'content_id' => $cid,
          'content_type' => 'comment',
        ));
      }
      break;
  }
}

/**
 * Implementation of hook_user()
 *
 * @param $op
 * @param $edit
 * @param $account
 * @param null $category
 */
function events_user($op, &$edit, &$account, $category = NULL)
{
  switch ($op) {
    case 'delete' :
      events_del(array(
        'content_id' => $account->uid,
        'content_type' => 'user',
      ));
      events_del(array(
        'uid' => $account->uid,
      ));
      break;
  }
}

/**
 * @return array
 */
function events_menu() {
  $menu = array();

  $menu['events/event/%'] = array(
    'page callback' => 'events_preprocess_event',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['events/latest/%'] = array(
    'page callback' => 'events_get_latest',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * @param $type
 */
function events_preprocess_event($type) {
  $mtime = microtime(true);

  $vars = $_POST;
  unset($vars['q']);

  global $user;
  $uid = $user->uid;

  $messages = module_invoke_all('process_event', $type, $vars, $uid);

  $mtime = round(microtime(true) - $mtime, 4);

  exit(json_encode(array(
    'time' => $mtime,
    'messages' => $messages,
  )));
}

/**
 * @param $type
 */
function events_process_event($type, $vars, $uid) {
  if ('_' == $type[0]) {
    $p = array(
      'uid' => $uid,
      'type' => substr($type, 1),
    ) + $vars;
    events_del($p);
  } else {
    events_add($type, $vars, $uid);
  }
}

/**
 * API function : get events
 *
 * @param int $count
 * @param array $p
 * @return array
 */
function events_get_latest($id)
{
  $events = events_get(array(
    'q' => array(
      events_build_query(array('type' => array(
        'create',
        'debate',
        'reply',
        'vote',
        'follow',
        'yn',
      ))),
    ),
    'update' => $id,
  ));

  $output = array();
  foreach ($events as $item) {
    array_unshift($output, theme('events_item', $item));
  }

  print json_encode(
    $output
  );
  exit;
}

// theme

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function events_theme()
{
  $theme = array();

  $theme['events'] = array(
    'arguments' => array(
      'items' => array(),
      'settings' => '',
    ),
    'preprocess functions' => array('events_stream_theme_preprocess'),
    'template' => 'events',
  );
  $theme['events_item'] = array(
    'arguments' => array(
      'item' => array(),
    ),
  );

  return $theme + events_theme_items();
}

/**
 * Preprocess for theme "events"
 *
 * @param $vars
 */
function events_stream_theme_preprocess(&$vars)
{
  drupal_add_js(drupal_get_path('module', 'events') . '/events.translate.js');
  if (isset($vars['settings']['update'])) {
    drupal_add_js(drupal_get_path('module', 'events') . '/events.js');
  }
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function events_preprocess_page(&$vars)
{
  drupal_add_js(drupal_get_path('module', 'events') . '/events.ajax.js');
}

/**
 * Function to add the custom themes for item types
 *
 * @return array
 */
function events_theme_items()
{
  $theme = array();

  $items = module_invoke_all('events_info');

  foreach ($items as $event => $themename) {
    $theme[$themename] = array(
      'arguments' => array(
        'item' => array(),
      ),
      'preprocess functions' => array('event_item_theme_preprocess', $themename.'_theme_preprocess'),
      'file' => 'events.theme.inc',
      'template' => 'template-event-'.$event,
    );
  }

  return $theme;
}

/**
 * @return array
 */
function events_events_info()
{
  return array(
    'create'  => 'event_create',
    'vote'    => 'event_vote',
    'debate'  => 'event_debate',
    'reply'   => 'event_reply',
    'yn'      => 'event_yn',
    'follow'  => 'event_follow',
    'user_update' => 'event_user_update',
    'taxonomy' => 'event_taxonomy',

    // todo badge event
    'user_badge' => 'event_user_badge',
  );
}

/**
 * @param $item
 * @return mixed|string
 */
function theme_events_item($item)
{
  static $themes = NULL;

  if (is_null($themes)) {
    $themes = module_invoke_all('events_info');
  }

  $classes = array();
  $classes[] = 'activity-stream';
  $classes[] = 'msg';
  $classes[] = 'msg-' . $item['type'];
  $classes[] = 'uid-' . $item['uid'];
  $classes[] = 'content_id-' . $item['content_id'];
  $classes[] = 'content_type-' . $item['content_type'];

  return isset($themes[$item['type']]) ?
    '<div name="'.$item['id'].'" id="msg-' . $item['id'] . '" class="' . implode(' ', $classes) . '">' .
      theme($themes[$item['type']], $item) .
      '</div>'
    : '';
}

/**
 * Implementation of hook_block
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return mixed
 */
function events_block($op = 'list', $delta = 0, $edit = array())
{
  switch ($op) {
    case 'list':
      $blocks['events-front'] = array(
        'info' => t('Front Events'),
      );
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'events-front' :
          $block['subject'] = t('HAPPENING NOW');
          $block['content'] = theme('events', events_get(array(
            'q' => array(
              events_build_query(array('type' => array(
                'create',
                'debate',
                'reply',
                'vote',
                'follow',
                'yn',
                'taxonomy',
              ))),
            )
          )), array('update' => TRUE));
          break;
      }
      return $block;
  }
}