<?php

/**
 * Newsletter management functions
 */
require_once __DIR__ . "/newsletter.inc";
require_once __DIR__ . "/newsletter.users.inc";

/**
 * @return array
 */
function newsletter_menu () {
  $menu = array();

  // the callback to open an email on site
  $menu['newsletter/%'] = array(
    'page callback'   => 'newsletter_page',
    'page arguments'  => array(
      1
    ),
    'access callback' => true,
    'type'            => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * @param $hash
 */
function newsletter_page ($hash) {
  if ($data = newsletter_load_data($hash)) {
    print theme('newsletter', $hash);
  } else {
    drupal_not_found();
  }
  exit;
}

/**
 * @return array
 */
function newsletter_theme () {
  $theme = array();

  $theme['newsletter'] = array(
    'arguments'            => array('hash' => null),
    'template'             => 'newsletter',
    'preprocess functions' => array('theme_newsletter_preprocess_theme'),
  );
  $theme['newsletter_header'] = array(
    'arguments' => array('data' => null),
    'template'  => 'newsletter-header',
  );
  $theme['newsletter_content'] = array(
    'arguments'            => array('data' => null),
    'template'             => 'newsletter-content',
    'preprocess functions' => array('theme_newsletter_content_preprocess_theme'),
  );
  $theme['newsletter_footer'] = array(
    'arguments' => array('data' => null),
    'template'  => 'newsletter-footer',
  );

  return $theme;
}

/**
 * @param $vars
 */
function theme_newsletter_preprocess_theme (&$vars) {
  if ($data = newsletter_load_data($vars['hash'])) {
    // data
    $vars['data'] = $data;

    // zones
    foreach (array(
               'footer',
               'header',
               'content'
             ) as $zone) {
      $vars[$zone] = theme('newsletter_' . $zone, $data);
    }

    return;
  }
  $vars['error'] = true;
}

/**
 * @param $vars
 */
function theme_newsletter_content_preprocess_theme (&$vars) {
  $data = $vars['data'];

  //
  if (NEWSLETTER_WEEKLY == $data['frequency']) {
    $vars['template_files'][] = 'newsletter-content-weekly';
  }
  if (NEWSLETTER_MONTHLY == $data['frequency']) {
    $vars['template_files'][] = 'newsletter-content-monthly';
  }

  // templates
  $date = strtotime($data['newsletter']['send_date']);
  $vars['template_files'][] = 'newsletter-content-' . date('Y', $date);
  $vars['template_files'][] = 'newsletter-content-' . date('Y-m', $date);
  $vars['template_files'][] = 'newsletter-content-' . date('Y-m-d', $date);
}

/**
 * @param $hash
 *
 * @return array|bool
 */
function newsletter_load_data ($hash) {
  static $cache = array();

  if (is_null($cache[$hash])) {
    // load newsletter
    $newsletter = newsletter_load($hash);

    // error
    if (!$newsletter) {
      return $cache[$hash] = false;
    }

    // load subscription
    $account = (object)array('snid' => $newsletter['snid']);
    $subscription = simplenews_get_subscription($account);
    if ($subscription->snid == 0) {
      return $cache[$hash] = false;
    }

    // load frequency
    $frequency = $subscription->freq;

    // load nids
    $nids = newsletter_load_nodes($newsletter['hash']);
    if (empty($nids)) {
      // calculate nids
      $nids = newsletter_nodes($subscription->snid, $newsletter['send_date']);

      // error
      if (empty($nids)) {
        return $cache[$hash] = false;
      }

      // save nids
      newsletter_save_nodes($newsletter['hash'], $nids);
    }

    $cache[$hash] = array(
      'newsletter' => $newsletter,
      'nids'       => $nids,
      'frequency'  => $frequency,
      'uid'        => $subscription->uid,
    );
  }

  return $cache[$hash];
}

/**
 * todo revise
 *
 * @param     $snid
 * @param     $send_date
 * @param int $limit
 *
 * @return array
 */
function newsletter_nodes ($snid, $send_date, $limit = 5) {
  // load tids
  $account = new stdClass();
  $account->snid = $snid;
  $subscription = simplenews_get_subscription($account);
  $uid = $subscription->uid;
  $tids = array_keys($subscription->tids);
  if (!$tids) {
    $tids[] = 0;
  }

  // load nids
  $query = "
    SELECT
      n.nid,
      n.created,
      n.title,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) voted
	      FROM cpoll_choices c INNER JOIN cpoll_votes v ON c.chid = v.chid AND v.status = 1
	      WHERE c.nid = n.nid AND v.uid = '%s'
	      ) voted,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) sent
	      FROM newsletter ns INNER JOIN newsletter_nodes nn ON ns.hash = nn.hash
	      WHERE ns.snid = '%s' AND ns.status = 1 AND nn.nid = n.nid
	      ) sent,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) subscribed
	      FROM term_node tn WHERE tn.nid = n.nid AND tn.tid in (" . db_placeholders($tids) . ")
	      ) subscribed
      FROM node n
      WHERE n.type = '%s' AND n.created < UNIX_TIMESTAMP('%s') ORDER BY voted ASC, sent ASC, subscribed DESC, n.created DESC
  ";
  $params = array();
  $params[] = $uid;
  $params[] = $snid;
  $params = array_merge($params, $tids);
  $params[] = 'issue';
  $params[] = $send_date;

  // query
  $data = array();
  $result = db_query($query, $params);
  while ($row = db_fetch_array($result)) {
    $case = $row["voted"] . $row["sent"] . $row["subscribed"];
    switch ($case) {
      case "001" :
        $status = "9";
        break;
      case "011" :
        $status = "8";
        break;
      case "101" :
        $status = "7";
        break;
      case "000" :
        $status = "6";
        break;
      case "111" :
        $status = "5";
        break;
      case "010" :
        $status = "4";
        break;
      case "100" :
        continue;
        break;
      case "110" :
        continue;
        break;
    }

    $data[$status . "." . $row["created"] . str_repeat("0", 11 - strlen($row['nid'])) . $row['nid']] = $row;
  }
  krsort($data);

  // extract
  $count = 0;
  $nids = array();
  foreach ($data as $row) {
    $nids[] = intval($row["nid"]);
    if (++$count >= $limit) {
      break;
    }
  }

  return $nids;
}

/**
 * Variable name
 */
define('NEWSLETTER_DATE', 'newsletter_date');

/**
 * Implements hook_cron()
 */
function newsletter_cron () {

  // schedule newsletters
  $date = date('Y-m-d');
  $last = variable_get(NEWSLETTER_DATE, '2014-01-01');
  if (strtotime($date) > strtotime($last)) {
    // todo remove the newsletters not sent
    newsletter_schedule($date);
  }

  // send newsletters on cron
  newsletters_bulk_send();
}

/**
 * @param $date
 */
function newsletter_schedule ($date) {
  // query
  $query = "
    SELECT snid, uid, mail, code, DATEDIFF(CURDATE(), IFNULL(send_date, '2014-01-01')) days, IFNULL(send_date, '2014-01-01') last_send
    FROM (
      SELECT ss.snid, ss.uid, ss.mail, ss.freq code, n.send_date
      FROM {simplenews_subscriptions} ss
      LEFT JOIN {newsletter} n ON ss.snid = n.snid AND n.status = 1
      WHERE ss.activated = 1
      ORDER BY ss.snid ASC, n.send_date DESC) data";

  // schedule
  $result = db_query($query, NEWSLETTER_WEEKLY);
  while ($row = db_fetch_array($result)) {
    switch ($row['code']) {
      case NEWSLETTER_NEVER :
        // do nothing
        break;
      case NEWSLETTER_WEEKLY :
      case NEWSLETTER_MONTHLY :
        if ($row['days'] >= (NEWSLETTER_WEEKLY == $row['code'] ? 7 : 30)) {
          $hash = newsletter_hash($row['snid'], $date, false);
          if (newsletter_save($row['uid'], $date, $hash)) {
            // todo queue with actions
          }
        }
        break;
    }
  }
}

/**
 * Bulk send newsletters
 *
 * @param int $limit
 */
function newsletters_bulk_send ($limit = 20) {
  for ($i = 0; $i < $limit; $i++) {
    newsletter_send();
  }
}

/**
 * Send newsletter
 *
 * @param bool $snid
 *
 * @return bool
 */
function newsletter_send ($snid = false) {

  // get the newsletter's hash
  if (false !== $snid) {
    $hash = db_result(db_query("SELECT hash FROM {newsletter} WHERE snid = '%s' AND status = 0 ORDER BY send_date ASC LIMIT 1", $snid));
  } else {
    $hash = db_result(db_query("SELECT hash FROM {newsletter} WHERE status = 0 ORDER BY send_date ASC LIMIT 1", $snid));
  }

  // get email
  $email = db_result(db_query("SELECT s.mail FROM {newsletter} n INNER JOIN {simplenews_subscriptions} s ON s.snid = n.snid WHERE n.hash = '%s'", $hash));

  // settings
  $site_mail = variable_get('site_mail', 'jaminstrauss@gmail.com');
  $simplenews_send = variable_get('simplenews_send', 0);
  $simplenews_test = variable_get('simplenews_test_address', '');
  $simplenews_test = $simplenews_test ? explode(',', $simplenews_test) : array($site_mail);

  // send mails
  if ((SIMPLENEWS_COMMAND_SEND_NOW == $simplenews_send) || in_array($email, $simplenews_test)) {
    // get newsletter
    if ($data = newsletter_load_data($hash)) {
      // build content
      if ($content = theme('newsletter', $hash)) {

        //
        $nid = $data['nids'][0];
        $node = node_load($nid);
        $subject = $node->title . '?';

        // send mail
        $mailto = $email;
        $mailfrom = $site_mail;

        // send mail
        drupal_mail('newsletter', $hash, $mailto, language_default(), // todo language??
          array(
            'body'    => $content,
            'subject' => $subject,
          ), $mailfrom, true);

      }
    }
  }

  // mark as sent
  newsletter_set_sent($hash, true);
}

/**
 * @param $key
 * @param $message
 * @param $params
 */
function newsletter_mail ($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];

  $headers = array(
    'MIME-Version'              => '1.0',
    'Content-Type'              => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer'                  => 'Drupal'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
}