<?php

/**
 *
 */
require_once __DIR__ . "/newsletter.inc";

/**
 *
 */
define('NEWSLETTER_DATE', 'newsletter_date');

/**
 * @return array
 */
function newsletter_menu() {
  $menu = array();

  $menu['newsletter/%'] = array(
    'page callback'   => 'theme',
    'page arguments'  => array('newsletter', 1),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * @return array
 */
function newsletter_theme() {
  $theme = array();

  $theme['newsletter'] = array(
    'arguments'            => array('hash' => NULL),
    'template'             => 'newsletter',
    'preprocess functions' => array('theme_newsletter_preprocess_theme'),
  );

  return $theme;
}

/**
 * @param $vars
 */
function theme_newsletter_preprocess_theme(&$vars) {
  if (!$vars['hash']) {
    $vars['error'] = true;
    return;
  }

  //
  $newsletter = newsletter_load($vars['hash']);
  $nids = newsletter_nodes($newsletter['uid'], $newsletter['date']);
  $frequency = newsletter_frequency_get($newsletter['uid']);

  //
  if (NEWSLETTER_WEEKLY == $frequency) {
    $vars['template_files'][] = 'newsletter-weekly';
  }
  if (NEWSLETTER_MONTHLY == $frequency) {
    $vars['template_files'][] = 'newsletter-monthly';
  }
  $vars['template_files'][] = 'newsletter-' . $newsletter['date'];

  // vars
  $vars['newsletter'] = $newsletter;
  $vars['nids'] = $nids;
  $vars['frequency'] = $frequency;
}

/**
 * Implements hook_cron()
 */
function newsletter_cron() {

  // schedule newsletters
  $date = date('Y-m-d');
  $last = variable_get(NEWSLETTER_DATE, '2014-01-01');
  if (strtotime($date) > strtotime($last)) {
    // todo remove the newsletters not sent
    newsletter_schedule($date);
  }

  // send newsletters on cron
  newsletters_send();

}

/**
 * @param $date
 */
function newsletter_schedule($date) {
  // query
  $query = "SELECT * FROM (SELECT u.uid, IFNULL(nf.code, '%s') code, DATEDIFF(CURDATE(), IFNULL(n.sent_date, '2014-01-01')) days, n.sent_date, n.status FROM {users} u LEFT JOIN {newsletter_frequency} nf ON u.uid = nf.uid LEFT JOIN {newsletter} n ON n.uid = u.uid AND n.status = 1 WHERE u.status = 1 AND u.uid > 0 ORDER BY u.uid ASC, n.status DESC, n.sent_date DESC) data GROUP BY uid, status";

  // schedule
  $result = db_query($query, NEWSLETTER_WEEKLY);
  while ($row = db_fetch_array($result)) {
    switch ($row['code']) {
      case NEWSLETTER_NEVER :
        // do nothing
        break;
      case NEWSLETTER_WEEKLY :
      case NEWSLETTER_MONTHLY :
        if ($row['days'] >= (NEWSLETTER_WEEKLY == $row['code'] ? 7 : 30)) {
          $hash = newsletter_hash($row['uid'], $date, FALSE);
          if (newsletter_save($row['uid'], $date, $hash)) {
            // todo queue with actions?
          }
        }
        break;
    }
  }
}

/**
 * @param     $uid
 * @param     $date
 * @param int $limit
 *
 * @return array
 */
function newsletter_nodes($uid, $date, $limit = 5) {

  // load tids
  $account = new stdClass();
  $account->uid = $uid;
  $subscription = simplenews_get_subscription($account);
  $tids = array_keys($subscription->tids);

  // load nids
  $query = "
    SELECT
      n.nid,
      n.created,
      n.title,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) voted
	      FROM cpoll_choices c INNER JOIN cpoll_votes v ON c.chid = v.chid AND v.status = 1
	      WHERE c.nid = n.nid AND v.uid = '%s'
	      ) voted,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) sent
	      FROM newsletter ns INNER JOIN newsletter_nodes nn ON ns.hash = nn.hash
	      WHERE ns.uid = '%s' AND ns.status = 1 AND nn.nid = n.nid
	      ) sent,
	    (
	      SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) subscribed
	      FROM term_node tn WHERE tn.nid = n.nid AND tn.tid in (" . db_placeholders($tids) . ")
	      ) subscribed
      FROM node n
      WHERE n.type = '%s' AND n.created < UNIX_TIMESTAMP('%s') ORDER BY voted ASC, sent ASC, subscribed DESC, n.created DESC
  ";
  $params = array();
  $params[] = $uid;
  $params[] = $uid;
  $params = array_merge($params, $tids);
  $params[] = 'issue';
  $params[] = $date;

  // query
  $data = array();
  $result = db_query($query, $params);
  while ($row = db_fetch_array($result)) {
    $case = $row["voted"] . $row["sent"] . $row["subscribed"];
    switch ($case) {
      case "001" :
        $status = "9";
        break;
      case "011" :
        $status = "8";
        break;
      case "101" :
        $status = "7";
        break;
      case "000" :
        $status = "6";
        break;
      case "111" :
        $status = "5";
        break;
      case "010" :
        $status = "4";
        break;
      case "100" :
        continue;
        break;
      case "110" :
        continue;
        break;
    }

    $data[$status . "." . $row["created"] . str_repeat("0", 11 - strlen($row['nid'])) . $row['nid']] = $row;
  }
  krsort($data);

  // extract
  $count = 0;
  $nids = array();
  foreach ($data as $row) {
    $nids[] = intval($row["nid"]);
    if (++$count >= $limit) {
      break;
    }
  }

  return $nids;
}

/**
 * @param int $limit
 */
function newsletters_bulk_send($limit = 20) {
  for ($i = 0; $i < $limit; $i++) {
    newsletter_send();
  }
}

/**
 *
 */
function newsletter_send($uid = false) {

  // get newsletter
  $result = db_query("SELECT * FROM {newsletter} WHERE status = '0' LIMIT 1");
  if (false === ($newsletter = db_fetch_array($result))) {
    return false;
  }

  // get nids
  $nids = newsletter_load_nodes($newsletter['hash']);
  if (empty($nids)) {
    // calculate nids
    $nids = newsletter_nodes($uid ? $uid : $newsletter['uid'], $newsletter['date']);

    // save nids
    newsletter_save_nodes($newsletter['hash'], $nids);
  }

  // build content
  $content = theme('newsletter', $newsletter['hash']);

  // todo send mail
  $mailto = "dyachenko.oleg@gmail.com";
  $mailfrom = 'sender@domain.com';
  $subject = "Test HTML email";
  $message = $content;
  $x = drupal_mail('newsletter', $newsletter['hash'], $mailto, language_default(), // todo language??
    array('body' => $message, 'subject' => $subject), $mailfrom, TRUE);

  var_dump($x);
  exit;
}

/**
 * @param $key
 * @param $message
 * @param $params
 */
function newsletter_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];

  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
}



if (isset($_REQUEST['newsletter'])) {
  newsletter_send();
}
