<?php

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function yn_theme()
{
  $theme = array();

  $theme['yn'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => 'node',
      'owner' => false,
      'rated' => false,
    ),
  );

  return $theme;
}

/**
 * Theme "yn"
 *
 * @param $node
 * @return string
 */
function theme_yn($content_type, $content_id, $owner = false)
{
  drupal_add_js(drupal_get_path('module', 'yn') . '/yn.js');

  $notrated = false;
  list($vote_up, $vote_dn, $vote_sum, $yn_rated) = yn_votes($content_id, $content_type);
  if ($owner) {
    $title1 = t('You are not able to rate your own post!');
    $title2 = $title1;
  } elseif ($yn_rated) {
    $title1 = t('You have rated this!');
    $title2 = $title1;
  } else {
    $title1 = t('Agree this!');
    $title2 = t('Disagree this!');
    $notrated = true;
  }

  return '
    <span class="comment-agree" id="yn-' . $content_type . '-' . $content_id . '">
      <strong>' . t('Do you agree') . ($content_type == 'comment' ? '' : ' ' . t('with the argument')) . '?</strong>
      <a href="javascript:void(0);" class="yn agree ' . ($notrated ? ' yn-a' : '') . ' yn-a-' . $content_id . '" title="' . $title1 . '" name="' . $content_id . '/' . $content_type . '/' . VOTE_AGREE . '">' . t('Yes') . '<span' . ($notrated ? '' : ' class="notvoted"') . '>(' . $vote_up . ')</span></a>&nbsp;|
      <a href="javascript:void(0);" class="yn disagree ' . ($notrated ? ' yn-d' : '') . ' yn-d-' . $content_id . '" title="' . $title2 . '" name="' . $content_id . '/' . $content_type . '/' . VOTE_DISAGREE . '">' . t('No') . '<span' . ($notrated ? '' : ' class="notvoted"') . '>(' . $vote_dn . ')</span></a>
      <strong class="motivat">' . t('(Click yes/no to leave support/oppose comment.)') . '</strong>
    </span>';
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function yn_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'delete' :
      yn_cleanup($node->nid, 'node');
      break;
    case 'load'   :
      list($node->vote_up, $node->vote_dn, $node->vote_sum, $node->yn_rated) = yn_votes($node->nid, 'node');
      break;
  }
}

/**
 * Implementation of hook_comment()
 *
 * @param $a1
 * @param $op
 */
function yn_comment(&$a1, $op)
{
  switch ($op) {
    case 'delete' :
      yn_cleanup($a1->cid, 'comment');
      break;
    case 'view' :
      list($a1->vote_up, $a1->vote_dn, $a1->vote_sum, $a1->yn_rated) = yn_votes($a1->cid, 'comment');
      break;
  }
}

/**
 * Remove all the votes
 *
 * @param $content_id
 * @param $content_type
 */
function yn_cleanup($content_id, $content_type)
{
  db_query("DELETE FROM {votingapi_vote} WHERE content_type = '%s' AND content_id = '%d'", $content_type, $content_id);
}

/**
 * Agree value
 */
define('VOTE_AGREE', 1);

/**
 * Disgree Value
 */
define('VOTE_DISAGREE', -1);

/**
 * Special constant to signal auto_added node votes
 */
define('VOTE_AUTOADD', 'auto');

/**
 * Special constant to signal regular Yes/No votes
 */
define('VOTE_NORMAL', 'yn');

/**
 * Basic yes/no voting function
 *
 * @param $content_id
 * @param $value
 * @param $content_type
 * @param string $vote_source
 * @param string $uid
 * @return array|bool
 */
function yn_vote($content_id, $value, $content_type, $vote_source = '', $uid = '')
{
  # check we got some data
  if (empty($content_id) || empty($value) || empty($content_type)) {
    return false;
  }
  $vote = array(
    'content_id' => $content_id,
    'value' => $value,
    'content_type' => $content_type,
    'vote_source' => empty($vote_source) ? VOTE_NORMAL : $vote_source,
    'value_type' => 'points',
  );
  if (!empty($uid)) {
    $vote['uid'] = $uid;
  }

  global $user;

  // rules
  if ($vote['vote_source'] != VOTE_AUTOADD) {
    if (module_exists('rules')) {
      # invoke yn_voteup / yn_votedn events
      $author = _yn_content_author($content_id, $content_type);
      rules_invoke_event($value == VOTE_AGREE ? 'yn_voteup' : 'yn_votedn', $user, $author, $content_id, $content_type);
    }

    # actions
    function_exists('action_queue') && action_queue(array(
      'uid'         => $user->uid,
      'operation'   => $value == VOTE_AGREE ? 'yn_voteup' : 'yn_votedn',
      'entity_id'   => $content_id,
      'entity_type' => $content_type,
    ));
  }

  $output = votingapi_add_votes($vote);

  // aggregate
  votingapi_recalculate_results($content_type, $content_id);

  return $output;

}

/**
 * Function to get the user object of content owner
 *
 * @param $content_id
 * @param $content_type
 * @return bool
 */
function _yn_content_author($content_id, $content_type)
{
  $uid = 0;
  if ($content_type == 'node') {
    $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = '%d'", $content_id));
  } elseif ($content_type == 'comment') {
    $uid = db_result(db_query("SELECT uid FROM {comments} WHERE cid = '%d'", $content_id));
  }
  return user_load($uid);
}

/**
 * Basic vote deletion
 *
 * @param $content_id
 * @param $value
 * @param $content_type
 * @param string $vote_source
 * @param string $uid
 */
function yn_vote_delete($content_id, $value, $content_type, $vote_source = '', $uid = '')
{
  $criteria = array();
  if (!empty($content_id)) {
    $criteria['content_id'] = $content_id;
  }
  if (!empty($value)) {
    $criteria['value'] = $value;
  }
  if (!empty($content_type)) {
    $criteria['content_type'] = $content_type;
  }
  if (!empty($vote_source)) {
    $criteria['vote_source'] = $vote_source;
  }
  if (!empty($uid)) {
    $criteria['uid'] = $uid;
  }
  _votingapi_delete('vote', $criteria);
}

/**
 * Basic agree function
 *
 * @param $content_id
 * @param $content_type
 * @param string $vote_source
 * @param string $uid
 * @return array|bool
 */
function yn_agree($content_id, $content_type, $vote_source = '', $uid = '')
{
  return yn_vote($content_id, VOTE_AGREE, $content_type, $vote_source, $uid);
}

/**
 * Basic disagree function
 *
 * @param $content_id
 * @param $content_type
 * @param string $vote_source
 * @param string $uid
 * @return array|bool
 */
function yn_disagree($content_id, $content_type, $vote_source = '', $uid = '')
{
  return yn_vote($content_id, VOTE_DISAGREE, $content_type, $vote_source, $uid);
}

/**
 * Agree node
 *
 * @param $content_id
 * @param string $vote_source
 * @param string $uid
 */
function yn_agree_node($content_id, $vote_source = '', $uid = '')
{
  yn_agree($content_id, 'node', $vote_source, $uid);
}

/**
 * Disagree node
 *
 * @param $content_id
 * @param string $vote_source
 * @param string $uid
 */
function yn_disagree_node($content_id, $vote_source = '', $uid = '')
{
  yn_disagree($content_id, 'node', $vote_source, $uid);
}

/**
 * Agree comment
 *
 * @param $content_id
 * @param string $uid
 */
function yn_agree_comment($content_id, $uid = '')
{
  yn_agree($content_id, 'comment', '', $uid);
}

/**
 * Disagree comment
 *
 * @param $content_id
 * @param string $uid
 */
function yn_disagree_comment($content_id, $uid = '')
{
  yn_disagree($content_id, 'comment', '', $uid);
}

/**
 * Function to check if user already voted
 *
 * @param $content_id
 * @param $content_type
 * @param string $uid
 * @return bool
 */
function yn_user_voted($content_id, $content_type, $uid = '')
{
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $criteria = array(
    'content_id' => $content_id,
    'content_type' => $content_type,
    'uid' => $uid,
    'vote_source' => VOTE_NORMAL,
  );
  return 0 != _votingapi_count('vote', $criteria);
}

/**
 * Function to get the number of agree/disagree votes, and the sum count
 *
 * @param $content_id
 * @param $content_type
 * @return array
 */
function yn_votes($content_id, $content_type, $uid = false, $reset = false)
{
  static $cache = array();

  if (!isset($cache[$content_type][$content_id]) || $reset) {
    $votes = array(0, 0, 0, false);

    if ($uid === false) {
      global $user;
      $uid = $user->uid;
    }

    $result = db_query("
      SELECT value, COUNT(*) AS votes, SUM(CASE WHEN uid = '%d' THEN 1 ELSE 0 END) AS rated
      FROM {votingapi_vote}
      WHERE content_id =  '%d' AND content_type = '%s' GROUP BY value",
      $uid, $content_id, $content_type);
    while ($row = db_fetch_array($result)) {
      if ($row['value'] == VOTE_AGREE) {
        $votes[0] = $row['votes'];
      }
      if ($row['value'] == VOTE_DISAGREE) {
        $votes[1] = $row['votes'];
      }
      $votes[3] = $votes[3] || ($row['rated'] != 0);
    }
    $votes[2] = $votes[0] - $votes[1];
    // first vote
    $votes[4] = db_fetch_array(db_query("SELECT * FROM {votingapi_vote} WHERE content_id = '%d' AND content_type = '%s' AND value = '%d' ORDER BY timestamp ASC", $content_id, $content_type, VOTE_AGREE));

    $cache[$content_type][$content_id] = $votes;
  }

  return $cache[$content_type][$content_id];
}

/**
 * Count user Yes/No votes
 *
 * @param string $uid
 * @param null $value
 * @return bool
 */
function yn_user_vote_count($uid = '', $value = null)
{
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $criteria = array('uid' => $uid, 'vote_source' => VOTE_NORMAL);
  if (!empty($value)) {
    $criteria['value'] = $value;
  }
  return _votingapi_count('vote', $criteria);
}

/**
 * Internal helper function constructs SELECT COUNT(*) queries. Don't use unless you're me.
 *
 * @param string $table
 * @param array $criteria
 * @return bool
 */
function _votingapi_count($table = 'vote', $criteria = array())
{
  $query = "SELECT IFNULL(COUNT(*),0) FROM {votingapi_" . $table . "} v WHERE 1 = 1";
  $details = _votingapi_query('vote', $criteria);
  $query .= $details['query'];
  return db_result(db_query($query, $details['args']));
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function yn_menu()
{
  $menu = array();

  $menu['yn/%/%/%'] = array(
    'page callback' => 'yn_ajax',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 * Menu "yn" callback
 *
 * @param $content_id
 * @param $content_type
 * @param $vote_value
 */
function yn_ajax($content_id, $content_type, $vote_value)
{
  if (empty($content_id) || empty($content_type) || !in_array($vote_value, array(VOTE_AGREE, VOTE_DISAGREE))) {
    print json_encode(array(
      'status' => false,
      'message' => t('Error occurred'),
    ));
    exit();
  }
  if (!user_is_logged_in()) {
    print json_encode(array(
      'status' => false,
      'message' => t('You need to log in to join this debate'),
    ));
    exit();
  }
  if (yn_user_voted($content_id, $content_type)) {
    print json_encode(array(
      'status' => false,
      'message' => t('You have already voted'),
    ));
    exit();
  }
  yn_vote($content_id, $vote_value, $content_type);

  # content
  $content = $content_type == 'comment' ?
    _comment_load($content_id) :
    db_fetch_object(db_query("SELECT * FROM {node} WHERE nid = '%d'", $content_id));

  # votes
  if ($content_type == 'comment') {
    $_vote_value = $vote_value;
    if (empty($content->support)) {
      yn_invert_vote_value($_vote_value);
    }
    $parent_id = $content->nid;
    yn_vote($parent_id, $_vote_value, 'node', VOTE_AUTOADD);
  } else {
    $parent_id = $content_id;
  }

  $output = array();
  $votes = yn_votes($content_id, $content_type, false, true);

  list($output['vote_up'], $output['vote_dn'], $output['vote_sum'], $rated, $fvote) = $votes;
  if ($content_type == 'node') {
    list($output['pvote_up'], $output['pvote_dn'], $output['pvote_sum'], $rated) = $votes;
  } else {
    list($output['pvote_up'], $output['pvote_dn'], $output['pvote_sum'], $rated) = yn_votes($parent_id, 'node');
  }

  # uid
  if ('node' == $content_type) {
    $output['node_type'] = $content->type;
    $output['content_uid'] = $content->uid;
  } else {
    $output['content_uid'] = $content->uid;
  }

  $output['content_id'] = $content_id;
  $output['content_type'] = $content_type;
  $output['vote_value'] = $vote_value;
  $output['parent_id'] = $parent_id;
  $output['first_voter'] = $fvote['uid'];

  $message = $vote_value == VOTE_AGREE ? t('Agreed') : t('Disagreed');
  print json_encode(array(
    'status' => true,
    'message' => $message . '!',
    'data' => $output,
  ));
  exit();
}

/**
 * Invert vote value
 *
 * @param $vote_value
 */
function yn_invert_vote_value(&$vote_value)
{
  $vote_value = $vote_value == VOTE_AGREE ? VOTE_DISAGREE : VOTE_AGREE;
}

/**
 * Implementation of hook_init()
 */
function yn_init()
{
//  drupal_add_js(drupal_get_path('module', 'yn') . '/yn.js');
}
