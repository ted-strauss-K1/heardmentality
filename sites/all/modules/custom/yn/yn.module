<?php

/*
 * Implementation of hook_init()
 *
 * @see
 *  votingapi_add_votes()
 *  votingapi_delete_votes()
 *  _votingapi_delete()
 */
function yn_init() {
  drupal_add_js(drupal_get_path('module', 'yn') . '/yn.js');
}

/*
 * Implementation of hook_menu()
 */
function yn_menu() {
  $menu = array();

  $menu['yn_test'] = array(
    'page callback'    => 'yn_test',
    'access arguments' => array(UP_ACTIONS_ADMIN),
    'type'             => MENU_CALLBACK,
  );
  $menu['yn/%/%/%'] = array(
    'page callback'   => 'yn_ajax',
    'type'            => MENU_CALLBACK,
    'page arguments'  => array(1, 2, 3),
    'access callback' => TRUE,
  );

  return $menu;
}

/*
 * Debug function
 */
function yn_test() {
  global $user;
  rules_invoke_event('yn_voteup', $user, $user);
  echo 'time='.time();
}

/*
 * Agree value
 */
define('VOTE_AGREE', 1);

/*
 * Disgree Value
 */
define('VOTE_DISAGREE', -1);

/*
 * Invert vote value
 */
function yn_invert_vote_value(&$vote_value) {
  $vote_value = $vote_value == VOTE_AGREE ? VOTE_DISAGREE : VOTE_AGREE;
}

/*
 * Basic yes/no voting function.
 */
function yn_vote( $content_id, $value, $content_type, $vote_source = '', $uid = '' ) {
  # check we got some data
  if( empty($content_id) || empty($value) || empty($content_type) ) {
    return false;
  }
  $vote = array(
    'content_id'    => $content_id,
    'value'         => $value,
    'content_type'  => $content_type,
    'vote_source'   => empty($vote_source) ? VOTE_NORMAL : $vote_source,
    'value_type'    => 'points',
  );
  if( !empty($uid) ) {
    $vote['uid'] = $uid;
  }
  if ($vote['vote_source'] != VOTE_AUTOADD) {
    yn_invoke_event($value, $content_id, $content_type);
  }
  if (module_exists('activity_stream')) {
    switch ($content_type) {
      case 'node' :
        $argument = node_load($content_id);
        activity_stream_add_activity(ACTIVITY_STREAM_ARGUMENT_VOTE, array(
          'nid' => $argument->parent_issue,
          'nid_arg' => $argument->nid,
          'vote' => $value,
        ));
      break;
      case 'comment' :
        $comment = _comment_load($content_id);
        $argument = node_load($comment->nid);
        activity_stream_add_activity(ACTIVITY_STREAM_ARGUMENT_REPLY_VOTE, array(
          'nid' => $argument->parent_issue,
          'nid_arg' => $argument->nid,
          'cid' => $content_id,
          'vote' => $value,
        ));
      break;
    }
  }

  return votingapi_add_votes($vote);
}

/*
 * Fire rule event
 */
function yn_invoke_event($value, $content_id, $content_type) {
  if( module_exists('rules') ) {
    global $user;
    $author = _yn_content_author($content_id, $content_type);
    rules_invoke_event($value == VOTE_AGREE ? 'yn_voteup' : 'yn_votedn', $user, $author, $content_id, $content_type);
  }
}

/*
 * Basic vote deletion
 */
function yn_vote_delete( $content_id, $value, $content_type, $vote_source = '', $uid = '' ) {
  $criteria = array();
  if( !empty($content_id) ) {
    $criteria['content_id'] = $content_id;
  }
  if( !empty($value) ) {
    $criteria['value'] = $value;
  }
  if( !empty($content_type) ) {
    $criteria['content_type'] = $content_type;
  }
  if( !empty($vote_source) ) {
    $criteria['vote_source'] = $vote_source;
  }
  if( !empty($uid) ) {
    $criteria['uid'] = $uid;
  }
  _votingapi_delete('vote', $criteria);
}

/*
 * Basic agree function
 */
function yn_agree($content_id, $content_type, $vote_source = '', $uid = '') {
  return yn_vote($content_id, VOTE_AGREE, $content_type, $vote_source, $uid);
}

/*
 * Basic disagree function
 */
function yn_disagree($content_id, $content_type, $vote_source = '', $uid = '') {
  return yn_vote($content_id, VOTE_DISAGREE, $content_type, $vote_source, $uid);
}

/*
 * Agree node
 */
function yn_agree_node($content_id, $vote_source = '', $uid = '') {
  yn_agree($content_id, 'node', $vote_source, $uid);
}

/*
 * Disagree node
 */
function yn_disagree_node($content_id, $vote_source = '', $uid = '') {
  yn_disagree($content_id, 'node', $vote_source, $uid);
}

/*
 * Special constant to signal auto_added node votes
 */
define('VOTE_AUTOADD', 'auto');

/*
 * Special constant to signal regular Yes/No votes
 */
define('VOTE_NORMAL', 'yn');

/*
 * Agree comment
 */
function yn_agree_comment($content_id, $uid = '') {
  yn_agree($content_id, 'comment', '', $uid);
}

/*
 * Disagree comment
 */
function yn_disagree_comment($content_id, $uid = '') {
  yn_disagree($content_id, 'comment', '', $uid);
}

/*
 * Function to check if user already voted
 */
function yn_user_voted($content_id, $content_type, $uid = '') {
  if( empty($uid) ) {
    global $user;
    $uid = $user->uid;
  }
  $criteria = array(
    'content_id' => $content_id,
    'content_type' => $content_type,
    'uid' => $uid,
    'vote_source' => VOTE_NORMAL,
  );
  return 0 != _votingapi_count('vote', $criteria);
}

/*
 * Function to get the number of agree/disagree votes, and the sum count
 */
function yn_votes($content_id, $content_type) {
  $votes = array(0,0);
  $result = db_query("SELECT value, COUNT(*) AS votes FROM {votingapi_vote} WHERE content_id =  '%d' AND content_type = '%s' GROUP BY value", $content_id, $content_type);
  while( $row = db_fetch_array($result) ) {
    if( $row['value'] == VOTE_AGREE ) {
      $votes[0] = $row['votes'];
    }
    if( $row['value'] == VOTE_DISAGREE ) {
      $votes[1] = $row['votes'];
    }
  }
  $votes[] = $votes[0] - $votes[1];
  return $votes;
}

/*
 * Count user Yes/No votes
 */
function yn_user_vote_count($uid = '', $value = null) {
  if( empty($uid) ) {
    global $user;
    $uid = $user->uid;
  }
  $criteria = array('uid' => $uid, 'vote_source' => VOTE_NORMAL);
  if( !empty($value) ) {
    $criteria['value'] = $value;
  }
  return _votingapi_count('vote', $criteria);
}


/*
 * Internal helper function constructs SELECT COUNT(*) queries. Don't use unless you're me.
 */
function _votingapi_count($table = 'vote', $criteria = array()) {
  $query = "SELECT IFNULL(COUNT(*),0) FROM {votingapi_" . $table . "} v WHERE 1 = 1";
  $details = _votingapi_query('vote', $criteria);
  $query .= $details['query'];
  return db_result(db_query($query, $details['args']));
}

/*
 * Function to get the user object of content owner
 *
 * TODO - This one may be required in other close-to-action modules
 */
function _yn_content_author($content_id, $content_type) {
  $uid = 0;
  if( $content_type == 'node') {
    $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = '%d'", $content_id));
  } elseif( $content_type == 'comment' ) {
    $uid = db_result(db_query("SELECT uid FROM {comments} WHERE cid = '%d'", $content_id));
  }
  return user_load($uid);
}

/*
 * "yn" ajax callback
 *
 * @param content_id - Argument Node Id or Comment Id
 * @param content_type - 'node' or 'comment'
 * @param vote_value - VOTE_AGREE or
 */
function yn_ajax($content_id, $content_type, $vote_value) {
  if (empty($content_id) || empty($content_type) || !in_array($vote_value, array(VOTE_AGREE, VOTE_DISAGREE))) {
    drupal_json(array(
      'status' => false,
      'message' => t('Error occurred'),
    ));
    exit();
  }
  if (!user_is_logged_in()) {
    drupal_json(array(
      'status' => false,
      'message' => t('You need to log in to join this debate'),
    ));
    exit();
  }
  if (yn_user_voted($content_id, $content_type)) {
    drupal_json(array(
      'status' => false,
      'message' => t('You have already voted'),
    ));
    exit();
  }
  yn_vote( $content_id, $vote_value, $content_type );
  if( $content_type == 'comment' ) {
    $result = db_fetch_array(db_query("SELECT nid, str_wk FROM {comments} WHERE cid = '%d'", $content_id));
    $_vote_value = $vote_value;
    if( !$result ) {
      yn_invert_vote_value($_vote_value);
    }
    $parent_id = $result['nid'];
    yn_vote( $result['nid'], $_vote_value, 'node', VOTE_AUTOADD );
  } else {
    $parent_id = $content_id;
  }

  $output = array();
  $votes = yn_votes($content_id, $content_type);
  list($output['vote_up'],$output['vote_dn'], $output['vote_sum']) = $votes;
  if ($content_type == 'node') {
    list($output['pvote_up'], $output['pvote_dn'], $output['pvote_sum']) = $votes;
  } else {
    list($output['pvote_up'], $output['pvote_dn'], $output['pvote_sum']) = yn_votes($parent_id, 'node');
  }
  # update the parent
  $node = node_load($parent_id);
  $node->field_strength[0]['value'] = $output['pvote_sum'];
  node_save($node);

  $output['content_id'] = $content_id;
  $output['content_type'] = $content_type;
  $output['vote_value'] = $vote_value;
  $output['parent_id'] = $parent_id;

  $message = $vote_value == VOTE_AGREE ? 'Agreed!' : 'Disagreed!';
  drupal_json(array(
    'status' => true,
    'message' => t($message),
    'data' => $output,
  ));
  exit();
}


/*
 * Implementation of hook_theme()
 */
function yn_theme() {
  $theme = array();

  $theme['yn'] = array(
    'arguments' => array(
      'node'    => null,
    ),
  );

  return $theme;
}

/*
 * "yn" theme
 */
function theme_yn($node) {
  if ($node->owner) {
    $title1 = t('You are not able to rate your own post!');
    $title2 = $title1;
  } elseif ($node->rated) {
    $title1 = t('You have rated this!');
    $title2 = $title1;
  } else {
    $title1 = t('Agree this!');
    $title2 = t('Disagree this!');
    $notrated = true;
  }
  return '
    <span class="comment-agree" id="yn-'.$node->content_type.'-'.$node->content_id.'">
      <strong>'.t('Do you agree').($node->content_type=='comment'?'':' '.t('with the argument')).'?</strong>
      <a href="javascript:void(0);" class="yn agree '.($notrated?' yn-a':'').' yn-a-'.$node->content_id.'" title="'.$title1.'" name="'.$node->content_id.'/'.$node->content_type.'/'.VOTE_AGREE.'">'.t('Yes').'<span'.($notrated?'':' class="notvoted"').'>('.$node->vote_up.')</span></a>&nbsp;|
      <a href="javascript:void(0);" class="yn disagree '.($notrated?' yn-d':'').' yn-d-'.$node->content_id.'" title="'.$title2.'" name="'.$node->content_id.'/'.$node->content_type.'/'.VOTE_DISAGREE.'">'.t('No').'<span'.($notrated?'':' class="notvoted"').'>('.$node->vote_dn.')</span></a>
      <strong class="motivat">'.t('(Click yes/no to leave support/oppose comment.)').'</strong>
    </span>';
}