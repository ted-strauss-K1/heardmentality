<?php


/*
 * Implementaton of hook_init()
 */
function user_profile_init() {
  drupal_add_js(drupal_get_path('module', 'user_profile') . '/user_profile.js');
  if (user_is_logged_in()) {
    global $user;
    profile_load_profile($user);
    $private_fields = profile_privacy_get_user_privacy($user->uid);
    foreach ($private_fields as $field_name => $private) {
      $user->{'private_'. $field_name} = $private;
    }
  }
}


/*
 * Define permission to edit profile
 */
define('USER_PROFILE_EDIT', 'Edit User Profile');

/*
 * Define permission to view profile
 */
define('USER_PROFILE_VIEW', 'View User Profile');

/*
 * Define permission to update profile
 */
define('USER_PROFILE_UPDATE', 'Update User Profile');

/*
 * Define permission to update profile provacy settings
 */
define('USER_PROFILE_PRIVACY', 'Update User Profile Privacy Settings');

/*
 * Implementation of hook_perm()
 */
function user_profile_perm() {
  return array(USER_PROFILE_EDIT, USER_PROFILE_UPDATE, USER_PROFILE_VIEW, USER_PROFILE_PRIVACY);
}

/*
 * Implementation of hook_user()
 */
function user_profile_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete' :
      //
    break;
    case 'load' :
      $account->viewlink = 'user/profile/view/' . $account->name;

//      $user_profile = db_fetch_array(db_query("SELECT * FROM {user_profile} WHERE uid = '%d'", $account->uid));
//      $account = (object)array_merge((array)$account, $user_profile);
    break;
    case 'insert' :
      $account->picture = file_directory_path() . '/' . avatar_selection_get_random_image($account);
      db_query();


      user_save($account);
      break;
  }
//  var_dump($account);
}

/*
 * Implementation of hook_menu()
 */
function user_profile_menu() {
  $menu = array();

  $menu['user/profile/view'] = array(
    'title'             => t('Profile'),
    'page callback'     => 'theme',
    'page arguments'    => array('user_profile_view'),
    'access callback'   => 'user_profile_access_user_profile',
    'access arguments'  => array(USER_PROFILE_VIEW),
    'type'              => MENU_CALLBACK,
  );
  $menu['user/profile/location/%/%'] = array(
    'page callback'     => 'user_profile_location',
    'page arguments'    => array(3,4),
    'access arguments'  => array(USER_PROFILE_VIEW),
    'type'              => MENU_CALLBACK,
  );
  $menu['user/profile/edit'] = array(
    'title'             => t('Update Profile'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('user_profile_edit_form'),
    'access arguments'  => array(USER_PROFILE_EDIT),
    'file'              => 'user_profile.pages.inc',
    'type'              => MENU_CALLBACK,
  );
  $menu['user/profile/follow/%/%'] = array(
    'title callback'    => 'user_profile_follow_title',
    'title arguments'   => array(4),
    'page callback'     => 'theme',
    'page arguments'    => array('user_profile_follow', 3, 4),
    'access callback'   => 'user_profile_access_user_profile',
    'access arguments'  => array(USER_PROFILE_VIEW),
    'type'              => MENU_CALLBACK,
  );
//  $menu['user/profile/follow/followers'] = array(
//    'title'             => t('Followers'),
//    'page callback'     => 'theme',
//    'page arguments'    => array('user_profile_follow', 3, 4),
//    'access arguments'  => array(USER_PROFILE_VIEW),
//    'type'              => MENU_CALLBACK,
//  );
//
//  $menu['user/profile/x'] = array(
//    'title'             => t('Followers'),
//    'page callback'     => 'theme',
//    'page arguments'    => array('user_profile_follow', 3, 4),
//    'access arguments'  => array(USER_PROFILE_VIEW),
//    'type'              => MENU_CALLBACK,
//  );

  return $menu;
}


/*
 *
 */
function user_profile_access_user_profile($user_access) {
  $string = arg(3);
  if (empty($string) && !user_is_logged_in()) {
    return false;
  } else {
    $user = _user_profile_get_user($string);
    if ($user === false) {
      if (arg(0) == 'user' && arg(1) == 'profile') {
        drupal_not_found();
      }
      return false;
    } else {
      return user_access($user_access);
    }
  }
}

/*
 * user_profile_location
 */
function user_profile_location($countrycode, $zip) {
  $output = user_profile_geocode($countrycode, $zip);
  if (empty($output)) {
    drupal_json(array(
      'status' => false,
      'message' => '',
    ));
  } else {
    drupal_json(array(
      'status' => true,
      'message' => user_profile_location_format($output['city'], $output['state'], $output['country']),
    ));
  }
  exit;
}

/*
 * user_profile_location_format
 */
function user_profile_location_format($city, $state, $country) {
  $location = $city;
  if ($state) {
    $location .= ($location ? ', ' : '') . $state;
  }
  $country = geonames_countryinfo($country);
  if ($country) {
    $location .= ($location ? ', ' : '') . t($country['name']);
  }
  return $location;
}

/*
 * Implementation of hook_theme()
 */
function user_profile_theme() {
  $theme = array();

  $theme['user_profile_view'] = array(
    'arguments' => array(),
    'template' => 'user-profile-view',
    'preprocess functions' => array('user_profile_view_preprocess'),
  );
  $theme['user_profile_heatmap'] = array(
    'arguments' => array(),
    'template' => 'user-profile-heatmap',
    'preprocess functions' => array('user_profile_heatmap_preprocess'),
  );
  $theme['user_profile_info'] = array(
    'arguments' => array(
      'user' => NULL,
    ),
    'template' => 'user-profile-info',
    'preprocess functions' => array('user_profile_info_preprocess'),
  );
  $theme['user_profile_avatar_selection'] = array(
    'arguments' => array(
      'user' => NULL,
    ),
  );
  $theme['user_profile_popup'] = array(
    'arguments' => array(
      'user' => NULL,
    ),
    'template' => 'user-profile-popup',
    'preprocess functions' => array('user_profile_block_preprocess'),
  );
  $theme['user_profile_right'] = array(
    'arguments' => array(
      'user' => NULL,
    ),
    'template' => 'user-profile-right',
    'preprocess functions' => array('user_profile_block_preprocess'),
  );
  $theme['user_profile_bottom'] = array(
    'arguments' => array(
      'user' => NULL,
    ),
    'template' => 'user-profile-bottom',
    'preprocess functions' => array('user_profile_block_preprocess'),
  );
  $theme['user_profile_follow'] = array(
    'arguments' => array(
      'uid' => NULL,
      'code' => NULL,
    ),
    'template' => 'user-profile-follow',
    'preprocess functions' => array('user_profile_follow_preprocess'),
  );
  $theme['user_profile_edit_form'] = array(
    'arguments' => array('form' => NULL),
    'template' => 'user-profile-edit-form',
  );

  return $theme;
}

/*
 *
 */
function user_profile_follow_title($code) {
  return $code == 'following' ? t('Following Users') : t('Followers');
}

/*
 *
 */
function user_profile_follow_preprocess(&$vars) {
//  var_dump($vars); die();

  switch ($vars['code']) {
    case 'following' :
      $vars['users'] = follower_get_following($vars['uid']);
    break;
    case 'followers' :
      $vars['users'] = follower_get_followers($vars['uid']);
    break;
  }
  $vars['followers_count'] = follower_get_followers($vars['uid'], true);
  $vars['following_count'] = follower_get_following($vars['uid'], true);
}

/*
 *
 */
function user_profile_block_preprocess(&$vars) {
  static $preprocessed = array();
  if (!user_is_logged_in()) {
    $vars['denied'] = true;
    return;
  }
  if (empty($preprocessed)) {
    global $user;
    $preprocessed['user'] = $user;
    $preprocessed['complete'] = pcp_get_complete_percentage_data($user);
    $preprocessed['badges'] = badges_get_userbadges($user->uid);
    $preprocessed['rank'] = $user->rank['name'];
    $preprocessed['points'] = up_userpoints_get($user->uid);
  }
  foreach ($preprocessed as $key => $value) {
    $vars[$key] = $preprocessed[$key];
  }
}

/*
 * Theme user_profile_avatar_selection
 */
function theme_user_profile_avatar_selection($user) {
  drupal_add_css(drupal_get_path('module', 'user_profile') . '/user_profile.css');
  $output = '<div id="user_profile_avatar_selection"><p>'.t('Pick a profile photo').'</p>';
  $avatars = _avatar_selection_image_list($user);
  foreach ($avatars['avatars'] as $avatar) {
    $output .= $avatar;
  }
  $output .= '</div>';
  return $output;
}

/*
 * Implementation of hook_block()
 */
function user_profile_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['user-profile-info'] = array(
        'info' => t('User Profile Info'),
      );
      $blocks['user-profile-heatmap'] = array(
        'info' => t('Heatmap'),
      );

      $blocks['user-profile-popup'] = array(
        'info' => t('User Profile Complete Percent (Popup)'),
      );
      $blocks['user-profile-bottom'] = array(
        'info' => t('User Profile Complete Percent (Bottom)'),
      );
      $blocks['user-profile-right'] = array(
        'info' => t('User Profile Complete Percent (Right)'),
      );

      $blocks['user-profile-login'] = array(
        'info' => t('User Profile Login Link'),
      );
    return $blocks;

    case 'view':
      switch ($delta) {
        case 'user-profile-info':
          $block['subject'] = t('');//t("User Profile Info");
          $block['content'] = theme('user_profile_info', null);
        break;
        case 'user-profile-heatmap':
          $block['subject'] = t("THE HERD");
          $block['content'] = theme('user_profile_heatmap');
        break;
        case 'user-profile-popup' :
          $block['subject'] = t('');
          $block['content'] = theme('user_profile_popup');
        break;
        case 'user-profile-bottom' :
          $block['subject'] = t('');
          $block['content'] = theme('user_profile_bottom');
        break;
        case 'user-profile-right' :
          $block['subject'] = t('');
          $block['content'] = theme('user_profile_right');
        break;
        case 'user-profile-login' :
          $block['subject'] = t('');
          $block['content'] = '<p><a href="javascript:void(0)" > ';
        break;




      }
    return $block;
  }
}

/*
 * Theme user_profile_view preprocess function
 */
function user_profile_view_preprocess(&$vars) {
  $vars['account'] = _user_profile_get_user(arg(3));
  $vars['rank'] = $vars['account']->rank['name'];
}

/*
 * Get loginbox class
 */
function user_profile_login_class($force = false) {
  return !$force && user_is_logged_in() ? '' : 'openlogin_box';
}

/*
 * Theme user_profile_heatmap preprocess function
 */
function user_profile_heatmap_preprocess(&$vars) {
  drupal_add_js(drupal_get_path('module', 'user_profile') . '/user_profile_heatmap.js');

  $columns = array();
  $item = new stdClass();
  $item->type = 'string';
  $item->name = 'Country';
  $columns[] = $item;

  $cases = array();
  $cases['users'] = array(
    'name' => t('Users'),
    'result' => db_query("SELECT gc.name AS country, COUNT(*) AS count FROM {profile_fields} pf INNER JOIN {profile_values} pv ON pv.fid = pf.fid INNER JOIN {geonames_countryinfo} gc ON gc.iso_alpha2 = pv.value WHERE pf.name = 'profile_country' GROUP BY gc.iso_alpha2"),
  );

  $cases['nodes'] = array(
    'name' => t('Issues'),
//    'result' => db_query("SELECT gc.name AS country, COUNT(*) AS count FROM {content_field_issue_country} cfic INNER JOIN {node} n ON n.nid = cfic.nid AND n.type = '%s' INNER JOIN {geonames_countryinfo} gc ON gc.name = cfic.field_issue_country_value GROUP BY gc.iso_alpha2", 'poll'),
    'result' => db_query("SELECT cfic.field_issue_country_value AS country, COUNT(*) AS count FROM {content_field_issue_country} cfic WHERE cfic.field_issue_country_value IS NOT NULL GROUP BY cfic.field_issue_country_value"),
  );

  $cases['online'] = array(
    'name' => t('Online'),
    'result' => db_query("SELECT gc.name AS country, COUNT(*) AS count FROM {profile_fields} pf INNER JOIN {profile_values} pv ON pv.fid = pf.fid INNER JOIN {users} u ON u.uid = pv.uid AND u.access >= '%d' INNER JOIN {geonames_countryinfo} gc ON gc.iso_alpha2 = pv.value WHERE pf.name = 'profile_country' GROUP BY gc.iso_alpha2", time() - variable_get('user_block_seconds_online', 900)),
  );

  $cases['votes'] = array(
    'name' => t('Votes'),
//    'result' => db_query("SELECT gc.name AS country, COUNT(*) AS count FROM {poll_votes} AS pv INNER JOIN {content_field_issue_country} cfic ON cfic.nid = pv.nid INNER JOIN {geonames_countryinfo} gc ON gc.name = cfic.field_issue_country_value GROUP BY gc.iso_alpha2"),
    'result' => db_query("SELECT cfic.field_issue_country_value AS country, COUNT(*) AS count FROM {poll_votes} AS pv INNER JOIN {content_field_issue_country} cfic ON cfic.nid = pv.nid WHERE cfic.field_issue_country_value IS NOT NULL GROUP BY cfic.field_issue_country_value"),
  );

  foreach ($cases as $key => $case) {
    $vars['count_'.$key] = 0;
    $cols = $columns;
    $item = new stdClass();
    $item->type = 'number';
    $item->name = $case['name'];
    $cols[] = $item;
    $data = array();
    while ($row = db_fetch_array($case['result'])) {
      $data[] = array($row['country'], (int)$row['count']);
      $vars['count_'.$key] += (int)$row['count'];
    }
    drupal_add_js(array('heatmap' => array($key => array(
      'columns' => $cols,
      'dataset' => $data,
    ))), 'setting');
  }

  drupal_add_js(array('heatmap' => array('current' => 'users')), 'setting');
}

/*
 * Theme user_profile_info preprocess function
 */
function user_profile_info_preprocess(&$vars) {
  if (!isset($vars['account'])) {
    $vars['account'] = _user_profile_get_user(arg(3));
    if ($vars['account'] === false) {
      $vars['denied'] = true;
      return;
    }
  }
  $uid = $vars['account']->uid;

  $vars['badges'] = badges_get_userbadges($uid);
  $vars['comments'] = db_result(db_query("SELECT COUNT(DISTINCT(nid)) FROM {comments} WHERE uid = '%d'", $uid));
  $vars['votes'] = issue_get_uservotes($uid) + poll_suggest_get_uservotes($uid);
  $vars['references'] = (int)db_result(db_query("SELECT COUNT(*) FROM {content_type_forum} AS ctf LEFT JOIN {node} AS n ON ctf.nid = n.nid WHERE n.uid = '%d' AND ctf.field_type_value = '%d' AND n.status = '%d'", $uid, TYPE_RESOURCE, 1));

  $vars['followers_count'] = follower_get_followers($uid, true);
  $vars['followers'] = follower_get_followers($uid, false, 8);
  $vars['following_count'] = follower_get_following($uid, true);
  $vars['following'] = follower_get_following($uid, false, 8);
}

/*
 * Get user by string
 */
function _user_profile_get_user($string) {
  if (empty($string)) {
    if (user_is_logged_in()) {
      global $user;
      return $user;
    } else {
      return false;
    }
  } elseif (!is_numeric($string)) {
    $string = strtolower($string);
    return user_load(array('name' => $string));
  } else {
    return user_load(array('uid' => $string));
  }
}

/*
 * Moderation Rights
 */
function user_profile_moderator($uid = '') {
  global $user;
  return is_array($user->roles) && in_array('administrator', $user->roles);
}

/*
 * Get user profile image
 */
function user_profile_image($user, $presetname = false) {
  static $imgs = array();
  if (!isset($imgs[$user->uid][$presetname])) {
    if ($presetname === false || !imagecache_generate_image($presetname, $user->picture)) {
      $img = $user->picture;
    } else {
      $img = imagecache_create_path($presetname, $user->picture);
    }
    if (strpos($img, 'http://') !== 0) {
      global $base_url;
      $img = $base_url . '/' . $img;
    }
    $imgs[$user->uid][$presetname] = $img;
  }
  return $imgs[$user->uid][$presetname];
}

/*
 * Implementation of hook_profile_privacy_access_info()
 */
function user_profile_profile_privacy_access_info() {
  return array(
    'authorized' => array(
      'label' => t('Logged In'),
      'description' => t('All logged in users can see this piece of information about you'),
      'access callback' => 'user_is_logged_in',
    ),
    'followers' => array(
      'label' => t('Followers'),
      'description' => t('Only followers can see this piece of information about you'),
      'access callback' => 'user_profile_privacy_follower_access_callback',
    ),
  );
}

/*
 * Define privacy prefix
 */
define('USER_PROFILE_PRIVACY_PREFIX', 'private_');

/*
 * Profile privacy values
 */
function user_profile_profile_privacy_values() {
  static $values = null;
  if (is_null($values)) {
    $values = module_invoke_all('profile_privacy_access_info');
  }
  return $values;
}

function user_profile_privacy_follower_access_callback($account, $field) {
  static $list = array();
  if (!isset($list[$account->uid])) {
    if (module_exists('follower')) {
      $list[$account->uid] = false !== follower_status($account->uid);
    } else {
      $list[$account->uid] = false;
    }
  }
  return $list[$account->uid];
}

/*
 * Geocoding
 */
function user_profile_geocode($countrycode, $zip) {
  $output = array();
  global $user;
  $query = array('postalcode' => $zip, 'country' => $countrycode, 'maxrows' => 1, 'lang' => $user->language);
  $result = geonames_query('postalcodesearch', $query);
  if (isset($result->results[0])) {
    $result = $result->results[0];
    $output += array(
      'city' => preg_replace('/\s\d+$/', '', $result['name']),
      'state' => $result['adminname1'],
      'zip' => $result['postalcode'],
      'lat' => $result['lat'],
      'lng' => $result['lng'],
      'lng' => $result['lng'],
      'country' => $result['countrycode'],
    );
  }

  return $output;
}