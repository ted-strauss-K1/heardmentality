<?php
/**
 * Voting Functionality
 */
require_once "includes/issue.vote.inc";

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function issue_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  if ($node->type == 'poll') {
    switch ($op) {
      case 'delete' :
        foreach ($node->field_arguments as $arg) {
          node_delete($arg['nid']);
        }
        break;
      case 'load' :

        break;
      case 'view' :
        # js
        drupal_add_js(array('poll' => array($node->nid => $node->choice)), 'setting');


        break;
      case 'insert' :
      case 'update' :
        db_query("UPDATE {url_alias} SET language = '' WHERE src = '%s'", 'node/' . $node->nid);
      break;
    }
  }

  $node->content_id = $node->nid;
  $node->content_type = 'node';

  if (function_exists('argument_nodeapi')) {
    argument_nodeapi($node, $op, $a3, $a4);
  }
}







/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function issue_preprocess_page(&$vars)
{
  // todo - refactor - delete
  # create
  if (arg(0) == 'issue' && arg(1) == 'create') {
    drupal_add_js('misc/ahah.js');
    drupal_add_js(drupal_get_path('module', 'issue') . '/js/issue.create.js');

    # right block
    $vars['right'] = theme('issue_guidelines');
  }










  if (module_exists('rules')) {
    global $user;
    rules_invoke_event('page_view', $user);
  }

  //

}


/**
 * Implementation of hook_preprocess_node()
 *
 * @param $vars
 */
function issue_preprocess_node(&$vars)
{
  $node = & $vars['node'];

  # page title for poll pages
  if ('poll' == $node->type) {
    drupal_set_subtitle(t('Issue'));

    # view
    drupal_add_js(drupal_get_path('module', 'issue') . '/js/issue.vote.js');
    drupal_add_js(drupal_get_path('module', 'issue') . '/js/issue.view.js');
    drupal_add_css(drupal_get_path('module', 'issue') . '/css/issue.view.css');
    module_load_include('inc', 'issue', 'includes/issue.view');
  }
}




/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function issue_menu()
{
  $menu = array();

  if (module_exists('subscriptions')) {
    $menu['issue/subscribe'] = array(
      'page callback' => 'issue_subscribe',
      'access arguments' => array('subscribe to all content types'),
      'type' => MENU_CALLBACK,
      'file' => 'issue.pages.inc',
    );
  }

  if (function_exists('charts_menu')) {
    $menu += charts_menu();
  }

  $menu['issue/share/%'] = array(
    'page callback' => 'issue_share',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'issue.pages.inc',
  );

  return $menu;
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function issue_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'poll_node_form') {
    $form['title']['#maxlength'] = 256;
  }
}




require_once "issue.theme.inc";

require_once "argument.forms.inc";
require_once "argument.inc";
require_once "issue.charts.inc";









/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function issue_theme()
{
  $theme = array();

  // TODO rename


  //
  $theme['issue_category'] = array(
    'arguments' => array(
      'name' => NULL,
      'hierarchy' => '',
    ),
    'file' => 'issue.theme.inc',
  );

  // blocks
  $theme['issue_block_categories'] = array(
    'arguments' => array('nid' => NULL),
    'template' => 'templates/issue-block-categories',
    'preprocess functions' => array('issue_block_categories_preprocess'),
    'file' => 'issue.theme.inc',
  );
  $theme['issue_block_categories_popular'] = array(
    'arguments' => array(),
    'template' => 'templates/issue-block-categories-popular',
    'preprocess functions' => array('issue_block_categories_popular_preprocess'),
    'file' => 'issue.theme.inc',
  );
  $theme['issue_block_categories_user'] = array(
    'arguments' => array(),
    'template' => 'templates/issue-block-categories-user',
    'preprocess functions' => array('issue_block_categories_user_preprocess'),
    'file' => 'issue.theme.inc',
  );


  return $theme + charts_theme();
}

/**
 * Implementation of hook_block()
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return mixed
 */
function issue_block($op = 'list', $delta = 0, $edit = array())
{
  switch ($op) {
    case 'list' :
      $blocks = array();

      $blocks['issue-categories'] = array(
        'info' => t('Active Categories'),
      );
      $blocks['issue-categories-popular'] = array(
        'info' => t('Popular Categories'),
      );

      return $blocks;
    case 'view' :
      $block = array();

      switch ($delta) {
        case 'issue-categories' :
          $block['subject'] = t('');
          $block['content'] = theme('issue_block_categories');
          break;
        case 'issue-categories-popular' :
          $block['subject'] = t('');
          $block['content'] = theme('issue_block_categories_popular');
          break;
      }

      return $block;
  }
}





/**
 * @param $uid
 * @return int
 */
function issue_get_uservotes($uid)
{
  static $votes;

  if (is_null($votes)) {
    $votes = array();
    $result = db_query("SELECT uid, COUNT(*) count FROM {poll_votes} GROUP BY uid");
    while ($row = db_fetch_object($result)) {
      $votes[$row->uid] = $row->count;
    }
  }

  return (int)$votes[$uid];
}

/**
 * @param bool $nid
 * @return array
 *  'nid' - node id
 *    'r' -- regular votes
 *      pairs: uid >> vote value
 *    's' -- suggested votes
 *      pairs: uid >> vote value
 *    'u' -- list of users voted
 *      hash: uid >> vote data
 */
function issue_get_vote_status($nid = FALSE)
{
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $query = "
    (SELECT nid, uid, chorder cid, 'r' type FROM poll_votes)
      UNION
    (SELECT ps.nid, psv.uid, psv.chid cid, 's' type FROM poll_suggest_votes psv, poll_suggest ps WHERE psv.chid = ps.chid)";
    $result = db_query($query);
    while ($row = db_fetch_array($result)) {
      $cache[$row['nid']][$row['type']][$row['uid']] = $row['cid'];
      $cache[$row['nid']]['u'][$row['uid']] = $row;
    }

    // todo maybe we could store the cache to db

  }

  return $nid === FALSE ? $cache : $cache[$nid];
}

