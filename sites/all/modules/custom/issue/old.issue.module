<?php

/*
* Implementation of hook_theme()
*/
function _issue_theme()
{
  $theme = array();


  $theme['issue_debate_area'] = array(
    'template' => 'issue-debate-area',
    'arguments' => array(
      'arguments_form' => NULL,
      'debate_count' => 0,
      'resource_count' => 0,
      'choices' => array(),
      'nid' => 0,
    ),
  );

  $theme['issue_popular_categories'] = array(
    'arguments' => array(),
    'file' => 'issue.theme.inc',
  );

  $theme += __issue_theme();

  return $theme;
}

// TODO - remove what is below

function __issue_theme()
{
  return array(

    'issue_information' => array(
      'template' => 'issue-real-informations',
      'arguments' => array('nid' => NULL, 'created' => NULL, 'postedby' => NULL, 'subject' => NULL, 'area' => NULL, 'detail' => NULL, 'original_nid' => NULL, 'original_language' => NULL, 'orgLangKey' => NULL),
    ),
  );
}





function issue_block($op = 'list', $delta = 0, $edit = array())
{

  switch ($op) {
    case 'list':
      $blocks['issue-popular-categories'] = array(
        'info' => t('Issue Popular Categories'),
      );
      $blocks[0] = array(
        'info' => t('Node block'),
      );
      $blocks[1] = array(
        'info' => t('Details Tab'),
      );
      $blocks[2] = array(
        'info' => t('Issue Real Info'),
      );
      $blocks[3] = array(
        'info' => t('Issue Search Form'),
      );
      $blocks[4] = array(
        'info' => t('Issue Filter Options'),
      );

      return $blocks;

    case 'view':
      switch ($delta) {
        case 'issue-popular-categories' :
          $block['subject'] = t('');
          $block['content'] = theme('issue_popular_categories');
          break;


        case '0':
          if (arg(0) == 'node' && is_numeric($nid = arg(1))) {
            $node = node_load($nid);
            if (!empty($node) && $node->type == 'poll') {
              $block['content'] = theme('issue_content_bottom', $node);
            }
          }
          break;
        case '2':
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);
          }
//          $nid = $nid != '' ? $nid : get_qid();
          $block['subject'] = "Issue Details with Category & Location";
          $item = _issue_information($nid);
          if ($item) {
            $subject = $item['subject'];
            $area = $item['area'];
            $detail = $item['detail'];
            $postedby = $item['postedby'];
            $created = $item['created'];
            $original_nid = $item['original_nid'];
            $original_language = $item['original_language'];
            $orgLangKey = $item['orgLangKey'];

            $block['content'] = theme('issue_information', $nid, $created, $postedby, $subject, $area, $detail, $original_nid, $original_language, $orgLangKey);
          }
          break;
        case '3':
          $block['subject'] = 'Issue Search Form';
          $block['content'] = drupal_get_form('issue_search_form');
          break;
        case '4':
          $block['subject'] = 'Issue Filter Options';
          $block['content'] = issue_filter_options();
          break;
      }
      return $block;
  }
}





function get_node_tree_child($tid, $nid)
{
  $childrenArray = taxonomy_get_children($tid);
  $children = array();
  $subcats = array();
  foreach ($childrenArray as $key => $value) {
    $children[] = $key;
  }
  if (!empty($children)) {
    $scats = implode(",", $children);
    $nscats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($scats)");
    while ($nscat = db_fetch_object($nscats)) {
      $subcats[] = $nscat->tid;
    }
  }
  return $subcats;
}

function issue_link($type, $object, $teaser = FALSE)
{

  $nid = $object->nid;
  $tnid = get_tnid($nid);
  $lang = db_result(db_query("SELECT language FROM {node} WHERE nid = '%d' AND tnid = '%d'", $tnid, $tnid));
  $languages = language_list();
  foreach ($languages as $langcode => $language) {
    if ($langcode == $lang) {
      $nodeLanguage = $language;
    }
  }
  // echo '<pre>'; print_r($languages);exit;
  $links['issue_original'] = array(
    'title' => t('View Originally Posted Issue'),
    'href' => 'node/' . $tnid,
    'language' => $nodeLanguage,
    'attributes' => array('class' => 'node-issue-org'),
  );
  return $links;
}

/* * ********* LANGUAGE TRANSLATION *********** */

// get paraent translate id
function get_tnid($nid = '')
{
  $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
  $tnid = $res != 0 ? $res : $nid;
  return $tnid;
}

// get translated content for debates
// get translated debate replies/ and resource replies


////
function _issue_information($nid = '')
{
  $node = node_load($nid);
  $tnid = get_tnid($node->nid);
  $users = user_load($node->uid);
  // category lists
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[$cat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[$scat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[$sscat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }

  // find originally posted language
  $trans = node_load($tnid);
  $orgLangKey = $trans->language;
  $languages = language_list();
  $orgLanguage = $languages[$orgLangKey]->name;
  $path = drupal_get_path_alias('node/' . $tnid);

  $values['subject'] = $ctitle;
  $values['area'] = $sctitle;
  $values['detail'] = $ssctitle;
  $values['postedby'] = $users->name;
  $values['created'] = format_date($node->created, "custom", "M j Y");
  $values['original_nid'] = $tnid;
  $values['orgLangKey'] = $orgLangKey;
  $values['original_language'] = $orgLanguage;
  return $values;
}

// issue information theme
function theme_issue_information($nid = '', $created = '', $postedby = '', $ctitle = array(), $sctitle = array(), $ssctitle = array(), $original_nid = '', $original_language = '', $orgLangKey = '')
{
  global $base_url;
  $info = '';
  $info .= '<div id="issue_information">';
  // created details
  $info .= '<div class="post-by">' . t('Issue posted on ') . $created . '&nbsp;'
    . t('By') . '&nbsp;' . l($postedby, 'user/profile/view/' . $postedby) . '</div>';
  //category details
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">SUBJECT</div>';
  if (!empty($ctitle)) {
    foreach ($ctitle as $tid => $subject) {
      $info .= l($subject, 'issues/0/' . $tid . '/0/0/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No subjects found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">AREA</div>';
  if (!empty($sctitle)) {
    foreach ($sctitle as $tid => $area) {
      $parent = taxonomy_get_parents($tid);
      $cid = array_keys($parent);
      $info .= l($area, 'issues/0/' . $cid[0] . '/' . $tid . '/0/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No areas found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">DETAIL</div>';
  if (!empty($ssctitle)) {
    foreach ($ssctitle as $tid => $detail) {
      $sparent = taxonomy_get_parents($tid);
      $ssid = array_keys($sparent);
      $ssparent = taxonomy_get_parents($ssid[0]);
      $cid = array_keys($ssparent);
      $info .= l($detail, 'issues/0/' . $cid[0] . '/' . $ssid[0] . '/' . $tid . '/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No details found') . '<br />';
  }
  $info .= '</div>';
  // original language
  $path = drupal_get_path_alias('node/' . $original_nid);
  $info .= '<br />' . t('Issue originally written in') . '&nbsp;' . $original_language . '<br />'
    . l('Click to view in original language', $base_url . '/' . $orgLangKey . '/' . $path);
  $info .= '</div>';
  return $info;
}


// issue filter options
function issue_filter_options()
{
  $key = arg(1) != '' ? arg(1) : '0';
  $subject = arg(2) != '' ? arg(2) : '0';
  $area = arg(3) != '' ? arg(3) : '0';
  $detail = arg(4) != '' ? arg(4) : '0';
  $country = arg(5) != '' ? arg(5) : '0';
  $state = arg(6) != '' ? arg(6) : '0';
  $city = arg(7) != '' ? arg(7) : '0';
  $method = arg(8) != '' ? arg(8) : '0';

  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';

  if ($method == 'alltime') {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  } elseif ($method == '7days') {
    $actall = '';
    $act7 = 'class="active"';
    $actviews = '';
  } elseif ($method == 'views') {
    $actall = '';
    $act7 = '';
    $actviews = 'class="active"';
  } else {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }


  $key_path = $sitelink . 'issues/' . $key . '/' . $subject . '/' . $area . '/' . $detail . '/' . $country . '/' . $state . '/' . $city;
  $issue_filter = '<div class="sort-by">' . t('View') . ' &nbsp;
                <a href="' . $key_path . '/alltime" ' . $actall . '>' . t('Most Votes (all-time)') . '</a>&nbsp;|&nbsp;'
    . '<a href="' . $key_path . '/7days" ' . $act7 . '>' . t('Most Votes (past 7 days)') . '</a>&nbsp;|&nbsp;'
    . '<a href="' . $key_path . '/views" ' . $actviews . '>' . t('Number of Views') . '</a></div>';
  return $issue_filter;
}
