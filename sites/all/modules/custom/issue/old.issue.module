<?php


/**
 * Content type: poll
 *
 * @note
 *  We're not using the drupal's node hooks there
 *  b/c node type is cck-exported and not created within this module
 *
 * TODO get_tnid() -- remove
 * TODO issue_suggest_form - refactor
 *
 */


/*
 * Implementation of hook_init()
 */
function _issue_init()
{
  // Hardcode the administration theme onto the blocks page

  // TODO -- refactor
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/filter.js');

  if (module_exists('jquery_ui')) {
    jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));
  }
}


/*
 * Load the issue
 *
 * @see issue_nodeapi()
 */
function _issue_load(&$node)
{
  global $user;
  $node->uservoted = false != db_result(db_query("SELECT * FROM {poll_votes} WHERE nid = '%d' AND uid = '%d'", $node->nid, $user->uid));
  $node->votes = issue_get_votes($node->nid);
}

/*
 * View the issue
 *
 * @see issue_nodeapi()
 */
function _issue_view(&$node)
{
  global $user, $base_url;
  # add js


  # TODO -- refactor javascript
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/add_new_form.js');
  drupal_add_js(drupal_get_path('module', 'debate') . '/scripts/debate.js');
  drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/subtab.js');
  drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');


  # make changes in node
//  $node->context = $node->body;

  # replace the content with the special voting form
//  $tnode = issue_get_translated_node($node->nid);
//  TODO
//  $node->content['body'] = array(
//    '#value' => drupal_get_form('issue_vote_form', $node),
//  );
  /*
  $node->allowvotes = $tnode->allowvotes;
  // selected radio button stays green
  if ($node->allowvotes == '' && arg(0)) {
    $radCss = 'jQuery(document).ready(function(){
                                jQuery("input[name=choice]:checked").parents("div.form-item").addClass("staygreen");
                                });';
    drupal_add_js($radCss, 'inline');
  }
  // selected radio button stays green
  // only for search issues
  //if (arg(0) == 'issues') {
  //votes
  $tnid = get_tnid($node->nid);
  $tnode = node_load($tnid);
  $node->tnid = $tnid;
  $voteCount = db_result(db_query("SELECT count(nid) as qcount FROM `poll_votes` where nid='" . $tnid . "'"));
  //debates

  $dr = arguments_get_list($tnid);
  $node->votecount = $voteCount;
  $node->totaldebates = $dr['#count'][TYPE_DEBATE];
  $node->totalresources = $dr['#count'][TYPE_RESOURCE];

  // categories
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }
  $node->catsubject = !empty($ctitle) ? rtrim(implode(",", $ctitle)) : 'none';
  $node->catarea = !empty($sctitle) ? rtrim(implode(",", $sctitle)) : 'none';
  $node->catdetail = !empty($ssctitle) ? rtrim(implode(",", $ssctitle)) : 'none';
  */
}

function issue_get_taxonomy_root($ptid = 0)
{
  static $terms = null;
  if (is_null($terms)) {
    $result = db_query("SELECT td.tid, td.name FROM {term_data} td INNER JOIN {vocabulary} v ON v.vid = td.vid RIGHT JOIN {term_hierarchy} th ON td.tid = th.tid WHERE th.parent = '%d' AND v.name = '%s' AND module = '%s'", $ptid, 'Sections', 'taxonomy');
    while ($row = db_fetch_array($result)) {
      $terms[$row['tid']] = $row['name'];
    }
  }
  return $terms;
}

/*
 * Get translated node
 */
function issue_get_translated_node($nid, $node = true)
{
  static $tnids = array();
  if (!isset($tnids[$nid])) {
    $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
    $tnids[$nid] = $res != 0 ? $res : $nid;
  }
  return $node ? node_load($tnids[$nid]) : $tnids[$nid];
}

/*
 * Get vote count
 */
function issue_get_votes($nid)
{
  static $votes = array();
  if (!isset($votes[$nid])) {
    $vote = array();
    $vote['#all'] = 0;
    $result = db_query("SELECT chorder, IFNULL(COUNT(*),0) AS count FROM {poll_votes} where nid='%d' GROUP BY chorder ORDER BY chorder ASC", $nid);
    while ($row = db_fetch_object($result)) {
      $vote['#all'] += $row->count;
      $vote[$row->chorder] = $row->count;
    }
    $votes[$nid] = $vote;
  }
  return $votes[$nid];
}

/*
 * Get vote count
 */
function issue_get_uservotes($uid)
{
  static $votes = array();
  if (!isset($votes[$uid])) {
    $votes[$uid] = (int)db_result(db_query("SELECT COUNT(*) FROM {poll_votes} WHERE uid = '%d'", $uid));
  }
  return $votes[$uid];
}


/*
* Implementation of hook_theme()
*/
function _issue_theme()
{
  $theme = array();

//  $theme['issue_content_bottom'] = array(
//    'arguments' => array('node' => NULL),
//    'template' => 'issue-content-bottom',
//    'preprocess functions' => array('issue_content_bottom_preprocess'),
//  );


  $theme['issue_debate_area'] = array(
    'template' => 'issue-debate-area',
    'arguments' => array(
      'arguments_form' => NULL,
      'debate_count' => 0,
      'resource_count' => 0,
      'choices' => array(),
      'nid' => 0,
    ),
  );

  $theme['issue_popular_categories'] = array(
    'arguments' => array(),
    'file' => 'issue.theme.inc',
  );

  $theme += __issue_theme();

  return $theme;
}

/*
 * Preprocess function for the issue_content_bottom
 */
function issue_content_bottom_preprocess(&$vars)
{
  $vars['results'] = theme('issue_results_graph', $vars['node']);
  $vars['content'] = theme('issue_arguments', $vars['node']);
}


/**
 * Poll vote change
 */
function issue_poll_vote($nid, $vote_r, $vote_r_old, $vote_s = -1, $vote_s_old = -1)
{
  //var_dump(func_get_args()); die();
  if ($vote_r == $vote_r_old && $vote_s == $vote_s_old) return false;
  global $user;
  if ($vote_r_old != -1) {
    db_query("UPDATE {poll_choices} SET chvotes = chvotes-1 WHERE nid = '%d' AND chorder = '%d'", $nid, $vote_r_old);
    db_query("DELETE FROM {poll_votes} WHERE nid = '%d' AND uid = '%d'", $nid, $user->uid);
//    db_query("UPDATE {poll_votes_history} SET status = 0 WHERE nid = '%d' AND uid = '%d'", $nid, $user->uid);
  }
  if ($vote_s_old != -1) {
    poll_suggest_vote_remove($vote_s_old, $user->uid);
  }
  # add new values
  if ($vote_r != -1) {
    db_query("UPDATE {poll_choices} SET chvotes = chvotes+1 WHERE nid = '%d' AND chorder = '%d'", $nid, $vote_r);
    db_query('INSERT INTO {poll_votes} (nid, chorder, uid) VALUES (%d, %d, %d)', $nid, $vote_r, $user->uid);
//    db_query('INSERT INTO {poll_votes_history} (nid, chorder, uid, date_voted, status) VALUES (%d, %d, %d, "%s", %d)', $nid, $vote_r, $user->uid, date("y-m-d H:i:s"), 1);

    if (module_exists('rules')) {
      rules_invoke_event('poll_vote', $user, node_load($nid));
    }
  }
  if ($vote_s != -1) {
    poll_suggest_vote_add($vote_s, $user->uid);
  }

  if (module_exists('activity_stream')) {
    activity_stream_add_activity(ACTIVITY_STREAM_ISSUE_VOTE, array('nid' => $nid));
  }

  return true;
}


// TODO - remove what is below


function __issue_theme()
{
  return array(

    'issue_information' => array(
      'template' => 'issue-real-informations',
      'arguments' => array('nid' => NULL, 'created' => NULL, 'postedby' => NULL, 'subject' => NULL, 'area' => NULL, 'detail' => NULL, 'original_nid' => NULL, 'original_language' => NULL, 'orgLangKey' => NULL),
    ),


  );
}


/*
* Forms
* ********************** */
function ahah_render($fields, $name)
{
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];

  return drupal_render($new_form);
}


/* New Feature Ajax Submission */

function issue_vote_submit_ajax($type = '')
{
  global $user;
//echo '<pre>'; print_r($form); exit;
  $nid = $_POST['nid_val'];
  $choice = $_POST['choice'] != '' ? $_POST['choice'] : -1;
  $default_vote = $_POST['def_vote'];

  // update vote time
  $date_time = date("y-m-d H:i:s", time());

  if ($type == 'edit') {
    // validation here
    if (!user_is_logged_in()) {

      $msg['message'] = t('You have to login to do this action!.');
    } else if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any of the choices.');
    } else if ($default_vote == $choice) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    } else {
      if ($user->uid) {
        db_query('update {poll_votes} set chorder=%d, date_voted = "%s" where nid=%d and uid=%d', $choice, $date_time, $nid, $user->uid);

        /* New SET NOTIFY LOG */
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $answer = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '%d' AND chorder = '%d'", $nid, $choice));
        $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $answer);
        set_notify_log($user->uid, $nid, 'change_answer', $variable);
        /* New SET NOTIFY LOG */
      }
      //minus one the value of previously voted choice
      db_query("UPDATE {poll_choices} SET chvotes = chvotes-1 WHERE nid = %d AND chorder = %d", $nid, $default_vote);
      // Add one to the votes.for new choices
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      cache_clear_all();


      $msg['message'] = t('Your vote has been updated');
      $msg['success'] = 1;
    }
  } else if ($type == 'add') {
    if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    } else {
      if ($user->uid) {
        $insert = db_query('INSERT INTO {poll_votes} (nid, chorder, uid, date_voted) VALUES (%d, %d, %d, "%s")', $nid, $choice, $user->uid, $date_time);
      } else {
        db_query("INSERT INTO {poll_votes} (nid, chorder, hostname, date_voted) VALUES (%d, %d, '%s', '%s')", $nid, $choice, ip_address(), $date_time);
      }

      // Add one to the votes.
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      /* New SET NOTIFY LOG */
      $form = array();
      $form['#nid'] = $nid;
      $form['#post']['choice'] = $choice;
      add_vote_notify($form);
      /* New SET NOTIFY LOG */

      cache_clear_all();
      if ($insert) {
        $msg['message'] = t('Your vote has been recorded');
        $msg['success'] = 1;
      } else {
        $msg['message'] = t('Your vote was not recorded, Try again later');
      }
    }
  } else {
    $msg['message'] = t('Error in poll voting');
  }
  print json_encode($msg);
}

/* New Feature Ajax Submission */

/**
 * Implementation of hook_form_alter().
 */
function issue_form_alter(&$form, $form_state, $form_id)
{
  $res->field_filepath[0]['value'] = $file_im;
  if ($form_id == 'user_relationships_ui_request') {

    $form['#submit'][] = 'add_follow_notify';
  }
  if ($form_id == 'subscriptions_add_form') {
    $form['#submit'][] = 'add_subscription_notify';
  }


  if ($form_id == 'poll_node_form') {
    $form['field_issue_state']['#access'] = false;
    $form['field_issue_city']['#access'] = false;

    //echo "<pre>";
    //print_r($form); exit;
    // echo $form['#node']->nid; exit;
  }
  if ($form_id == 'abuse_report_form') {
    //  echo "<pre>";
    //print_r($form);
    $form['reason'] = array(
      '#type' => 'radios',
      '#title' => '<small>' . t('Which one of Heard Mentality’s Guidelines and Principles is this debate posting infringing?') . ' <a href="">' . t('Read Guidelines') . '</a></small>',
      '#options' => array_filter($form['reason']['#options']),
      '#required' => TRUE,
      '#default_value' => variable_get('reason', 1),
    );

    $form['body'] = array('#type' => 'textarea',
      '#resizable' => FALSE,
      '#cols' => 75);

    $form['op'] = false;
    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'),
      '#ahah' => array(
        'wrapper' => 'log_res',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#attributes' => array('class' => 'submit-issue leftfloat'));

    $form['#submit'][] = 'add_flag_notify';
  }
}

function choice_vote_date_update($form, &$form_state)
{
  global $user;
  //update the date that has to be set while adding or editing vote due to merge issue problem
  $nid = !empty($form['#nid']) ? $form['#nid'] : $form['#node']->nid;
  $date_time = date("y-m-d H:i:s", time());
  //$date_time=strtotime($date_time);

  db_query("update {poll_votes} set `date_voted`='$date_time' where uid=%d and nid=%d", $user->uid, $nid);

  //update the date that has to be set while adding or editing vote
}


function issue_block($op = 'list', $delta = 0, $edit = array())
{

  switch ($op) {
    case 'list':
      $blocks['issue-popular-categories'] = array(
        'info' => t('Issue Popular Categories'),
      );
      $blocks[0] = array(
        'info' => t('Node block'),
      );
      $blocks[1] = array(
        'info' => t('Details Tab'),
      );
      $blocks[2] = array(
        'info' => t('Issue Real Info'),
      );
      $blocks[3] = array(
        'info' => t('Issue Search Form'),
      );
      $blocks[4] = array(
        'info' => t('Issue Filter Options'),
      );

      return $blocks;

    case 'view':
      switch ($delta) {
        case 'issue-popular-categories' :
          $block['subject'] = t('');
          $block['content'] = theme('issue_popular_categories');
          break;


        case '0':
          if (arg(0) == 'node' && is_numeric($nid = arg(1))) {
            $node = node_load($nid);
            if (!empty($node) && $node->type == 'poll') {
              $block['content'] = theme('issue_content_bottom', $node);
            }
          }
          break;
        case '2':
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);
          }
//          $nid = $nid != '' ? $nid : get_qid();
          $block['subject'] = "Issue Details with Category & Location";
          $item = _issue_information($nid);
          if ($item) {
            $subject = $item['subject'];
            $area = $item['area'];
            $detail = $item['detail'];
            $postedby = $item['postedby'];
            $created = $item['created'];
            $original_nid = $item['original_nid'];
            $original_language = $item['original_language'];
            $orgLangKey = $item['orgLangKey'];

            $block['content'] = theme('issue_information', $nid, $created, $postedby, $subject, $area, $detail, $original_nid, $original_language, $orgLangKey);
          }
          break;
        case '3':
          $block['subject'] = 'Issue Search Form';
          $block['content'] = drupal_get_form('issue_search_form');
          break;
        case '4':
          $block['subject'] = 'Issue Filter Options';
          $block['content'] = issue_filter_options();
          break;
      }
      return $block;
  }
}

function load_user($uid = '')
{

  $query = "select * from {users} as u join {user_profile} as up on u.uid=up.uid  where u.uid='$uid'";
  $result = db_fetch_object(db_query($query));
  return $result;
}

function add_vote_notify($form, &$form_state)
{
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form);
  $nid = $form['#nid'];
  $choice = $form['#post']['choice'];
  $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
  $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $choice);
  set_notify_log($user->uid, $nid, 'add_vote', $variable);
  /* New SET NOTIFY LOG */

  _send_votenotify($nid);


  # increasepoints('2', $nid, '0');
  up_actions_execute('ansquestion', $user->uid);
  // user_points_action_fired('ansquestion', $user->uid);
}

function add_flag_notify($form, &$form_state)
{
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $nid = $form['#parameters'][2]->oid;
  $qtitle = $form['#parameters'][2]->title;
  $variable = array('qid' => $nid, 'q_title' => $qtitle);
  set_notify_log($user->uid, $nid, 'question_flag', $variable);
  /* New SET NOTIFY LOG */
}


function _send_votenotify($qid = '')
{
  global $user;
  $qry = "insert into notification (uid,follower_action,is_question,new_answer,node_id) values('" . $user->uid . "','1','1','1'," . $qid . "' ) ";

  hm_mails($qid, '', 'vote_answer');
}

// short answer for issue
// follow notify
function add_follow_notify($form, &$form_state)
{
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $target = $form['#parameters'][2]->uid;
  $uid = $user->uid;
  $variable = array('target_id' => $target);
  set_notify_log($uid, '', 'user_follow', $variable);
  /* New SET NOTIFY LOG */
}

function add_subscription_notify($form, &$form_state)
{
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $tid = $form['sid']['#value'];
  $category = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '%d'", $tid));
  $uid = $user->uid;
  $variable = array('tid' => $tid, 'category' => $category);
  set_notify_log($uid, '', 'category_follow', $variable);
  /* New SET NOTIFY LOG */
}


function get_node_tree_child($tid, $nid)
{
  $childrenArray = taxonomy_get_children($tid);
  $children = array();
  $subcats = array();
  foreach ($childrenArray as $key => $value) {
    $children[] = $key;
  }
  if (!empty($children)) {
    $scats = implode(",", $children);
    $nscats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($scats)");
    while ($nscat = db_fetch_object($nscats)) {
      $subcats[] = $nscat->tid;
    }
  }
  return $subcats;
}

function issue_link($type, $object, $teaser = FALSE)
{

  $nid = $object->nid;
  $tnid = get_tnid($nid);
  $lang = db_result(db_query("SELECT language FROM {node} WHERE nid = '%d' AND tnid = '%d'", $tnid, $tnid));
  $languages = language_list();
  foreach ($languages as $langcode => $language) {
    if ($langcode == $lang) {
      $nodeLanguage = $language;
    }
  }
  // echo '<pre>'; print_r($languages);exit;
  $links['issue_original'] = array(
    'title' => t('View Originally Posted Issue'),
    'href' => 'node/' . $tnid,
    'language' => $nodeLanguage,
    'attributes' => array('class' => 'node-issue-org'),
  );
  return $links;
}

/* * ********* LANGUAGE TRANSLATION *********** */

// get paraent translate id
function get_tnid($nid = '')
{
  $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
  $tnid = $res != 0 ? $res : $nid;
  return $tnid;
}

// get translated content for debates
// get translated debate replies/ and resource replies


// issue ahah calllback
function issue_ahah_callback($type = '', $key = '')
{
  if ($type == 'category') {
    if ($key == 'scat') {

      $catids[] = $_POST['subject'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName1 = 'area';
      $options[''] = t('AREA');

      $defArea = $_POST['defarea'];
    }
    if ($key == 'sscat') {

      $catids[] = $_POST['area'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName2 = 'detail';
      $options[''] = t('DETAIL');

      $defDetail = $_POST['defdetail'];
    }
    $cids = implode(",", $catids);
    // SET SUB CATEGORIES

    $scats = array();

    foreach ($catids as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $tid => $value) {
        $stid[] = $tid;
      }

      array_push($scats, $stid);
    }
    // print_r($stid);exit;
    $i = 0;
    if (count($stid) > 0) {
      foreach ($stid as $value => $scid) {
        $cnt = taxonomy_term_count_nodes($scid);
        if ($cnt != 0) {
          $options[$scid] = t(db_result(db_query("SELECT name FROM {term_data} WHERE tid = '" . $scid . "'")));
        }
        $i++;
      }
    }

    if ($key == 'scat') {

      $fields['area'] = array('#type' => 'select',
        '#options' => $options,
        '#ahah' => array('wrapper' => 'sub-sub-cat-wrapper',
          'path' => 'issue/ahah/category/sscat',
          'effect' => 'fade',
          'event' => 'change',
        ),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'area',
        '#value' => $defArea,
      );

      $output .= ahah_render($fields, $fieldName1);
    }
    if ($key == 'sscat') {

      $fields['detail'] = array('#type' => 'select',
        '#options' => $options,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'detail',
        '#value' => $defDetail);

      $output .= ahah_render($fields, $fieldName2);
    }
  } elseif ($type == 'location') {
    // current language
    $lang = $_POST['cur_language'];
    if ($lang == '') {
      $langQuery = " AND n.language = 'en' OR n.language = ''";
    } else {
      $langQuery = " AND n.language = '$lang'";
    }
    if ($key == 'state') {
      // select state

      $countryNames[] = $_POST['country'];
      //  krumo($countryNames);
      $fieldNameState = 'state';
      $states[] = t('STATE');
      $defstate = $_POST['defstate'];

      if (!empty($countryNames)) {

        $countryList = geonames_query('countryinfo', NULL, $options);
        foreach ($countryNames as $country) {

          $xyz = geonames_countryinfo($country);
          foreach ($countryList->results as $countryss) {
            if ($country == $countryss['countryname']) {
              $geoid = $countryss['geonameid'];
              break;
            }
          }
          $query = array('geonameid' => $geoid);
          $results = geonames_query('children', $query);
          foreach ($results->results as $state) {
            // get issue state list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_state} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_state_value = '%s' $langQuery", $state['geonameid']));
            if ($count > 0) {
              $states[$state['geonameid']] = $state['name'];
            }
          }
        }
      } else {
        $states[] = t('No countries selected');
      }
      $fields['state'] = array('#type' => 'select', '#options' => $states,
        '#ahah' => array('wrapper' => 'city-wrapper',
          'path' => 'issue/ahah/location/city',
          'effect' => 'fade',
          'event' => 'change',),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defstate,
        '#id' => 's_state',
      );

      $output .= ahah_render($fields, $fieldNameState);
    }
    if ($key == 'city') {
      $steateIds[] = $_POST['state'];
      $fieldNameCity = 'cicty';
      $cities[] = t('CITY');
      $defcity = $_POST['defcity'];

      if (!empty($steateIds)) {
        foreach ($steateIds as $code) {
          //  krumo($code);
          $explode = explode(',', $code);
          //    krumo($explode);
          $query = array('geonameid' => $explode[0]);
          $result = geonames_query('children', $query);
          foreach ($result->results as $state) {
            // get issue city list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_city} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_city_value = '%s' $langQuery", $state['geonameid'] . $explode[0] . $explode[1]));
            if ($count > 0) {
              $cities[$state['geonameid'] . $explode[0] . $explode[1]] = $state['name'];
            }
          }
        }
      } else {
        $cities[] = t('No states selected');
      }

      $fields['city'] = array('#type' => 'select',
        '#options' => $cities,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defcity
      );

      $output .= ahah_render($fields, $fieldNameCity);
    }
  }

// set ahah behaviour for inner rendering buttons
  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.
  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {

          $filefield_ahah_settings[$id] = $ahah_settings;
        }
      }
    }
  }

  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, ' . drupal_to_js($filefield_ahah_settings) . ');</script>';
  }

  //print drupal_to_js(array('data' => $output, 'status' => true));
  print drupal_json(array('data' => $output, 'status' => true));
}

////
function _issue_information($nid = '')
{
  $node = node_load($nid);
  $tnid = get_tnid($node->nid);
  $users = user_load($node->uid);
  // category lists
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[$cat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[$scat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[$sscat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }

  // find originally posted language
  $trans = node_load($tnid);
  $orgLangKey = $trans->language;
  $languages = language_list();
  $orgLanguage = $languages[$orgLangKey]->name;
  $path = drupal_get_path_alias('node/' . $tnid);

  $values['subject'] = $ctitle;
  $values['area'] = $sctitle;
  $values['detail'] = $ssctitle;
  $values['postedby'] = $users->name;
  $values['created'] = format_date($node->created, "custom", "M j Y");
  $values['original_nid'] = $tnid;
  $values['orgLangKey'] = $orgLangKey;
  $values['original_language'] = $orgLanguage;
  return $values;
}

// issue information theme
function theme_issue_information($nid = '', $created = '', $postedby = '', $ctitle = array(), $sctitle = array(), $ssctitle = array(), $original_nid = '', $original_language = '', $orgLangKey = '')
{
  global $base_url;
  $info = '';
  $info .= '<div id="issue_information">';
  // created details
  $info .= '<div class="post-by">' . t('Issue posted on ') . $created . '&nbsp;'
    . t('By') . '&nbsp;' . l($postedby, 'user/profile/view/' . $postedby) . '</div>';
  //category details
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">SUBJECT</div>';
  if (!empty($ctitle)) {
    foreach ($ctitle as $tid => $subject) {
      $info .= l($subject, 'issues/0/' . $tid . '/0/0/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No subjects found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">AREA</div>';
  if (!empty($sctitle)) {
    foreach ($sctitle as $tid => $area) {
      $parent = taxonomy_get_parents($tid);
      $cid = array_keys($parent);
      $info .= l($area, 'issues/0/' . $cid[0] . '/' . $tid . '/0/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No areas found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">DETAIL</div>';
  if (!empty($ssctitle)) {
    foreach ($ssctitle as $tid => $detail) {
      $sparent = taxonomy_get_parents($tid);
      $ssid = array_keys($sparent);
      $ssparent = taxonomy_get_parents($ssid[0]);
      $cid = array_keys($ssparent);
      $info .= l($detail, 'issues/0/' . $cid[0] . '/' . $ssid[0] . '/' . $tid . '/0/0/0') . '<br />';
    }
  } else {
    $info .= t('No details found') . '<br />';
  }
  $info .= '</div>';
  // original language
  $path = drupal_get_path_alias('node/' . $original_nid);
  $info .= '<br />' . t('Issue originally written in') . '&nbsp;' . $original_language . '<br />'
    . l('Click to view in original language', $base_url . '/' . $orgLangKey . '/' . $path);
  $info .= '</div>';
  return $info;
}


// issue filter options
function issue_filter_options()
{
  $key = arg(1) != '' ? arg(1) : '0';
  $subject = arg(2) != '' ? arg(2) : '0';
  $area = arg(3) != '' ? arg(3) : '0';
  $detail = arg(4) != '' ? arg(4) : '0';
  $country = arg(5) != '' ? arg(5) : '0';
  $state = arg(6) != '' ? arg(6) : '0';
  $city = arg(7) != '' ? arg(7) : '0';
  $method = arg(8) != '' ? arg(8) : '0';

  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';

  if ($method == 'alltime') {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  } elseif ($method == '7days') {
    $actall = '';
    $act7 = 'class="active"';
    $actviews = '';
  } elseif ($method == 'views') {
    $actall = '';
    $act7 = '';
    $actviews = 'class="active"';
  } else {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }


  $key_path = $sitelink . 'issues/' . $key . '/' . $subject . '/' . $area . '/' . $detail . '/' . $country . '/' . $state . '/' . $city;
  $issue_filter = '<div class="sort-by">' . t('View') . ' &nbsp;
                <a href="' . $key_path . '/alltime" ' . $actall . '>' . t('Most Votes (all-time)') . '</a>&nbsp;|&nbsp;'
    . '<a href="' . $key_path . '/7days" ' . $act7 . '>' . t('Most Votes (past 7 days)') . '</a>&nbsp;|&nbsp;'
    . '<a href="' . $key_path . '/views" ' . $actviews . '>' . t('Number of Views') . '</a></div>';
  return $issue_filter;
}

// insert node views

