<?php

/**
 * Implementation of hook_enable()
 */
function poll_translate_enable()
{
  db_query("UPDATE {system} SET weight = '%d' WHERE name = 'poll_translate'", 100);
}

/**
 * @return array
 */
function poll_translate_menu()
{
  $menu = array();

  $menu['content_translate/poll'] = array(
    'page callback' => 'poll_translate_translate',
    'access arguments' => array(CONTENT_TRANSLATE),
    'type' => MENU_CALLBACK,
  );
  $menu['content_translate/poll/admin'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poll_translate_admin'),
    'title' => t('Translate polls'),
    'access arguments' => array(CONTENT_TRANSLATE),
  );

  return $menu;
}

/**
 * @return array
 */
function poll_translate_admin()
{
  $form = array();

  // get page
  if (isset($_REQUEST['page']) && is_numeric($_REQUEST['page']) && $_REQUEST['page'] > 0) {
    $pager_page = intval($_REQUEST['page']);
  } else {
    $pager_page = 1;
  }

  // query
  $query = "SELECT %s FROM {node} n, {languages} l WHERE n.type = 'poll' AND l.language <> n.language AND l.enabled = 1 AND NOT EXISTS (SELECT * FROM {content_translate} ct WHERE ct.content_type = 'node' AND ct.content_id = n.nid AND ct.language = l.language) GROUP BY n.nid";

  // count pages
  $pager_perpage = 25;
  $pager_count = (int)db_result(db_query(sprintf($query, 'COUNT(n.nid) count')));
  $pager_pages = ceil($pager_count / $pager_perpage);
  if ($pager_page > $pager_pages) {
    $pager_page = $pager_pages;
  }

  if ($pager_count == 0) {
    $form['#suffix'] = t('No issues for translation');
    return $form;
  }
  //
  $form['page'] = array(
    '#type' => 'hidden',
    '#value' => $pager_page,
  );

  // the list of languages available
  $languages = language_list();

  // result
  $result = db_query(sprintf($query, 'n.nid, n.title, GROUP_CONCAT(l.language) languages'));
  while ($row = db_fetch_array($result)) {
    $form['issue-' . $row['nid']] = array(
      '#type' => 'fieldset',
      '#title' => $row['title'],
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $translate_to = explode(',', $row['languages']);
    if (1 != count($translate_to)) {
      $form['issue-' . $row['nid']]['all'] = array(
        '#type' => 'submit',
        '#value' => t('All languages'),
        '#name' => $row['nid'],
      );
    }
    foreach ($translate_to as $langcode) {
      $form['issue-' . $row['nid']][$langcode] = array(
        '#type' => 'submit',
        '#value' => t($languages[$langcode]->name),
        '#name' => $row['nid'] . "/" . $langcode,
      );
    }

  }

  // pager
  $form['#suffix'] = theme('moderation_pager', $pager_page, $pager_pages, 'content_translate/poll/admin?page=%d');

  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function poll_translate_admin_submit($form, $form_state)
{
  list($nid, $lang) = explode('/', $form_state['clicked_button']['#name']);
  poll_translate_translate($nid, (string)$lang);
  drupal_goto('content_translate/poll/admin', array('query' => array('page' => $form_state['page'])));
}

/**
 * @param $nid
 */
function poll_translate_translate($nid = false, $lang = false)
{
  if ($language_to = ($lang !== false ? $lang : arg(3))) {
    $languages = array($language_to);
  } else {
    $languages = content_translate_langcodes();
  }
  foreach ($languages as $langcode) {
    content_translate('node', intval($nid ? $nid : arg(2)), $langcode);
  }
  if (isset($_REQUEST['destination'])) {
    drupal_goto();
  }
}

/**
 * Implementation of hook_nodeapi()
 *
 * There we replace some data in SIDE poll with CORE one
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function poll_translate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  if ($node->type == 'poll') {
    switch ($op) {
      case 'presave' :
        if ($node->t) {
          foreach ($node->t as $language => $data) {
            content_translate_del(array(
              'content_type' => 'node',
              'content_id' => $node->nid,
              'language' => $language,
            ));
            foreach ($data as $field => $list) {
              if (is_array($list)) {
                foreach ($list as $field_order => $text) {
                  content_translate_add('node', $node->nid, $language, $field, $text, $field_order);
                }
              } else {
                content_translate_add('node', $node->nid, $language, $field, $list);
              }
            }
          }
//          unset($node->t);
        }
        break;
      case 'load' :
        $node->t = content_translate_get('node', $node->nid);
        break;
    }
  }
}

/**
 * Implementation of hook_content_translate_node()
 *
 * @param $node
 * @param $language_to
 */
function poll_translate_content_translate_node($node, $language_to)
{
  if (!$node || ($node->type != 'poll')) {
    return;
  }

  # translation array
  if (!isset($node->t)) {
    $node->t = array();
  }

  # check if the node was translated to that language
  if (isset($node->t[$language_to])) {
    return;
  } else {
    $node->t[$language_to] = array();
  }

  # language to translate from
  $language_from = $node->language;

  if ($language_from == $language_to) {
    return;
  }

  # Collect data to translate
  $list = array();
  if ($title = strip_tags($node->title)) {
    $list[] = $title;
  }
  if ($body = strip_tags($node->field_description[0]['value'])) {
    $list[] = $body;
  }

  foreach ($node->choice as $choice) {
    if (!empty($choice['chtext'])) {
      $list[] = $choice['chtext'];
    }
    if (!empty($choice['chtext_short'])) {
      $list[] = $choice['chtext_short'];
    }
  }
  if (module_exists('poll_suggest')) {
    foreach ($node->choice_suggest as $choice) {
      if (!empty($choice['chtext'])) {
        $list[] = $choice['chtext'];
      }
    }
  }

  # Translate
  $translations = mstapi_exec($language_from, $language_to, $list);

  # put the translations to node
  $node->t[$language_to]['title'] = $translations[strip_tags($node->title)];
  $node->t[$language_to]['body'] = $translations[strip_tags($node->field_description[0]['value'])];
  foreach ($node->choice as $choice) {
    $node->t[$language_to]['choice'][$choice['chorder']] = $translations[$choice['chtext']];
    $node->t[$language_to]['choice_short'][$choice['chorder']] = $translations[$choice['chtext_short']];
  }
  if (module_exists('poll_suggest')) {
    foreach ($node->choice_suggest as $choice) {
      $node->t[$language_to]['choice_suggest'][$choice['chid']] = $translations[$choice['chtext']];
    }
  }

  node_save($node);
}

/**
 * @param $nid
 * @param $map
 */
function poll_translate_pollfix($nid, $map)
{
  foreach ($map as $chorder => $data) {
    switch ($data['status']) {
      case 'deleted' :
        content_translate_del(array(
          'content_type' => 'node',
          'content_id' => $nid,
          'field' => 'choice',
          'field_order' => $chorder,
        ));
        content_translate_del(array(
          'content_type' => 'node',
          'content_id' => $nid,
          'field' => 'choice_short',
          'field_order' => $chorder,
        ));
        break;
      case 'updated' :
        $query = "
          UPDATE {content_translate}
          SET field_order = '%d'
          WHERE content_type = '%s' AND content_id = '%d' AND field = '%s' AND field_order = '%d'
        ";
        db_query($query, $data['index'], 'node', $nid, 'choice', $chorder);
        db_query($query, $data['index'], 'node', $nid, 'choice_short', $chorder);
        break;
    }
  }
}

/**
 * @param $node
 * @return array
 */
function poll_translate_translation($node)
{
  # display language & translation
  global $language;
  return !empty($node->t[$language->language]) ? $node->t[$language->language] : array();
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function poll_translate_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'poll_node_form') {
    global $language;
    $node = $form['#node'];

    if ($node->language != $language->language) {
      // choices count
      if (isset($form_state['choice_count'])) {
        $choice_count = $form_state['choice_count'];
      } else {
        $choice_count = max(2, empty($node->choice) ? 2 : count($node->choice));
      }
      // translations
      $translation = module_exists('poll_translate') ? poll_translate_translation($node) : array();
      //
      if (!empty($translation['title'][0])) {
//        $form['title']['#value_original'] = $form['title']['#value'];
        $form['title']['#value'] = check_plain($translation['title'][0]);
      }
      if (!empty($translation['body'][0])) {
//        $form['field_description'][0]['#default_value']['value_original'] = $form['field_description'][0]['#default_value']['value'];
        $form['field_description'][0]['#default_value']['value'] = check_plain($translation['body'][0]);
      }
      // Add the current choices to the form.
      for ($delta = 0; $delta < $choice_count; $delta++) {
        if (!empty($translation['choice'][$delta])) {
//          $form['choice_wrapper']['choice'][$delta]['chtext']['#value_original'] = $form['choice_wrapper']['choice'][$delta]['chtext']['#value'];
          $form['choice_wrapper']['choice'][$delta]['chtext']['#value'] = check_plain($translation['choice'][$delta]);
        }
      }
      // additional submit handler
      array_unshift($form['#submit'], 'poll_translate_node_form_submit');
      // TODO -- poll add more not working
      unset($form['choice_wrapper']['poll_more']);
    }
  }
}

/**
 * @param $form
 * @param $form_state
 */
function poll_translate_node_form_submit(&$form, &$form_state)
{
  global $language;
  $node = $form['#node'];
  $values =  & $form_state['values'];
  // title
  content_translate_add('node', $node->nid, $language->language, 'title', $form['#post']['title']);
  $values['title'] = $node->title;
  // body
  content_translate_add('node', $node->nid, $language->language, 'body', $values['field_description'][0]['value']);
  $values['field_description'][0]['value'] = $node->field_description[0]['value'];
  // save translated values
  foreach ($form['choice_wrapper']['choice'] as $chorder => &$element) {
    if (!is_numeric($chorder)) continue;
    content_translate_add('node', $node->nid, $language->language, 'choice', $form['#post']['choice'][(int)$chorder]['chtext'], (int)$chorder);
  }
  // restore the default non-translated values
  if ($node->choice) {
    foreach ($node->choice as $chorder => $choice) {
      $values['choice'][$chorder]['chtext'] = $choice['chtext'];
    }
  }
}