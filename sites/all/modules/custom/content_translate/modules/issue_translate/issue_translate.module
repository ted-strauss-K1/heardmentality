<?php

/**
 * Implementation of hook_enable()
 */
function issue_translate_enable() {
  db_query("UPDATE {system} SET weight = '%d' WHERE name = 'issue_translate'", 100);
}

/**
 * @return array
 */
function issue_translate_menu() {
  $menu = array();

  $menu['content_translate/issue'] = array(
    'page callback'    => 'issue_translate_translate',
    'access arguments' => array(CONTENT_TRANSLATE),
    'type'             => MENU_CALLBACK,
  );
  $menu['content_translate/issue/admin'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('issue_translate_admin'),
    'title'            => t('Translate issues'),
    'access arguments' => array(CONTENT_TRANSLATE),
  );

  return $menu;
}

/**
 * @param $nid
 */
function issue_translate_translate($nid = FALSE, $lang = FALSE) {
  if ($language_to = ($lang !== FALSE ? $lang : arg(3))) {
    $languages = array($language_to);
  }
  else {
    $languages = content_translate_langcodes();
  }
  foreach ($languages as $langcode) {
    content_translate('node', intval($nid ? $nid : arg(2)), $langcode);
  }
  if (isset($_REQUEST['destination'])) {
    drupal_goto();
  }
}

/**
 * @return array
 */
function issue_translate_admin() {
  $form = array();

  // get page
  if (isset($_REQUEST['page']) && is_numeric($_REQUEST['page']) && $_REQUEST['page'] > 0) {
    $pager_page = intval($_REQUEST['page']);
  }
  else {
    $pager_page = 1;
  }

  // query
  $query = "SELECT %s FROM {node} n, {languages} l WHERE n.type = 'issue' AND l.language <> n.language AND l.enabled = 1 AND NOT EXISTS (SELECT * FROM {content_translate} ct WHERE ct.content_type = 'node' AND ct.content_id = n.nid AND ct.language = l.language) GROUP BY n.nid";

  // count pages
  $pager_perpage = 25;
  $pager_count = (int) db_result(db_query(sprintf($query, 'COUNT(n.nid) count')));
  $pager_pages = ceil($pager_count / $pager_perpage);
  if ($pager_page > $pager_pages) {
    $pager_page = $pager_pages;
  }

  if ($pager_count == 0) {
    $form['#suffix'] = t('No issues for translation');
    return $form;
  }

  //
  $form['page'] = array(
    '#type'  => 'hidden',
    '#value' => $pager_page,
  );

  // the list of languages available
  $languages = language_list();

  // result
  $result = db_query(sprintf($query, 'n.nid, n.title, GROUP_CONCAT(l.language) languages'));
  while ($row = db_fetch_array($result)) {
    $form['issue-' . $row['nid']] = array(
      '#type'        => 'fieldset',
      '#title'       => $row['title'],
      '#collapsible' => FALSE,
      '#collapsed'   => FALSE,
    );
    $translate_to = explode(',', $row['languages']);
    if (1 != count($translate_to)) {
      $form['issue-' . $row['nid']]['all'] = array(
        '#type'  => 'submit',
        '#value' => t('All languages'),
        '#name'  => $row['nid'],
      );
    }
    foreach ($translate_to as $langcode) {
      $form['issue-' . $row['nid']][$langcode] = array(
        '#type'  => 'submit',
        '#value' => t($languages[$langcode]->name),
        '#name'  => $row['nid'] . "/" . $langcode,
      );
    }

  }

  // pager
  $form['#suffix'] = theme('moderation_pager', $pager_page, $pager_pages, 'content_translate/issue/admin?page=%d');

  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function issue_translate_admin_submit($form, $form_state) {
  list($nid, $lang) = explode('/', $form_state['clicked_button']['#name']);
  issue_translate_translate($nid, (string) $lang);
  drupal_goto('content_translate/issue/admin', array('query' => array('page' => $form_state['page'])));
}


/**
 * Implementation of hook_nodeapi()
 *
 * There we replace some data in SIDE issue with CORE one
 *
 * @param      $node
 * @param      $op
 * @param null $a3
 * @param null $a4
 */
function issue_translate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'issue') {
    switch ($op) {
      case 'presave' :
        if ($node->t) {
          foreach ($node->t as $language => $data) {
            content_translate_del(array(
              'content_type' => 'node',
              'content_id'   => $node->nid,
              'language'     => $language,
            ));
            foreach ($data as $field => $list) {
              if (is_array($list)) {
                foreach ($list as $field_order => $text) {
                  content_translate_add('node', $node->nid, $language, $field, $text, $field_order);
                }
              }
              else {
                content_translate_add('node', $node->nid, $language, $field, $list);
              }
            }
          }
        }
        break;
      case 'load' :
        $node->t = content_translate_get('node', $node->nid);
        break;
    }
  }
}

/**
 * Implementation of hook_content_translate_node()
 *
 * @param $node
 * @param $language_to
 */
function issue_translate_content_translate_node($node, $language_to) {
  if (!$node || ($node->type != 'issue')) {
    return;
  }

  # translation array
  if (!isset($node->t)) {
    $node->t = array();
  }

  # check if the node was translated to that language
  if (isset($node->t[$language_to])) {
    return;
  }
  else {
    $node->t[$language_to] = array();
  }

  # language to translate from
  $language_from = $node->language;

  if ($language_from == $language_to) {
    return;
  }

  # Collect data to translate
  $list = array();
  if ($title = strip_tags($node->title)) {
    $list[] = $title;
  }
  if ($body = strip_tags($node->content['body']['#value'])) {
    $list[] = $body;
  }
  foreach ($node->choices as $choice) {
    if (!empty($choice['chtext'])) {
      $list[] = $choice['chtext'];
    }
    if (!empty($choice['chtext_short'])) {
      $list[] = $choice['chtext_short'];
    }
  }

  # Translate
  $translations = mstapi_exec($language_from, $language_to, $list);

  # put the translations to node
  $node->t[$language_to]['title'][0] = $translations[strip_tags($node->title)];
  $node->t[$language_to]['body'][0] = $translations[strip_tags($node->content['body']['#value'])];
  foreach ($node->choices as $chid => $choice) {
    $node->t[$language_to]['chtext'][$chid] = $translations[$choice['chtext']];
    $node->t[$language_to]['chtext_short'][$chid] = $translations[$choice['chtext_short']];
  }

  node_save($node);
}

/**
 * @param $node
 *
 * @return array
 */
function issue_translate_translation($node) {
  # display language & translation
  global $language;
  return !empty($node->t[$language->language]) ? $node->t[$language->language] : array();
}

/**
 * todo translations on regular issue form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function issue_translate_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'issue_node_form') {
    array_unshift($form['#submit'], 'issue_translate_node_form_submit');
  }
}

/**
 * @param $form
 * @param $form_state
 */
function issue_translate_node_form_submit(&$form, &$form_state) {
  //
}

/**
 * @param      $node
 * @param      $field
 * @param int  $field_order
 * @param bool $language
 *
 * @return string
 */
function issue_translate($node, $field, $field_order = 0) {
  $translation = issue_translate_translation($node);
  if (isset($translation[$field][$field_order])) {
    return $translation[$field][$field_order];
  }
  switch ($field) {
    case 'title' :
      return $node->title;
    case 'body' :
      return $node->body;
    case 'chtext' :
    case 'chtext_short' :
      return $node->choices[$field_order][$field];
  }

  return '';
}
