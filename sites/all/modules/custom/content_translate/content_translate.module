<?php

define('CONTENT_TRANSLATE', 'Administer content translations');

/**
 * @return array
 */
function content_translate_perm() {
  return array(CONTENT_TRANSLATE);
}

/**
 * @param $content_type
 * @param $content_id
 * @param $language_to
 */
function content_translate($content_type, $content_id, $language_to) {
  switch ($content_type) {
    case 'node' :
      cache_clear_all('content:' . $content_id, content_cache_tablename(), TRUE);
      module_invoke_all("content_translate_node", node_load($content_id, NULL, TRUE), $language_to);
      break;
    case 'comment' :
      module_invoke_all("content_translate_comment", _comment_load($content_id), $language_to);
      break;
  }
}

/**
 * todo laguage detection
 *
 * @param $string
 *
 * @return string
 */
function content_translate_detect_language($string) {
  global $user;
  return $user->language;
}


/**
 * Implementation of hook_nodeapi()
 */
function content_translate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete' :
      content_translate_del(array(
        'content_type' => 'node',
        'content_id'   => $node->nid,
      ));
      break;
  }
}

/**
 * @param     $content_type
 * @param     $content_id
 * @param     $field
 * @param     $text
 * @param int $field_order
 */
function content_translate_add($content_type, $content_id, $language, $field, $text, $field_order = 0) {
  if (is_string($text) && ($text != '')) {
    db_query("
    REPLACE INTO {content_translate}
    SET
      content_type = '%s',
      content_id = '%d',
      language = '%s',
      field = '%s',
      field_order = '%d',
      text = '%s',
      date_added = '%s'
      ", $content_type, $content_id, $language, $field, $field_order, $text, date('Y-m-d H:i:s'));
  }
}

/**
 * @param      $content_type
 * @param      $content_id
 * @param bool $language
 *
 * @return array
 */
function content_translate_get($content_type, $content_id, $language = FALSE) {
  static $cache = array();

  if (!isset($cache[$content_type][$content_id])) {
    $cache[$content_type][$content_id] = array();

    $result = db_query("SELECT * FROM {content_translate} WHERE content_type = '%s' AND content_id = '%d'", $content_type, $content_id);
    while ($row = db_fetch_array($result)) {
      $cache[$content_type][$content_id][$row['language']][$row['field']][$row['field_order']] = $row['text'];
    }
  }
  $output = $language ? $cache[$content_type][$content_id][$language] : $cache[$content_type][$content_id];
  return $output ? $output : array();
}

/**
 * @param array $p
 */
function content_translate_del($p = array()) {
  $query = "DELETE FROM {content_translate} WHERE 1";
  $params = array();
  foreach (array('content_type', 'content_id', 'language', 'field', 'field_order') as $pname) {
    if (isset($p[$pname])) {
      $query .= " AND " . $pname . " = '%s'";
      $params[] = $p[$pname];
    }
  }
  if ($params) {
    db_query($query, $params);
  }
}

/**
 * @return array
 */
function content_translate_langcodes() {
  $langs = language_list('enabled');
  foreach ($langs[1] as $code => $lang) {
    $languages[] = $code;
  }
  return $languages;
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function content_translate_form_alter(&$form, &$form_state, $form_id) {
  if ('system_performance_settings' == $form_id) {
    $form['clear_cache']['clear']['#submit'][] = 'content_translate_rebuild_js';
  }
}

/**
 *
 */
function content_translate_rebuild_js() {
  # check what we have
  $lids = array();
  $result = db_query("SELECT lid, source FROM {locales_source} WHERE textgroup = 'default' AND location LIKE '%%.js%%'");
  while ($row = db_fetch_object($result)) {
    $lids[$row->source] = $row->lid;
  }
  # rebuild sources
  $records = module_invoke_all('content_translate_rebuild_js');
  foreach ($records as $file => $strings) {
    foreach ($strings as $string) {
      if (!isset($lids[$string])) {
        db_query("INSERT INTO {locales_source} (location, source, textgroup, version) VALUES ('%s', '%s', 'default', '%s')", $file, $string, VERSION);
        unset($lids[$string]);
      }
    }
  }
  # remove old translations
  if ($lids) {
    sort($lids);
    // db_query("DELETE FROM {locales_source} WHERE lid IN (".db_placeholders($lids).")", $lids);
  }
  # rebuild js
  $root = $_SERVER['DOCUMENT_ROOT'];
  include_once $root . '/includes/locale.inc';
  $languages = i18n_language_list();
  foreach ($languages as $langcode => $language) {
    _locale_rebuild_js($langcode);
  }
}
