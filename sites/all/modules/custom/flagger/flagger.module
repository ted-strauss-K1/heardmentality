<?php

/**
 * Flagger path - main gateway to pass flagger calls
 */
define('FLAGGER_PATH', 'flagger');

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function flagger_theme()
{
  $theme = array();

  $theme['flagger_btn_flag'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
    'file' => 'flagger.theme.inc',
  );
  $theme['flagger_btn_flags'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
    'file' => 'flagger.theme.inc',
  );
  $theme['flagger_btn_flags_history'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
    'file' => 'flagger.theme.inc',
  );






  // todo refactor
  $theme['flagger_button'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
  );

  $theme['flagger_button_flags'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
      'flagged' => FALSE,
    ),
  );

  $theme['flagger_node_flags'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
  );

  $theme['flagger_flags'] = array(
    'arguments' => array(),
  );

  return $theme;
}



/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function flagger_menu()
{
  $menu = array();

  $menu[FLAGGER_PATH] = array(
    'page callback' => 'flagger_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[FLAGGER_PATH . '/save'] = array(
    'page callback' => 'flagger_page_save',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );




  $menu[FLAGGER_PATH . '/%/%/flags'] = array(
    'page callback' => 'flagger_page_flags',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );



  return $menu;
}

/**
 * Callback for FLAGGER_PATH
 *
 * @param $content_type
 * @param $content_id
 */
function flagger_page($content_type, $content_id)
{
  $form = drupal_get_form('flagger_form', $content_id, $content_type);
  print json_encode(array('text' => $form));
}

/**
 * Flagger form
 *
 * @param $form
 * @param $content_id
 * @param $content_type
 * @return array
 */
function flagger_form(&$form, $content_id, $content_type)
{
  global $user;
  $form = array();

  $form['#attributes'] = array(
    'class' => 'flagger_form'
  );
  $form['#action'] = '/' . FLAGGER_PATH . '/save';

  $form['title'] = array(
    '#type' => 'markup',
    "#value" => t("Which one of Heard Mentality's Guidelines and Principles is this debate posting infringing?"),
  );
  $form['guide'] = array(
    '#type' => 'markup',
    "#value" => l(t('Read Guidelines'), '<front>'),
  );

  switch ($content_type) {
    case 'comment' :
      $flags = flag_get_flags($content_type);
      break;
    case 'node' :
      $node = node_load($content_id);
      $flags = flag_get_flags($content_type, $node->type);
      break;
    default :
      $flags = array();
      break;
  }

  $note = '';

  // radios
  $value = -1;
  $options = array();
  foreach ($flags as $flag) {
    $options[$flag->fid] = t($flag->title);
    if ($flag->is_flagged($content_id)) {
      $value = $flag->fid;
      $notes = flag_note_get_notes(array(
        'uid' => $user->uid,
        'content_id' => $content_id,
        'content_type' => $content_type,
        'fid' => $flag->fid,
      ));
      if ($notes) {
        $note = $notes[0]['note'];
      }
    }
  }
  $form['flag'] = array(
    '#type' => 'radios',
    '#default_value' => $value,
    '#options' => $options,
  );

  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Note'),
    "#value" => $note,
  );

  $form['content_id'] = array(
    '#type' => 'hidden',
    "#value" => $content_id,
  );
  $form['content_type'] = array(
    '#type' => 'hidden',
    "#value" => $content_type,
  );

  return $form;
}

/**
 * Flagger form submit
 */
function flagger_page_save()
{
  $post = $_POST;

  global $user;
  $note = $post['note'];
  $tid = ($post['tid'] > 0 ? $post['tid'] : NULL);

  // radios
  $content_id = $post['content_id'];
  $content_type = $post['content_type'];
  switch ($content_type) {
    case 'comment' :
      $flags = flag_get_flags($content_type);
      break;
    case 'node' :
      $node = node_load($content_id);
      $flags = flag_get_flags($content_type, $node->type);
      break;
    default :
      $flags = array();
      break;
  }
  // remove old notes
  flag_note_remove_notes(array('content_type' => $content_type, 'content_id' => $content_id));

  foreach ($flags as $flag) {
    if ($post['flag'] == $flag->fid) {
      $flag->flag('flag', $content_id);
      $record = $flag;
      $record->uid = $user->uid;
      $record->note = $note;
      $record->tid = $tid;
      $record->content_id = $content_id;
      flag_note_insert_note($record);
    } else {
      $flag->flag('unflag', $content_id);
    }
  }

}



/**
 * Flagger Button theme call
 *
 * @param $content_id
 * @param $content_type
 * @return string
 */
function theme_flagger_button($content_id, $content_type)
{
  if (user_is_logged_in()) {
    return l(t('flag'), FLAGGER_PATH . '/' . $content_type . '/' . $content_id,
      array('attributes' => array(
        'class' => 'flagger',
        'name' => $content_type . '/' . $content_id,
        'original-title' => t('flag'),
      ))
    );
  } else {
    return l(t('flag'), '#',
      array('attributes' => array(
        'class' => theme('user_login_modal_class', TRUE),
      ))
    );
  }
}

/**
 * Flagger Button Flags theme call
 *
 * @param $content_id
 * @param $content_type
 * @return string
 */
function theme_flagger_button_flags($content_id, $content_type, $flagged = FALSE)
{
  if (!module_exists('moderation') || !moderation_check_perm()) {
    return '';
  }

  return l(t('flags'), FLAGGER_PATH . '/' . $content_type . '/' . $content_id . '/flags',
    array('attributes' => array(
      'class' => 'flagger_flags noty_request '.($flagged ? 'flagged' : ''),
      'name' => url(FLAGGER_PATH . '/' . $content_type . '/' . $content_id . '/flags'),
      'original-title' => t('flags'),
    ))
  );
}

/**
 * Theme for Flags Block
 *
 * @param $content_id
 * @param $content_type
 * @return string
 */
function theme_flagger_node_flags($content_id, $content_type)
{
  $flags = flagger_get_flags($content_type, $content_id);
  if (empty($flags)) {
    return '';
  }

  $output = '<div class="icon cat text"></div>';
  $output .= '<ul class="tags">';
  $output .= '<label for="" class="tags-on">' . t('FLAGS') . '</label>';
  foreach ($flags as $fid => $flag) {
    $output .= '<li>' . $flag['title'] . ' x ' . count($flag['users']) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<div class="clear"></div>';

  return $output;
}

/**
 * @return string
 */
function theme_flagger_flags()
{
  $output = '<div class="table-bor-form clearfix">';

  // collect info
  $flags = array();
  foreach (flag_get_flags('node') as $flag) {
    if (in_array('poll', $flag->types)) {
      $flags['poll'][str_replace('node_', '', $flag->name)] = $flag->title;
    }
    if (in_array('forum', $flag->types)) {
      $flags['post'][str_replace('node_', '', $flag->name)] = $flag->title;
    }
  }
  foreach (flag_get_flags('comment') as $flag) {
    if (in_array('forum', $flag->types)) {
      $flags['post'][str_replace('comment_', '', $flag->name)] = $flag->title;
    }
  }

  // All-user interaction
  $output .= '
    <div class="table-bor-form-item-1">
      <div class="table-bor-form-item-1-title"><h6>' . t('In all user interaction') . ':</h6></div>
      <ul>';
  foreach ($flags['poll'] as $name => $title) {
    if (isset($flags['post'][$name])) {
      $output .= sprintf('<li><a href="#" class="flag-%s">%s</a></li>', $name, t($title));
    }
  }
  $output .= '
      </ul>
    </div>';

  // Issues
  $output .= '
    <div class="table-bor-form-item-1">
      <div class="table-bor-form-item-1-title"><h6>' . t('Issues') . ':</h6></div>
      <ul>';
  foreach ($flags['poll'] as $name => $title) {
//    if (!isset($flags['post'][$name])) {
    $output .= sprintf('<li><a href="#" class="flag-%s">%s</a></li>', $name, t($title));
//    }
  }
  $output .= '
      </ul>
    </div>';

  // Posts
  $output .= '
    <div class="table-bor-form-item-1">
      <div class="table-bor-form-item-1-title"><h6>' . t('Posts') . ':</h6></div>
      <ul>';
  foreach ($flags['post'] as $name => $title) {
//    if (!isset($flags['poll'][$name])) {
    $output .= sprintf('<li><a href="#" class="flag-%s">%s</a></li>', $name, t($title));
//    }
  }
  $output .= '
      </ul>
    </div>';

  $output .= '</div>';
  return $output;
}

/**
 * Callback for FLAGGER_PATH
 *
 * @param $content_type
 * @param $content_id
 */
function flagger_page_flags($content_type, $content_id)
{
  if (!module_exists('moderation') || !moderation_check_perm()) {
    print json_encode(array(
      'status'  => FALSE,
      'message' => t('You have no access to that info'),
    ));
    exit;
  }

  $output = '';

  $flags = flagger_get_flags($content_type, $content_id);
  foreach ($flags as $fid => $flag) {
    $output .= t($flag['title']);
    $output .= '<hr style="margin:3px 0 5px 0"/>';
    $output .= '<ul>';
    foreach ($flag['users'] as $uid => $data) {
      $output .= '<li><b>'. l($data['name'],'user/profile/view/'.$uid) . '</b>' .
        (empty($data['note']) ? '' : ': '.$data['note']) .'</li>';
    }
    $output .= '</ul>';
  }

  if (!$flags) {
    $output = t('No flags');
  }

  print json_encode(array(
    'status'  => TRUE,
    'message' => $output,
  ));

  exit;
}

/**
 * @param string $content_type
 * @param string $content_id
 * @return mixed
 */
function flagger_get_flags($content_type = '', $content_id = '')
{
  static $cache = array();

  if (is_null($cache[$content_type][$content_id])) {
    $cache[$content_type][$content_id] = array();

    $result = db_query("
    SELECT fc.uid, u.name, fn.note, f.name flag, f.title, f.fid
    FROM {flag_content} fc
    INNER JOIN {flags} f ON
      f.fid = fc.fid
    INNER JOIN {users} u ON
      fc.uid = u.uid
    LEFT JOIN {flag_note} fn ON
      fn.content_type = fc.content_type AND
      fn.content_id = fc.content_id AND
      fn.fid = fc.fid AND
      fn.uid = fc.uid
    WHERE fc.content_type = '%s' AND fc.content_id = '%d'
    ORDER BY fc.fid",
      $content_type, $content_id
    );
    while ($row = db_fetch_array($result)) {
      $cache[$content_type][$content_id][$row['fid']]['name'] = $row['flag'];
      $cache[$content_type][$content_id][$row['fid']]['title'] = $row['title'];
      $cache[$content_type][$content_id][$row['fid']]['users'][$row['uid']] = array(
        'name' => $row['name'],
        'note' => $row['note'],
      );
    }
  }

  return $cache[$content_type][$content_id];
}

/**
 * Add required js
 *
 * @param $vars
 */
function flagger_preprocess_page(&$vars)
{
  drupal_add_js(drupal_get_path('module', 'flagger') . '/flagger.js');
  drupal_add_js('misc/jquery.form.js');
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function flagger_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'load' :
      // let's load the flags used
      $node->flags = flagger_get_flags('node', $node->nid);
    break;
  }
}

/**
 * Implementation of hook_flag(). Trigger actions if any are available.
 */
function flagger_flag($action, $flag, $content_id, $account)
{
  if (module_exists('rules')) {
    $event_name = ($action == 'flag' ? 'flag_flagged' : 'flag_unflagged');
    $arguments = array(
      'flag' => $flag,
      'flag_content_id' => $content_id,
      'flagging_user' => $account,
    );
    rules_invoke_event($event_name, $arguments);
  }
}