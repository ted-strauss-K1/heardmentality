<?php

/**
 * Flagger path - main gateway to pass flagger calls
 */
define('FLAGGER_PATH', 'flagger');

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function flagger_theme() {
  $theme = array();

  $theme['flagger_btn_flag'] = array(
    'arguments' => array(
      'content_id'   => NULL,
      'content_type' => NULL,
    ),
    'file'      => 'flagger.theme.inc',
  );
  $theme['flagger_btn_flags'] = array(
    'arguments' => array(
      'content_id'   => NULL,
      'content_type' => NULL,
    ),
    'file'      => 'flagger.theme.inc',
  );
  $theme['flagger_btn_history'] = array(
    'arguments' => array(
      'content_id'   => NULL,
      'content_type' => NULL,
    ),
    'file'      => 'flagger.theme.inc',
  );

  return $theme;
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function flagger_menu() {
  $menu = array();

  // flag
  $menu[FLAGGER_PATH] = array(
    'page callback'    => 'flagger_page',
    'page arguments'   => array(1, 2),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'flagger.pages.inc',
  );
  $menu[FLAGGER_PATH . '/save'] = array(
    'page callback'    => 'flagger_page_save',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'flagger.pages.inc',
  );

  // flags
  $menu[FLAGGER_PATH . '/flags/%/%'] = array(
    'page callback'    => 'flagger_page_flags',
    'page arguments'   => array(2, 3),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'flagger.pages.inc',
  );

  // history
  $menu[FLAGGER_PATH . '/history/%/%'] = array(
    'page callback'    => 'flagger_page_history',
    'page arguments'   => array(2, 3),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'flagger.pages.inc',
  );

  // history
  $menu[FLAGGER_PATH . '/unflag/%'] = array(
    'page callback'    => 'flagger_page_unflag',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'flagger.pages.inc',
  );

  return $menu;
}

/**
 * Add required js
 *
 * @param $vars
 */
function flagger_preprocess_page(&$vars) {
  drupal_add_js(drupal_get_path('module', 'flagger') . '/flagger.js');
  drupal_add_js('misc/jquery.form.js');
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param      $node
 * @param      $op
 * @param null $a3
 * @param null $a4
 */
function flagger_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load' :
      // let's load the flags used
      $node->flags = flagger_get_flags('node', $node->nid);
      break;
  }
}

/**
 * Implementation of hook_flag(). Trigger actions if any are available.
 */
function flagger_flag($op, $flag, $content_id, $account, $fcid) {
  if ($content_type = db_result(db_query("SELECT content_type FROM {flag_content} WHERE fcid = %d", $fcid))) {
    # actions
    function_exists('action_queue') && action_queue(array(
      'uid'         => $account->uid,
      'operation'   => $op,
      'entity_id'   => $content_id,
      'entity_type' => $content_type,
    ));
  }

  if (module_exists('rules')) {
    $event_name = ($op == 'flag' ? 'flag_flagged' : 'flag_unflagged');
    $arguments = array(
      'flag'            => $flag,
      'flag_content_id' => $content_id,
      'flagging_user'   => $account,
    );
    rules_invoke_event($event_name, $arguments);
  }
}

/**
 * @param string $content_type
 * @param string $content_id
 *
 * @return mixed
 */
function flagger_get_flags($content_type = '', $content_id = '', $reset = FALSE) {
  static $cache = array();

  if ($reset || is_null($cache[$content_type][$content_id])) {
    $cache[$content_type][$content_id] = array();

    $result = db_query("
    SELECT fc.uid, fc.fcid, u.name, fn.note, f.name flag, f.title, f.fid
    FROM {flag_content} fc
    INNER JOIN {flags} f ON
      f.fid = fc.fid
    INNER JOIN {users} u ON
      fc.uid = u.uid
    LEFT JOIN {flag_note} fn ON
      fn.content_type = fc.content_type AND
      fn.content_id = fc.content_id AND
      fn.fid = fc.fid AND
      fn.uid = fc.uid
    WHERE fc.content_type = '%s' AND fc.content_id = '%d'
    ORDER BY fc.fid", $content_type, $content_id);
    while ($row = db_fetch_array($result)) {
      $cache[$content_type][$content_id][$row['fid']]['name'] = $row['flag'];
      $cache[$content_type][$content_id][$row['fid']]['title'] = $row['title'];
      $cache[$content_type][$content_id][$row['fid']]['fcid'] = $row['fcid'];
      $cache[$content_type][$content_id][$row['fid']]['users'][$row['uid']] = array(
        'name' => $row['name'],
        'note' => $row['note'],
      );
    }
  }

  return $cache[$content_type][$content_id];
}
