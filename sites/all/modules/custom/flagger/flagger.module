<?php

/**
 * Flagger path - main gateway to pass flagger calls
 */
define('FLAGGER_PATH', 'flagger');

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function flagger_menu()
{
  $menu = array();

  $menu[FLAGGER_PATH] = array(
    'page callback' => 'flagger_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu[FLAGGER_PATH . '/save'] = array(
    'page callback' => 'flagger_page_save',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Callback for FLAGGER_PATH
 *
 * @param $content_type
 * @param $content_id
 */
function flagger_page($content_type, $content_id)
{
  $form = drupal_get_form('flagger_form', $content_id, $content_type);
  print json_encode(array('text' => $form));
}

/**
 * Flagger form
 *
 * @param $form
 * @param $content_id
 * @param $content_type
 * @return array
 */
function flagger_form(&$form, $content_id, $content_type)
{
  $form = array();

  $form['#attributes'] = array(
    'class' => 'flagger_form'
  );
  $form['#action'] = '/' . FLAGGER_PATH . '/save';

  $form['title'] = array(
    '#type' => 'markup',
    "#value" => t('Which one of Heard Mentalityâ€™s Guidelines and Principles is this debate posting infringing? '),
  );
  $form['guide'] = array(
    '#type' => 'markup',
    "#value" => l(t('Read Guidelines'), '<front>'),
  );

  switch ($content_type) {
    case 'comment' :
      $flags = flag_get_flags($content_type);
      break;
    case 'node' :
      $node = node_load($content_id);
      $flags = flag_get_flags($content_type, $node->type);
      break;
    default :
      $flags = array();
      break;
  }

  $i = 0;
  foreach ($flags as $flag) {
    $form['flag-' . $i] = array(
      '#type' => 'checkbox',
      '#title' => t($flag->title),
      '#value' => $flag->is_flagged($content_id),
    );
    $form['flag-fid-' . $i] = array(
      '#type' => 'hidden',
      '#value' => $flag->fid,
    );
    $form['flag-state-' . $i] = array(
      '#type' => 'hidden',
      '#value' => $flag->is_flagged($content_id),
    );
    $i++;
  }

  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Note'),
    "#value" => '',
  );

  $form['flag_count'] = array(
    '#type' => 'hidden',
    "#value" => count($flags),
  );
  $form['content_id'] = array(
    '#type' => 'hidden',
    "#value" => $content_id,
  );
  $form['content_type'] = array(
    '#type' => 'hidden',
    "#value" => $content_type,
  );

  return $form;
}

/**
 * Flagger form submit
 */
function flagger_page_save()
{
  $post = $_POST;

  $note = $post['note'];
  $tid = ($post['tid'] > 0 ? $post['tid'] : NULL);

  global $user;
  for ($i = 0; $i < $post['flag_count']; $i++) {
    $fid = $post['flag-fid-' . $i];
    $state_old = $post['flag-state-' . $i];
    $state_new = $post['flag-' . $i];
    if ($state_old != $state_new) {
      $flag = flag_get_flag(null, $fid);
      if ($state_old) {
        flag_note_remove_notes(array('content_type' => $post['content_type'], 'content_id' => $post['content_id']));
      }
      if ($state_new) {
        $record = $flag;
        $record->uid = $user->uid;
        $record->note = $note;
        $record->tid = $tid;
        $record->content_id = $post['content_id'];
        flag_note_insert_note($record);
      }
      $flag->flag($state_new ? 'flag' : 'unflag', $post['content_id']);
    }
  }
}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function flagger_theme()
{
  $theme = array();

  $theme['flagger_button'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
  );

  $theme['flagger_node_flags'] = array(
    'arguments' => array(
      'content_id' => NULL,
      'content_type' => NULL,
    ),
  );

  return $theme;
}

/**
 * Flagger Button theme call
 *
 * @param $content_id
 * @param $content_type
 * @return string
 */
function theme_flagger_button($content_id, $content_type)
{
  if (user_is_logged_in()) {
    return l(t('flag'), FLAGGER_PATH . '/' . $content_type . '/' . $content_id,
      array('attributes' => array(
        'class' => 'flagger',
        'name' => $content_type . '/' . $content_id,
        'original-title' => t('flag'),
      ))
    );
  } else {
    return l(t('flag'), '#',
      array('attributes' => array(
        'class' => theme('user_login_modal_class', true),
      ))
    );
  }
}

/**
 * Theme for Flags Block
 *
 * @param $content_id
 * @param $content_type
 * @return string
 */
function theme_flagger_node_flags($content_id, $content_type)
{
  $flags = flagger_get_counts($content_type, $content_id);
  if (empty($flags)) {
    return '';
  }

  $output = '<div class="icon cat text"></div>';
  $output .= '<ul class="tags">';
  $output .= '<label for="" class="tags-on">' . t('FLAGS') . '</label>';
  foreach ($flags as $fid => $flag) {
    $output .= '<li>' . $flag['title'] . ' x ' . count($flag['users']) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<div class="clear"></div>';

  return $output;
}

/**
 * Add required js
 *
 * @param $vars
 */
function flagger_preprocess_page(&$vars)
{
  drupal_add_js(drupal_get_path('module', 'flagger') . '/flagger.js');
  drupal_add_js('misc/jquery.form.js');
}

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function flagger_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'load' :
      // let's load the flags used
      $node->flags = flagger_get_counts('node', $node->nid);
      break;
  }
}

/**
 * @param $content_type
 * @param $content_id
 * @param bool $reset
 * @return mixed
 *
 * @see flag_get_counts()
 */
function flagger_get_counts($content_type, $content_id, $reset = FALSE)
{
  static $cache = array();

  if ($reset) {
    $cache = array();
    if (!isset($content_type)) {
      return false;
    }
  }

  if (!isset($cache[$content_type][$content_id])) {
    $cache[$content_type][$content_id] = array();

    $result = db_query("SELECT fc.fid, fc.uid, f.name, f.title, u.name AS uname FROM {flag_content} fc INNER JOIN {flags} f ON fc.fid = f.fid INNER JOIN {users} u ON fc.uid = u.uid WHERE fc.content_type = '%s' AND fc.content_id = '%d'", $content_type, $content_id);
    while ($row = db_fetch_object($result)) {
      $cache[$content_type][$content_id][$row->fid]['name'] = $row->name;
      $cache[$content_type][$content_id][$row->fid]['title'] = $row->title;
      $cache[$content_type][$content_id][$row->fid]['users'][] = array($row->uid => $row->uname);
    }
  }

  return $cache[$content_type][$content_id];
}

/**
 * Implementation of hook_flag(). Trigger actions if any are available.
 */
function flagger_flag($action, $flag, $content_id, $account) {
  if (module_exists('rules')) {
    $event_name = ($action == 'flag' ? 'flag_flagged' : 'flag_unflagged');
    $arguments = array(
      'flag' => $flag,
      'flag_content_id' => $content_id,
      'flagging_user' => $account,
    );
    rules_invoke_event($event_name, $arguments);
  }
}