<?php

/**
 * Define permission string
 */
define ('RANKS_ADMIN', 'Administer Ranks');

/**
 * Implementation of hook_perm()
 *
 * @return array7
 */
function ranks_perm()
{
  return array(RANKS_ADMIN);
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function ranks_menu()
{
  $menu = array();

  # ranks menu edit
  $menu['admin/settings/ranks'] = array(
    'title' => t('Ranks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ranks_form'),
    'access arguments' => array(RANKS_ADMIN),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ranks.admin.inc',
  );

  return $menu;
}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function ranks_theme()
{
  $theme = array();

  $theme['ranks'] = array(
    'arguments' => array(),
  );

  return $theme;
}

/**
 * Get the list of ranks
 *
 * @return array
 */
function ranks_get()
{
  static $ranks = NULL;

  if (is_null($ranks)) {
    $ranks = array();
    $result = db_query('SELECT * FROM {ranks} ORDER BY points ASC');
    $index = 0;
    while ($rank = db_fetch_array($result)) {
      $ranks[] = $rank + array('index' => $index++);
    }
    if (empty($ranks)) {
      $ranks[] = array('id' => 0, 'name' => 'Citizen', 'points' => 0, 'index' => 0);
    }
  }
  return $ranks;
}

/**
 *
 */
function theme_ranks()
{
  $output = '<ul>';

  foreach (ranks_get() as $rank) {
    $output .= sprintf('<li>%s - %d</li>', $rank['name'], $rank['points']);
  }

  $output .= '</ul>';
  return $output;
}

/**
 * Implementation of hook_user()
 *
 * @param $op
 * @param $edit
 * @param $account
 * @param null $category
 */
function ranks_user($op, &$edit, &$account, $category = NULL)
{
  switch ($op) {
    case 'load' :
      $account->rank = ranks_user_rank($account->uid);
      break;
  }
}

/**
 * Get the user's rank
 *
 * @param $uid
 * @return mixed
 */
function ranks_user_rank($uid, $reset = FALSE)
{
  static $cache = array();

  if (is_null($cache) || $reset) {
    $ranks = ranks_get();
    $up = up_userpoints_get($uid);
    $rank = $ranks[0];
    for ($i = 0; $i < count($ranks); $i++) {
      if ($up >= $ranks[$i]['points']) {
        $rank = $ranks[$i];
      } else {
        break;
      }
    }
    # Adding userpoints for rules event to see if user got new rank
    $cache[$uid] = $rank + array('up' => $up);
  }

  return $cache[$uid];
}

/**
 * Implementation of hook_init()
 *
 * To put rank to the $user
 */
function ranks_init()
{
  global $user;
  $edit = array();
  ranks_user('load', $edit, $user);
}

/**
 * @param $rank_index
 * @param $uid
 * @return bool
 */
function ranks_permission($rank_index, $uid) {
  $rank = ranks_user_rank($uid);
  return $rank_index <= $rank['index'];
}