<?php

/**
 * Implementation of hook_badges()
 *
 * @return array
 */
function badges_poll_badges()
{
  $badges = array();

  $badges['poll_votes_bronze'] = array(
    'function' => 'badges_poll_votes_check',
    'function multiple' => 'badges_poll_votes_check_multiple',
    'name' => t('Civic Duty'),
    'info' => t('Voted 300 times'),
    'type' => 'bronze',
    'arguments' => array('vote_count' => 300),
  );
  $badges['poll_votes_silver'] = array(
    'function' => 'badges_poll_votes_check',
    'function multiple' => 'badges_poll_votes_check_multiple',
    'name' => t('Patriotic Citizen'),
    'info' => t('Voted 1000 times'),
    'type' => 'silver',
    'arguments' => array('vote_count' => 1000),
  );

  if (module_exists("taxonomy")) {
    $badges['poll_votes_taxonomy_bronze'] = array(
      'function' => 'badges_poll_votes_taxonomy_check',
      'function multiple' => 'badges_poll_votes_taxonomy_check_multiple',
      'name' => t('Generalist'),
      'info' => t('User has voted on at least 5 questions in 10 bottom level categories (i.e categories without children subcategories)'),
      'type' => 'bronze',
      'arguments' => array('nids' => 5, 'tids' => 10),
    );
    $badges['poll_votes_taxonomy_silver'] = array(
      'function' => 'badges_poll_votes_taxonomy_check',
      'function multiple' => 'badges_poll_votes_taxonomy_check_multiple',
      'name' => t('Well Read'),
      'info' => t('User has voted on at least 10 questions in 20 bottom level categories (i.e categories without children subcategories)'),
      'type' => 'silver',
      'arguments' => array('nids' => 10, 'tids' => 20),
    );
    $badges['poll_votes_taxonomy_gold'] = array(
      'function' => 'badges_poll_votes_taxonomy_check',
      'function multiple' => 'badges_poll_votes_taxonomy_check_multiple',
      'name' => t('Scholar'),
      'info' => t('User has voted on at least 20 questions in 30 bottom level categories (i.e categories without children subcategories)'),
      'type' => 'gold',
      'arguments' => array('nids' => 20, 'tids' => 30),
    );
  }

  return $badges;
}

/**
 * @param $uid
 * @return bool
 */
function badges_poll_votes_check($uid, $arguments = array())
{
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("SELECT uid, COUNT(*) count FROM {poll_votes} GROUP BY uid");
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = $row['count'];
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['vote_count'] : false;
}

/**
 * @param array $uids
 * @return array
 */
function badges_poll_votes_check_multiple($uids = array(), $arguments = array())
{
  $output = array();

  foreach ($uids as $uid) {
    $output[$uid] = badges_poll_votes_check($uid, $arguments);
  }

  return $output;
}

/**
 * Get Bottom-level Categories
 */
function taxonomy_bottom_level_terms($vid)
{
  static $_list = array();

  if (isset($list[$vid])) {
    return $list[$vid];
  }
  $list = array();
  $terms = taxonomy_get_tree($vid);
  foreach ($terms as $term) {
    $list[$term->tid] = $term;
    foreach ($term->parents as $parent) {
      if ($parent != 0) {
        unset($list[$parent]);
      }
    }
  }
  $_list[$vid] = array_keys($list);

  return $_list[$vid];
}

/**
 * @param string $type
 */
function taxonomy_node_type_vocabularies($type = 'poll')
{
  static $vids = array();

  if (is_null($vids[$type])) {
    $vids[$type] = array();
    $result = db_query("SELECT vid FROM {vocabulary_node_types} WHERE type = '%s'", $type);
    while ($vid = db_result($result)) {
      $vids[$type][] = $vid;
    }
  }

  return $vids[$type];
}

/**
 * @param $uid
 * @return bool
 */
function badges_poll_votes_taxonomy_check($uid, $arguments = array())
{
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    // bottom level categories
    $tblt = array();
    $vids = taxonomy_node_type_vocabularies();
    foreach ($vids as $vid) {
      $tblt = array_merge($tblt, taxonomy_bottom_level_terms($vid));
    }

    $result = db_query("SELECT pv.uid, COUNT(DISTINCT(tn.nid)) AS nids, COUNT(DISTINCT(tn.tid)) AS tids FROM {poll_votes} pv INNER JOIN {term_node} tn ON tn.nid = pv.nid WHERE tn.tid IN (" . db_placeholders($tblt) . ") GROUP BY pv.uid ORDER BY pv.uid", $tblt);
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = array('nids' => $row['nids'], 'tids' => $row['tids']);
    }
  }

  return isset($cache[$uid]) ?
    ($cache[$uid]['nids'] >= $arguments['nids']) &&
      ($cache[$uid]['tids'] >= $arguments['tids']) : false;
}

/**
 * @param array $uids
 * @return array
 */
function badges_poll_votes_taxonomy_check_multiple($uids = array(), $arguments = array())
{
  $output = array();

  foreach ($uids as $uid) {
    $output[$uid] = badges_poll_votes_taxonomy_check($uid, $arguments);
  }

  return $output;
}
