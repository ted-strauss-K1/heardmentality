<?php

/**
 * Implementation of hook_badges()
 *
 * @return array
 */
function badges_statistics_badges()
{
  $badges = array();

  $badges['statistics_bronze'] = array(
    'function' => 'badges_statistics_check',
    'function multiple' => 'badges_statistics_check_multiple',
    'name' => t('Notable Issue'),
    'info' => t('Posted issue with 1,000 views'),
    'type' => 'bronze',
    'arguments' => array('views' => 1000),
  );
  $badges['statistics_silver'] = array(
    'function' => 'badges_statistics_check',
    'function multiple' => 'badges_statistics_check_multiple',
    'name' => t('Popular Issue'),
    'info' => t('Posted issue with 2,500 views'),
    'type' => 'silver',
    'arguments' => array('views' => 2500),
  );
  $badges['statistics_gold'] = array(
    'function' => 'badges_statistics_check',
    'function multiple' => 'badges_statistics_check_multiple',
    'name' => t('Provocative Issue'),
    'info' => t('Posted issue with 10,000 views'),
    'type' => 'gold',
    'arguments' => array('views' => 10000),
  );

  return $badges;
}

/**
 * @param $uid
 * @return bool
 */
function badges_statistics_check($uid, $arguments = array())
{
  static $cache;

  if (is_null($cache)) {
    $cache = array();

    $result = db_query("SELECT n.uid, MAX(nc.totalcount) count FROM {node} n LEFT JOIN {node_counter} nc ON n.nid = nc.nid GROUP BY n.uid");
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']] = $row['count'];
    }
  }

  return isset($cache[$uid]) ? $cache[$uid] >= $arguments['views'] : false;
}

/**
 * @param array $uids
 * @return array
 */
function badges_statistics_check_multiple($uids = array(), $arguments = array())
{
  $output = array();

  foreach ($uids as $uid) {
    $output[$uid] = badges_statistics_check($uid, $arguments);
  }

  return $output;
}
