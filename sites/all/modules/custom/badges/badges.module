<?php

/**
 * List of badges types
 *
 * @return array
 */
function badges_types($type = false) {
  static $types = null;

  if (is_null($types)) {
    $types = module_invoke_all('badges_types');
  }

  if ($type !== false) {
    return $types[$type];
  }

  return $types;
}

/**
 * Implementation of hook_badges_types()
 *
 * @return array
 */
function badges_badges_types() {
  return array(
    'bronze'  => t('Bronze'),
    'silver'  => t('Silver'),
    'gold'    => t('Gold'),
  );
}

/**
 * List of badges
 *
 * @return array
 */
function badges_list($badge = false) {
  static $badges = null;

  if (is_null($badges)) {
    $badges = array();
    // to check types
    $types = badges_types();
    $types_names = array_keys($types);
    $types_default = array_shift($types_names);

    foreach (module_invoke_all('badges') as $name => $info) {
      $badges[$name] = $info + array(
        'function'          => '_badges_check',
        'function multiple' => '_badges_check_multiple',
        'count'             => 1,
        'info'              => '',
      );
      // name
      if (!isset($info['name']) || empty($info['name'])) {
        $badges[$name]['name'] = ucwords(str_replace('_', ' ', $name));
      }
      // to check types
      $type = $badges[$name]['type'];
      if (!isset($types[$type])) {
        $badges[$name]['type'] = $types_default;
      }
    }
  }

  // get specific badge
  if ($badge !== false) {
    return isset($badges[$badge]) ? $badges[$badge] : false;
  }

  return $badges;
}

/**
 * Default function to check the badge permission
 *
 * @param int $uid
 * @return bool
 */
function _badges_check($uid = 0) {
  return false;
}

/**
 * Default function to check the badge permission for multiple users
 *
 * @param array $uids
 * @return array
 */
function _badges_check_multiple($uids = array()) {
  $output = array();

  foreach ($uids as $uid) {
    $output[$uid] = false;
  }

  return $output;
}

/**
 * Badge add
 *
 * @param $uid
 * @param $badge
 */
function badges_add($uid, $badge) {
  db_query("INSERT INTO {badges} SET uid = '%d', badge = '%s', date_added = '%s'", $uid, $badge, date("y-m-d H:i:s"));
  if (module_exists('rules')) {
    rules_invoke_event('badges_grant', user_load($uid), $badge);
  }
}

/**
 * @param array $p
 */
function badges_del($p = array()) {
  if (empty($p)) {
    return;
  }
  $query = "DELETE FROM {badges} WHERE 1";
  $params = array();

  foreach ($p as $key => $val) {
    if (in_array($key, array('id', 'uid', 'badge'))) {
      $query .= " AND ".$key." = '%s'";
      $params[] = $val;
    }
  }

  db_query($query, $params);
}

/**
 * Count the number of the badges granted to user
 *
 * @param $badge
 */
function badges_count($badge, $uid = false) {
  static $counts = array();

  if (!isset($counts[$badge])) {
    $counts[$badge] = array();

    $result = db_query("SELECT u.uid, IFNULL(COUNT(*),0) AS count FROM {users} u INNER JOIN {badges} b ON b.uid = u.uid AND b.badge = '%s' GROUP BY u.uid", $badge);
    while ($row = db_fetch_object($result)) {
      $counts[$badge][$row->uid] = $row->count;
    }
  }
  // count for specific user
  if ($uid !== false) {
    return isset($counts[$badge][$uid]) ? $counts[$badge][$uid] : 0;
  }

  return $counts[$badge];
}

/**
 * @param $item
 * @param $badge
 * @return bool
 */
function badges_grant($item, $badge) {
  // get badge
  $badge_data = badges_list($badge);
  if ($badge_data === false) {
    return false;
  }

  if (is_array($item)) {
    $function = $badge_data['function multiple'];
    $results = $function($item);
    foreach ($results as $uid => $result) {
      if ($result && (($badge_data['count'] === true) || ($badge_data['count'] > badges_count($badge, $uid)))) {
        badges_add($uid, $badge);
      }
    }
  } else {
    $function = $badge_data['function'];
    $result = $function($item);
    $uid = $item;
    if ($result && (($badge_data['count'] === true) || ($badge_data['count'] > badges_count($badge, $uid)))) {
      badges_add($uid, $badge);
    }
  }
}


 // todo test
function badges_badges() {
  return array(
//    'coolbadge' => array(
//      'function' => 'coolbadge_check',
//    ),
  );
}

function coolbadge_check($uid) {
  return true;
}


/**
 * Define a permission name
 */
define('BADGES_ADMIN', 'Administer Badges');

/**
 * Implementation of hook_perm()
 *
 * @return array
 */
function badges_perm() {
  return array(BADGES_ADMIN);
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function badges_menu() {
  $menu = array();

  $menu['badges'] = array(
    'title'            => t('Badges'),
    'page callback'    => 'theme',
    'page arguments'   => array('badges_list'),
    'access callback'  => true,
  );

  return $menu;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function badges_preprocess_page(&$vars) {

}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function badges_theme() {
  $theme = array();

  $theme['badges_list'] = array(
    'arguments' => array('sort' => 0),
  );

  return $theme;
}

/**
 * Callback for "badges"
 */
/**
 * Theme for badges list
 *
 * @code sort 0 -- by count DESC
 * @code sort 1 -- by count ASC
 * @code sort 2 -- by name DESC, count DESC
 * @code sort 3 -- by name ASC, count DESC
 *
 * @return string
 */
function theme_badges_list($sort = 0) {
  $output = '<div class="badges">';

  $query = "SELECT badge name, COUNT(*) count FROM {badges} GROUP BY badge ";

  switch ($sort) {
    case 0:
      $query .= "ORDER BY COUNT(*) DESC";
    break;
    case 1:
      $query .= "ORDER BY COUNT(*) ASC";
    break;
    case 2:
    case 3:
      $keys = array_keys(badges_types());
      $query .= 'ORDER BY (CASE badge ';
      if ($sort == 2) {
        krsort($keys);
      }
      $i=-1;
      foreach ($keys as $key) {
        $i++;
        $query .= sprintf("WHEN '%s' THEN %d ", $key, $i);
      }
      $query .= 'ELSE '.$i.' END) ASC, COUNT(*) DESC';
    break;
  }

  $badges = badges_list();
  $result = db_query($query);
  while ($badge = db_fetch_object($result)) {
    $badge_item = $badges[$badge->name];
    if (!$badge_item) {
      continue;
    }
    $output .= sprintf('
      <div class="medal"><span class="badge-circle %s %s" id="medal1" title="%s Medal">&nbsp;</span>&nbsp;x&nbsp;%d&nbsp;&nbsp;%s <p>%s</p></div>',
      $badge->name, $badge_item['type'], badges_types($badge_item['type']), $badge->count, $badge_item['name'], $badge_item['info']
    );
  }
  $output .= '</div>';
  return $output;
}


return;











/*
 * Get user badges
 */
function badges_get_userbadges($uid) {
  static $values = array();
  if (!isset($values[$uid])) {
    $list = array(
      '#stat' => array(),
      '#list' => array(),
    );
    $result = db_query("SELECT mb.*, mbt.name AS badgetype FROM {module_badges_userbadges} mbu INNER JOIN {module_badges} mb ON mb.id = mbu.badge_id RIGHT OUTER JOIN {module_badges_types} mbt ON mbt.id = mb.type WHERE mb.status = '%d' AND mbu.uid = '%d' ORDER BY mbt.id DESC", 1, $uid);
    while ($row = db_fetch_array($result)) {
      if (!isset($list['#stat'][$row['badgetype']])) {
        $list['#stat'][$row['badgetype']] = 0;
      }
      $list['#stat'][$row['badgetype']]++;
      if (!isset($list['#list'][$row['id']])) {
        $list['#list'][$row['id']] = $row;
        $list['#list'][$row['id']]['#count'] = 0;
      }
      $list['#list'][$row['id']]['#count']++;
    }
    $values[$uid] = $list;
  }
  return $values[$uid];
}

