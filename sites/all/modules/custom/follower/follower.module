<?php

/**
 * Add required js
 *
 * @param $vars
 */
function follower_preprocess_page(&$vars) {
  drupal_add_js(drupal_get_path('module', 'follower') . '/follower.js');
  drupal_add_js('misc/jquery.form.js');
}

/**
 * Follower path
 */
define('FOLLOWER_PATH', 'follower');

/**
 * Follower Relation ID
 */
define('FOLLOWER_RELATION_ID', 1);

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function follower_menu() {
  $menu = array();

  $menu[FOLLOWER_PATH] = array(
    'page callback'    => 'follower_page',
    'page arguments'   => array(1),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );
  $menu[FOLLOWER_PATH . '/save'] = array(
    'page callback'    => 'follower_page_save',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function follower_theme() {
  $theme = array();

  $theme['follower_button'] = array(
    'arguments' => array(
      'follow' => NULL,
    ),
  );

  return $theme;
}

/**
 * Follower Button theme call
 *
 * @param $follow
 *
 * @return string
 */
function theme_follower_button($follow) {
  global $user;
  if (user_is_logged_in() && $user->uid != $follow->uid) {
    $text = follower_status($follow->uid) === FALSE ? __('Follow', array('@code' => 'follower-01')) : __('Unfollow', array('@code' => 'follower-02'));
    return l($text, FOLLOWER_PATH . '/' . $follow->uid . '/', array(
      'attributes' => array(
        'class' => 'button light follower',
        'name'  => $follow->uid,
      )
    ));
  }
}

/**
 * Check if user follows another
 *
 * @param        $follow_uid
 * @param string $uid
 *
 * @return bool
 */
function follower_status($follow_uid, $uid = FALSE) {
  if ($uid === FALSE) {
    global $user;
    $uid = $user->uid;
  }
  return db_result(db_query("SELECT rid FROM {user_relationships} WHERE requester_id = '%d' AND requestee_id = '%d'", $uid, $follow_uid));
}

/**
 * Follower popup contents
 *
 * @param $follow_uid
 */
function follower_page($follow_uid) {
  $form = drupal_get_form('follower_form', user_load($follow_uid));
  $response = array('text' => $form);
  $response += follower_strings();
  print json_encode($response);
  exit;
}

/**
 * Strings for module
 *
 * @return array
 */
function follower_strings() {
  return array(
    'follow'       => __('Follow', array('@code' => 'follower-03')),
    'unfollow'     => __('Unfollow', array('@code' => 'follower-04')),
    'followtext'   => __('You now follow this user', array('@code' => 'follower-05')),
    'unfollowtext' => __('You now unfollow this user', array('@code' => 'follower-06')),
  );
}

/**
 * Follower form
 *
 * @param $form
 * @param $follow
 *
 * @return array
 */
function follower_form(&$form, $follow) {
  $form = array();

  $form['#attributes'] = array(
    'class' => 'follower_form'
  );
  $form['#action'] = '/' . FOLLOWER_PATH . '/save';

  if (user_is_logged_in()) {
    $text = follower_status($follow->uid) === FALSE ?
      __('Are you sure you want to follow this user?', array('@code' => 'follower-07')) :
      __('Are you sure you want to unfollow this user?', array('@code' => 'follower-08'));
    $form['title'] = array(
      '#type'  => 'markup',
      "#value" => $text,
    );
  }

  $form['follow_uid'] = array(
    '#type'  => 'hidden',
    "#value" => $follow->uid,
  );

  return $form;
}

/**
 * Follower form submit
 */
function follower_page_save() {
  global $user;
  $post = $_POST;
  if (($rid = follower_status($post['follow_uid'])) === FALSE) {
    $relationship = new stdClass();
    $relationship->requester = $user;
    $relationship->requestee = user_load($post['follow_uid']);
    $relationship->type = user_relationships_type_load(FOLLOWER_RELATION_ID);
    user_relationships_request_relationship($relationship);

    # actions
    function_exists('action_queue') && action_queue(array(
      'uid'         => $relationship->requester->uid,
      'operation'   => 'follow',
      'entity_id'   => $relationship->requestee->uid,
      'entity_type' => 'user',
    ));

  }
  else {
    $relationship = user_relationships_load($rid);
    user_relationships_delete_relationship($relationship, $user);

    # actions
    function_exists('action_queue') && action_queue(array(
      'uid'         => $relationship->requester_id,
      'operation'   => 'unfollow',
      'entity_id'   => $relationship->requestee_id,
      'entity_type' => 'user',
    ));
  }
  $response = follower_strings() + array('rel' => $relationship);
  print json_encode($response);
}

/**
 * Get followers: to be used in outer modules
 *
 * @param      $uid
 * @param bool $count
 * @param bool $limit
 *
 * @return array|int
 */
function follower_get_followers($uid, $count = FALSE, $limit = FALSE) {
  return follower_get_list($uid, 'requester_id', $count, $limit);
}

/**
 * Get following: to be used in outer modules
 *
 * @param      $uid
 * @param bool $count
 * @param bool $limit
 *
 * @return array|int
 */
function follower_get_following($uid, $count = FALSE, $limit = FALSE) {
  return follower_get_list($uid, 'requestee_id', $count, $limit);
}

/**
 * @param      $uid
 * @param      $key
 * @param bool $count
 * @param bool $limit
 *
 * @return array|int
 */
function follower_get_list($uid, $key, $count = FALSE, $limit = FALSE) {
  $key2 = 'requestee_id' == $key ? 'requester_id' : 'requestee_id';

  $query = "SELECT " . ($count ? "COUNT(DISTINCT u.uid)" : "ur.*") . " " . "FROM {user_relationships} ur " . "INNER JOIN {users} u ON u.uid = ur.$key AND u.status = 1 " . "WHERE ur.$key2 = '%s' " . ($count ? "" : ($limit ? "LIMIT " . $limit : ""));
  $result = db_query($query, $uid);

  if ($count) {
    return (int) db_result($result);
  }

  // get list
  $uids = array();
  $list = array();
  while ($relation = db_fetch_object($result)) {
    $list[] = $relation;
    $uids[] = $relation->requestee_id;
    $uids[] = $relation->requester_id;
  }

  // get userdata
  $users = follower_get_userdata($uids);
  foreach ($list as &$relation) {
    foreach (array(
               'requester',
               'requestee'
             ) as $key) {
      $relation->{$key} = $users[$relation->{$key . '_id'}];
    }
  }

  return $list;
}

/**
 * @param $uids
 *
 * @return array|mixed
 */
function follower_get_userdata($uids) {
  static $users = array();

  $load = array();
  foreach ($uids as $uid) {
    if (!isset($users[$uid])) {
      $load[] = $uid;
    }
  }
  if (empty($uids)) {
    return array();
  }
  if ($load) {
    $result = db_query("SELECT * FROM {users} WHERE uid IN (" . db_placeholders($load) . ")", $load);
    while ($user = db_fetch_object($result)) {
      $users[$user->uid] = $user;
    }
  }

  return array_intersect_key($users, array_flip($uids));
}
