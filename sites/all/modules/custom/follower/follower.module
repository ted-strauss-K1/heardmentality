<?php

/**
 * Add required js
 *
 * @param $vars
 */
function follower_preprocess_page(&$vars)
{
  drupal_add_js(drupal_get_path('module', 'follower') . '/follower.js');
  drupal_add_js('misc/jquery.form.js');
}

/**
 * Follower path
 */
define('FOLLOWER_PATH', 'follower');

/**
 * Follower Relation ID
 */
define('FOLLOWER_RELATION_ID', 1);

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function follower_menu()
{
  $menu = array();

  $menu[FOLLOWER_PATH] = array(
    'page callback' => 'follower_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[FOLLOWER_PATH . '/save'] = array(
    'page callback' => 'follower_page_save',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function follower_theme()
{
  $theme = array();

  $theme['follower_button'] = array(
    'arguments' => array(
      'follow' => NULL,
    ),
  );

  return $theme;
}

/**
 * Follower Button theme call
 *
 * @param $follow
 * @return string
 */
function theme_follower_button($follow)
{
  global $user;
  if (user_is_logged_in() && $user->uid != $follow->uid) {
    $text = follower_status($follow->uid) === false ? t('Follow') : t('Unfollow');
    return l(t($text), FOLLOWER_PATH . '/' . $follow->uid . '/',
      array('attributes' => array(
        'class' => 'button light follower',
        'name' => $follow->uid,
      ))
    );
  }
}

/**
 * Check if user follows another
 *
 * @param $follow_uid
 * @param string $uid
 * @return bool
 */
function follower_status($follow_uid, $uid = false)
{
  if ($uid === false) {
    global $user;
    $uid = $user->uid;
  }
  return db_result(db_query("SELECT rid FROM {user_relationships} WHERE requester_id = '%d' AND requestee_id = '%d'", $uid, $follow_uid));
}

/**
 * Follower popup contents
 *
 * @param $follow_uid
 */
function follower_page($follow_uid)
{
  $form = drupal_get_form('follower_form', user_load($follow_uid));
  $response = array('text' => $form);
  $response += follower_strings();
  print json_encode($response);
  exit;
}

/**
 * Strings for module
 *
 * @return array
 */
function follower_strings()
{
  return array(
    'follow' => t('Follow'),
    'unfollow' => t('Unfollow'),
    'followtext' => t('You now follow this user'),
    'unfollowtext' => t('You now unfollow this user'),
  );
}

/**
 * Follower form
 *
 * @param $form
 * @param $follow
 * @return array
 */
function follower_form(&$form, $follow)
{
  $form = array();

  $form['#attributes'] = array(
    'class' => 'follower_form'
  );
  $form['#action'] = '/' . FOLLOWER_PATH . '/save';

  if (user_is_logged_in()) {
    $text = follower_status($follow->uid) === false ? t('follow') : t('unfollow');
    $text = t('Are you sure you want to ') . $text . t(' this user?');
    $form['title'] = array(
      '#type' => 'markup',
      "#value" => $text,
    );
  }

  $form['follow_uid'] = array(
    '#type' => 'hidden',
    "#value" => $follow->uid,
  );
  $form['rtid'] = array(
    '#type' => 'hidden',
    '#default_value' => FOLLOWER_RELATION_ID,
  );

  return $form;
}

/**
 * Follower form submit
 */
function follower_page_save()
{
  global $user;
  $post = $_POST;
  if (($rid = follower_status($post['follow_uid'])) === false) {
    $relationship = new stdClass();
    $relationship->requester = $user;
    $relationship->requestee = user_load($post['follow_uid']);
    $relationship->type = user_relationships_type_load($post['rtid']);
    user_relationships_request_relationship($relationship);

    // TODO to rules!!!!!
    if (module_exists('activity_stream')) {
      activity_stream_add_activity(ACTIVITY_STREAM_FOLLOW, array('uid' => $relationship->requestee->uid));
    }

  } else {
    $relationship = user_relationships_load($rid);
    user_relationships_delete_relationship($relationship, $user);
  }
  $response = follower_strings();
  print json_encode($response);
}

/**
 * Get followers: to be used in outer modules
 *
 * @param $uid
 * @param bool $count
 * @param bool $limit
 * @return array|int
 */
function follower_get_followers($uid, $count = false, $limit = false)
{
  return user_relationships_load(
    array(
      'approved' => 1,
      'requestee_id' => $uid,
      'rtid' => FOLLOWER_RELATION_ID,
    ),
    array(
      'include_user_info' => 1,
      'order' => 1,
    ) + (
    $count !== false ?
      array('count' => true) : (
    $limit === false ?
      array() :
      array('limit' => $limit)
    )
    )
  );
}

/**
 * Get following: to be used in outer modules
 *
 * @param $uid
 * @param bool $count
 * @param bool $limit
 * @return array|int
 */
function follower_get_following($uid, $count = false, $limit = false)
{
  return user_relationships_load(
    array(
      'approved' => 1,
      'requester_id' => $uid,
      'rtid' => FOLLOWER_RELATION_ID,
    ),
    array(
      'include_user_info' => 1,
      'order' => 1,
    ) + (
    $count !== false ?
      array('count' => true) : (
    $limit === false ?
      array() :
      array('limit' => $limit)
    )
    )
  );
}