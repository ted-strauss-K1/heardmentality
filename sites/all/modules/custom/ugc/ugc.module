<?php

/*
 * Implementation of hook_init()
 */
function ugc_init() {
  global $base_url, $user;
  drupal_add_js(array('base_url' => $base_url), 'setting');
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    drupal_add_js(array('nid' => arg(1)), 'setting');
  }
  drupal_add_js(array('uid' => user_is_logged_in() ? $user->uid : 0), 'setting');
}

/*
 * Save translations for UI to Drupal.settings
 *
 * @warning do not use t()
 */
function ugc_translate($key, $value) {
  static $t = array();
  if (!isset($t[$key])) {
    $t[$key] = $value;
    drupal_add_js(array('t' => array($key => t($value))), 'setting');
  }
}



/*
 * Custom filter
 *
 * @see array_filter
 */
function word_array_filter($word = '') {
  return !empty($word) && (strlen($word)>=3);
}

/*
 * Get taxonomy term id by name and module
 */
function ugc_taxonomy_term_id($name, $module) {
  return db_result(db_query("SELECT td.tid FROM {term_data} td INNER JOIN {vocabulary} v ON v.vid = td.vid WHERE LOWER(td.name) = LOWER('%s') AND LOWER(v.module) = LOWER('%s')", $name, $module));
}

/*
 * Get input language
 *
 * @see issue_translator
 */
function ugc_detect_language($string) {
  module_load_include('inc', 'issue_translator', 'gtranslate-api-php/googletranslate.class');
  $gt = new GoogleTranslateWrapper();
  $language = $gt->detectLanguage($string);
  $language = $language['language'];
  $language = $language != '' ? $language : 'en';
  return $language;
}

/*
 * Truncate the string w/ellipsis
 */
function ugc_truncate($string, $length, $stopanywhere = false) {
  if (strlen($string) > $length) {
    $string = substr($string,0,($length -3));
    if ($stopanywhere) {
      $string .= '...';
    } else{
      $string = substr($string,0,strrpos($string,' ')).'...';
    }
  }
  return $string;
}

/*
 * TODO - remove
 */
function drupal_link_color($uid, $nid) {
  return false != db_result(db_query("SELECT COUNT(*) AS count FROM {poll_votes} WHERE nid='%d' AND uid='%d'", $uid, $nid)) ? 'font-weight:bold' : '';
}

/*
 * Range of dates - Y-m-d
 */
function dates_range($date1, $date2) {
  $range = array();
  if (!empty($date1) && !empty($date2) && $date1 < $date2) {
    $date1 = strtotime($date1);
    $date2 = strtotime($date2);
    $range[] = date('Y-m-d', $date1);
    while ($date1 < $date2) {
      $date1 = strtotime('+1 day', $date1);
      $range[] = date('Y-m-d', $date1);
    }
  }
  return $range;
}

/*
 * Get loginbox class
 */
function ugc_loginbox_class($force = false) {
  return !$force && user_is_logged_in() ? '' : 'openlogin_box';
}

/*
 * Converts time to string like "3 hour(s) ago"
 */
function ugc_time_interval($time) {
  # dates/interval
  $date_now = new DateTime("now");
  $date = new DateTime($time);
  $interval = $date->diff($date_now);
  # convert to string
  if ($interval->y != 0) {
    return $interval->y . ' year' . ($interval->y > 1 ? 's' : '') . ' ago';
  }
  if ($interval->m != 0) {
    return $interval->m . ' month' . ($interval->m > 1 ? 's' : '') . ' ago';
  }
  if ($interval->d != 0) {
    return $interval->d . ' day' . ($interval->d > 1 ? 's' : '') . ' ago';
  }
  if ($interval->h != 0) {
    return $interval->h . ' hour' . ($interval->h > 1 ? 's' : '') . ' ago';
  }
  if ($interval->i != 0) {
    return $interval->i . ' minute' . ($interval->i > 1 ? 's' : '') . ' ago';
  }
  return 'just now';
}