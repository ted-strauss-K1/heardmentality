<?php


/*
 * Implementation of hook_uses_points_actions()
 */
function issue_uses_points_actions() {
  return array('ansquestion', 'addquestion');
}

/**
 * @file
 * Issue Poll -A sophisticated issue module for voting and analysis report generating.
 */
#module_load_include('inc', 'issue', 'issue.theme.inc');

/* * ************************
 * Content Type: Issue
 */





/**
 * Implementation of hook_insert().
 */
function issue_insert($node) {
  _issue_insert_choices($node);
}

/**
 * Implementation of hook_update().
 */
function issue_update($node) {
  db_query("
    UPDATE {issue}
    SET
      active = %d,
      max_choices = %d,
      algorithm = '%s',
      use_list = %d,
      show_votes = %d,
      start_date = '%s',
      end_date = '%s',
      writeins = %d,
      show_writeins = %d,
      question = '%s'
    WHERE nid = %d", !$node->settings['close'], $node->settings['max_choices'], $node->settings['algorithm'], $node->settings['use_list'], $node->settings['show_votes'], $node->settings['start_date'] ? strtotime($node->settings['start_date']) : 0, $node->settings['end_date'] ? strtotime($node->settings['end_date']) : 0, $node->settings['writeins'], $node->settings['show_writeins'], isset($node->question) ? $node->question : '', $node->nid
  );
  _issue_insert_choices($node);
  votingapi_recalculate_results('issue', $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function issue_delete($node) {
  db_query('DELETE FROM {issue} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {issue_choices} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {issue_electoral_list} WHERE nid = %d', $node->nid);
  yn_vote_delete($node->nid, null, 'issue');
  _votingapi_delete('cache', array('content_id' => $node->nid, 'content_type' => 'issue'));
}

/*
 * Implementation of hook_load()
 */

function issue_load($node) {
  # issue object to return
  $issue = db_fetch_object(db_query('SELECT * FROM {issue} WHERE nid = %d', $node->nid));


  $issue->choice = array();
  $issue->writein_choices = 0;
  $result = db_query('SELECT cid, weight, label, writein FROM {issue_choices} WHERE nid = %d ORDER BY weight', $node->nid);
  while ($choice = db_fetch_array($result)) {
    $issue->choice[$choice['cid']] = $choice;
    if ($choice['writein'] == 1) {
      $issue->writein_choices++;
    }
  }
  $issue->choices = count($issue->choice);

  $result = db_query("
    SELECT value
    FROM {votingapi_cache}
    WHERE
      content_type = 'issue' AND
      content_id = %d AND
      tag = '_issue' AND
      function = 'total_votes'", $node->nid);
  if ($cache = db_fetch_object($result)) {
    // Found total votes in the cache.
    $issue->votes = $cache->value;
  }
  else {
    $issue->votes = 0;
  }
  list($issue->voted, $issue->cancel_vote) = _issue_user_voted($node->nid);
  return $issue;
}

/**
 * Implementation of hook_validate().
 */
function issue_validate($node, &$form) {
  $node->choice = array_values($node->choice);
  // TODO: verify if this hack is still needed in Drupal 6.
  // Start keys at 1 rather than 0.
  array_unshift($node->choice, '');
  unset($node->choice[0]);
  // Check for at least two choices.
  $real_choices = 0;
  // TODO: take out _POST
  foreach ($_POST['choice'] as $i => $choice) {
    if ($choice['label'] != '') {
      $real_choices++;
    }
  }
  if ($real_choices < 2) {
    form_set_error("choice][$real_choices][label", t('You must fill in at least two choices.'));
  }
  // Validate max choices since it has #DANGEROUS_SKIP_CHECK set to true.
  if ($node->settings['max_choices'] < 0) {
    form_set_error('settings][max_choices]', t('Maximum choices must be a non-negative integer.'));
  }
  if ($node->settings['max_choices'] > $real_choices) {
    form_set_error('settings][max_choices]', t('Maximum choices cannot be larger than the number of choices submitted.'));
  }
  // Validate dates.
  if (!empty($node->settings['start_date']) && strtotime($node->settings['start_date']) <= 0) {
    form_set_error('settings][start_date', t('You have to specify a valid starting date.'));
  }
  if (!empty($node->settings['end_date']) && strtotime($node->settings['end_date']) <= 0) {
    form_set_error('settings][end_date', t('You have to specify a valid ending date.'));
  }
  if (!empty($node->settings['end_date']) && $node->settings['end_date'] < $node->settings['start_date']) {
    form_set_error('settings][end_date', t('Ending date cannot be before the starting date.'));
  }
}

/*
 * Content Type: Issue
 * ********************** */

function issue_callback_helper() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  // Enable the submit/validate handlers to determine whether AHAH-submittted.
  $form_state['ahah_submission'] = TRUE;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  return $form;
}
