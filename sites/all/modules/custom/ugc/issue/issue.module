<?php

@require_once('issue.forms.inc');

/**
 * Content type: poll
 *
 * @note
 *  We're not using the drupal's node hooks there
 *  b/c node type is cck-exported and not created within this module
 *
 * TODO get_tnid() -- remove
 * TODO issue_suggest_form - refactor
 *
 */

/*
 * Implementation of hook_help().
 */
function issue_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#issue':
      return t('');
    break;
  }
}

/*
 * Implementation of hook_init()
 */
function issue_init() {
  drupal_add_css(drupal_get_path('module', 'poll') . '/poll.css');
  drupal_add_js(drupal_get_path('module', 'issue') . '/issue.js');

  // TODO -- refactor
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/filter.js');
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/common.js');
  if (module_exists('jquery_ui')) {
    jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));
  }
  drupal_add_js(drupal_get_path('module', 'question') . '/scripts/question.js');
}

/*
 * Permission to view an issue
 */
define('ISSUE_VIEW', 'View Issue');

/*
 * Permission to edit an issue
 */
define('ISSUE_EDIT', 'Edit Issue');

/*
 * Permission to edit own issue
 */
define('ISSUE_EDIT_OWN', 'Edit Own Issue');

/*
 * Permission to create an issue
 */
define('ISSUE_CREATE', 'Create Issue');

/*
 * Implementation of hook_perm()
 */
function issue_perm() {
  return array(ISSUE_VIEW, ISSUE_EDIT, ISSUE_EDIT_OWN, ISSUE_CREATE);
}

/*
 * Implementation of hook_access()
 */
function issue_access($op, $node, $account) {
  switch( $op ) {
    case 'create' : return user_access(ISSUE_CREATE, $account);
    case 'view'   : return user_access(ISSUE_VIEW, $account);
    case 'update' : return user_access(ISSUE_EDIT, $account) || ($node->uid == $account->uid && user_access(ISSUE_EDIT_OWN, $account));
    default     : return user_access(ISSUE_CREATE, $account);
  }
}

/*
 * Implementation of hook_form()
 * TODO -- chek if it's used somewhare
 *
  $form = array();

  // Only add javascript once, even if _form is called multiple times.
  static $add_js;
  if (!$add_js) {
    // Pass translatable strings
    drupal_add_js(
            array(
      'advPoll' => array(
        'remove' => t('Remove'),
        'addChoice' => t('Add choice'),
        'noLimit' => t('No limit')
      )
            ), 'setting');
    drupal_add_js(drupal_get_path('module', 'issue') . '/issue-form.js', 'module');
    drupal_add_css(drupal_get_path('module', 'issue') . '/issue.css', 'module');
    $add_js = TRUE;
  }

  $type = node_get_types('type', $node);
  $editing = isset($node->nid);

  $form['title'] = array(
    '#type' => 'textfield',
    '#maxlength' => 100,
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  $form['body_field']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#required' => FALSE,
    '#default_value' => $node->body,
  );
  $form['body_field']['format'] = filter_form($node->format);
  
  return $form;
 *
 */
function issue_form() {
  //
}

/*
 * Implementation of hook_menu()
 */
function issue_menu() {
  $menu = array();
  
  $menu['issue/create'] = array(
    'title'             => 'Add an Issue',
    'page callback'     => 'issue_create',
    'access arguments'  => array(ISSUE_CREATE),
    'type'              => MENU_SUGGESTED_ITEM,
    'file'              => 'issue.pages.inc',
  );
  // issue/create/ahah/answer
  $menu['issue/create/ahah/answer'] = array(
    'title'             => 'Add an Issue',
    'page callback'     => 'issue_create_ahah_answer',
    'access arguments'  => array(ISSUE_CREATE),
    'type'              => MENU_SUGGESTED_ITEM,
    'file'              => 'issue.pages.inc',
  );
  $menu['issue/related'] = array(
    'title'             => 'Related Issues',
    'page callback'     => 'issue_related',
    'access arguments'  => array(ISSUE_CREATE),
    'type'              => MENU_SUGGESTED_ITEM,
    'file'              => 'issue.pages.inc'
  );






  $menu['issue/ahah/%/%'] = array(
    'title' => 'Issue Ahah Control',
    'page callback' => 'issue_ahah_callback',
    'access arguments' => array('issue list'),
    'page arguments' => array(2, 3),
  );
  $menu['issue/ajax/%/%'] = array(
    'title' => 'Insight View',
    'page callback' => 'issue_ajax',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(2, 3),
    'access callback' => true,
    'file' => 'issue.pages.inc',
  );

  $menu['issue/vote/ajax/submit/%'] = array(
    'page callback' => 'issue_vote_submit_ajax',
    'access arguments' => array('create issue'),
    'page arguments' => array(4),
    'type' => MENU_SUGGESTED_ITEM,
  );



  return $menu;
}

/*
 * Implementation of hook_nodeapi()
 */
function issue_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'poll') {
    switch ($op) {
      case 'validate' :
        _issue_validate($node);
        break;
      case 'presave' :
        _issue_presave($node);
        break;
      case 'insert' :
        _issue_insert($node);
        break;
      case 'update' :
        _issue_update($node);
        break;
      case 'delete' :
        _issue_delete($node);
        break;
      case 'load' :
        _issue_load($node);
        break;
      case 'view' :
        _issue_view($node);
        break;
    }
  }
  return;
}

/*
 * Validate the issue
 *
 * @see issue_nodeapi()
 */
function _issue_validate(&$node) {
  // TODO
}

/*
 * Presaving preparations of the issue
 *
 * @see issue_nodeapi()
 */
function _issue_presave(&$node) {
  // TODO
}

/*
 * Save the issue
 *
 * @see issue_nodeapi()
 */
function _issue_insert(&$node) {
  // TODO
}

/*
 * Update the issue
 *
 * @see issue_nodeapi()
 */
function _issue_update(&$node) {
  // TODO
}

/*
 * Delete the issue
 *
 * @see issue_nodeapi()
 */
function _issue_delete(&$node) {
  // TODO
}

/*
 * Load the issue
 *
 * @see issue_nodeapi()
 */
function _issue_load(&$node) {
  // TODO

  // $node->tnode = issue_get_translated_node($node->nid);
  // $node->tnid = $node->tnode->nid;
}

/*
 * View the issue
 *
 * @see issue_nodeapi()
 */
function _issue_view(&$node) {
  global $user, $base_url;
  # add js
  drupal_add_js(array('google_map_icons' => drupal_get_path('module', 'issue') . '/icons'), 'setting');

  # TODO -- refactor javascript
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/add_new_form.js');
  drupal_add_js(drupal_get_path('theme', 'heardmentalitylight') . '/javascripts/room_reservation.js');
  drupal_add_js(drupal_get_path('module', 'debate') . '/scripts/debate.js');
  drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/subtab.js');
  drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');
  drupal_set_html_head('<script>var uid="' . $user->uid . '";</script>');
  if ($user->initpop == 1 && $user->uid > 1) {
    drupal_add_js('$(document).ready(function () {
      loadeditquestion(gSitePath+"profile/edit/1","Edit Profile ");
    });', 'inline');
    $user_data = array('initpop' => 2);
    user_save($user, $user_data);
  }
  # make changes in node
  $node->context = $node->body;

  # TODO - remove the function
  # $node->style = drupal_link_color($user->uid, $node->nid);

  # replace the content with the special voting form
  $tnode = issue_get_translated_node($node->nid);
  $node->content['body'] = array(
    '#value' => drupal_get_form('issue_vote_form', $node),
  );
  /*
  if (user_is_logged_in()) {
    $tnode = issue_get_translated_node($node->nid);
    if ($tnode->allowvotes) {
      $node->content['body'] = array(
        '#value' => drupal_get_form('issue_add_vote', $node->nid),
      );
    } else {
      unset($node->content['body']);
      // suggest answer calculation here
      suggest_answer_replacement($node->nid);
      $node->content['body'] = array(
        '#value' => drupal_get_form('issue_edit_vote', $node->nid),
      );
    }
  } else {
    $node->content['body'] = array(
      '#value' => drupal_get_form('issue_add_vote', $node->nid),
    );
  }
  $node->allowvotes = $tnode->allowvotes;
  // selected radio button stays green
  if ($node->allowvotes == '' && arg(0)) {
    $radCss = 'jQuery(document).ready(function(){
                                jQuery("input[name=choice]:checked").parents("div.form-item").addClass("staygreen");
                                });';
    drupal_add_js($radCss, 'inline');
  }
  // selected radio button stays green
  // only for search issues
  //if (arg(0) == 'issues') {
  //votes
  $tnid = get_tnid($node->nid);
  $tnode = node_load($tnid);
  $node->tnid = $tnid;
  $voteCount = db_result(db_query("SELECT count(nid) as qcount FROM `poll_votes` where nid='" . $tnid . "'"));
  //debates

  $dr = arguments_get_list($tnid);
  $node->votecount = $voteCount;
  $node->totaldebates = $dr['#count'][TYPE_DEBATE];
  $node->totalresources = $dr['#count'][TYPE_RESOURCE];

  // categories
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }
  $node->catsubject = !empty($ctitle) ? rtrim(implode(",", $ctitle)) : 'none';
  $node->catarea = !empty($sctitle) ? rtrim(implode(",", $sctitle)) : 'none';
  $node->catdetail = !empty($ssctitle) ? rtrim(implode(",", $ssctitle)) : 'none';
  */
}

/*
 * Get translated node
 */
function issue_get_translated_node($nid, $node = true) {
  static $tnids = array();
  if (!isset($tnids[$nid])) {
    $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
    $tnids[$nid] = $res != 0 ? $res : $nid;
  }
  return $node ? node_load($tnids[$nid]) : $tnids[$nid];
}

/*
 * Get vote count
 */
function issue_get_votes($nid) {
  static $votes = array();
  if (!isset($votes[$nid])) {
    $vote = array();
    $vote['#all'] = 0;
    $result = db_query("SELECT chorder, IFNULL(COUNT(*),0) AS count FROM {poll_votes} where nid='%d' GROUP BY chorder ORDER BY chorder ASC", $nid);
    while ($row = db_fetch_object($result)) {
      $vote['#all'] += $row->count;
      $vote[$row->chorder] = $row->count;
    }
    $votes[$nid] = $vote;
  }
  return $votes[$nid];
}

/*
 * Get vote count
 */
function issue_get_uservotes($uid) {
  static $votes = array();
  if (!isset($votes[$uid])) {
    $votes[$uid] = (int)db_result(db_query("SELECT COUNT(*) FROM {poll_votes} WHERE uid = '%d'", $uid));
  }
  return $votes[$uid];
}





/*
 * Implementation of hook_theme()
 */
function issue_theme() {
  $theme = array();

  $theme['issue_content_bottom'] = array(
    'arguments'             => array('node' => NULL),
    'template'              => 'issue-content-bottom',
    'preprocess functions'  => array('issue_content_bottom_preprocess'),
  );
  $theme['issue_results_graph'] = array(
    'arguments'             => array('node' => NULL),
    'template'              => 'issue-results-graph',
    'preprocess functions'  => array('issue_results_graph_preprocess'),
  );
  $theme['issue_results_graph_highchart_filter'] = array(
    'arguments'             => array('node' => NULL),
    'file'                  => 'issue.theme.inc',
  );
  $theme['issue_results_insightview'] = array(
    'arguments'             => array('node' => NULL),
    //'file'                  => 'issue.theme.inc',
  );
  $theme['issue_results_graph_legend'] = array(
    'arguments'             => array('node' => NULL),
    'file'                  => 'issue.theme.inc',
  );
  $theme['issue_results_graph_highstock_history'] = array(
    'arguments'             => array('node' => NULL),
    'file'                  => 'issue.theme.inc',
  );
  $theme['issue_results_graph_gmap'] = array(
    'arguments'             => array('node' => NULL),
    'file'                  => 'issue.theme.inc',
  );
  $theme['issue_arguments'] = array(
    'arguments'             => array('node' => NULL),
    'file'                  => 'issue.theme.inc',
  );
  $theme['sub_loader'] = array(
    'arguments' => array('styles' => NULL),
    'file' => 'issue.theme.inc',
  );
  $theme['issue_debate_area'] = array(
    'template' => 'issue-debate-area',
    'arguments' => array(
      'arguments_form' => NULL,
      'debate_count' => 0,
      'resource_count' => 0,
      'choices' => array(),
      'nid' => 0,
    ),
  );

  $theme += _issue_theme();

  return $theme;
}

/*
 * Preprocess function for the issue_content_bottom
 */
function issue_content_bottom_preprocess(&$vars) {
  $vars['results'] = theme('issue_results_graph', $vars['node']);
  $vars['content'] = theme('issue_arguments', $vars['node']);
}

/*
 * Preprocess function for issue_results_graph
 */
function issue_results_graph_preprocess(&$vars) {
  // drupal_rebuild_theme_registry();
  // die('xx');
  $nid = $vars['node']->nid;
  $choices = issue_choices($nid);

  # Save choces' settings to js
  $choices_names = array();
  foreach ($choices as $choice) {
    $choices_names[] = $choice['short_answer'];
  }
  drupal_add_js(array('charts' => array('choices' => $choices_names)), 'setting');
  drupal_add_js(array('charts' => array('count' => count($choices))), 'setting');
  drupal_add_js(array('charts' => array('colors' => issue_colors(true))), 'setting');

  # Highchart Filter
  $vars['filter'] = theme('issue_results_graph_highchart_filter', $vars['node']);
  # Quick facts
  // TODO
  $vars['insightview'] = theme_issue_results_insightview($vars['node']);
  # $vars['insightview'] = theme('issue_results_insightview', $vars['node']);
  # Legend
  $vars['legend'] = theme('issue_results_graph_legend', $vars['node']);
  # Highchart History
  $vars['history'] = theme('issue_results_graph_highstock_history', $vars['node']);
  # Google map
  $vars['gmap'] = theme('issue_results_graph_gmap', $vars['node']);
}

/*
 * Quick facts
 *
 * TODO -
 */
function theme_issue_results_insightview(&$node) {
  # get the data
  $data = issue_results_graph_highchart_filter_data($node);

  $choices = issue_choices($node->nid);

  $totals_all = 0;
  $totals = &$data['']['#results'];
  foreach ($totals as $i => &$total) {
    $total = $total[$i];
    $totals_all += $total;
  }

  $list_total = array();
  $list_choices = array();
  foreach ($data as $key => &$dataset) {
    if ($key == '') {
      continue;
    }
    $results = $dataset['#results'];

    # get "27% of voters make between $150,000 - $299,999"
    # get "57% of votes for rumor are Hindu"
    $tmp_total = array();
    foreach ($results as $chorder => $counts) {
      foreach ($counts as $optkey => $count) {
        $tmp_total[$optkey] += $count;
        if ($dataset['#options'][$optkey] != 'undefined' && $count != 0) {
          $list_choices[$chorder.'-'.$optkey.'-'.$key] = round(100*$count/$totals[$chorder], 0);
        }
      }
    }

    foreach ($tmp_total as $optkey => $count) {
      if ($dataset['#options'][$optkey] != 'undefined' && $count != 0) {
        $list_total[$key.'-'.$optkey] = round(100*$count/$totals_all, 0);
      }
    }
  }
  arsort($list_total);
  arsort($list_choices);

  # output
  $output = array();
  #1
  $i = 0;
  foreach ($list_total as $key => $percent) {
    $key = explode('-', $key);
    $optkey = $key[1];
    $key = $key[0];

    switch ($key) {
      case 'age' :
        $output[] = $percent.'% '.t('of voters are').' '.t($data[$key]['#options'][$optkey]).' '.t('yo');
      break;
      case 'income' :
        $output[] = $percent.'% '.t('of voters make').' '.t($data[$key]['#options'][$optkey]);
        break;
      case 'gender' :
      case 'ethnicity' :
      case 'marital' :
      case 'sex_orient' :
      case 'education' :
      case 'religion' :
      default :
        $output[] = $percent.'% '.t('of voters are').' '.t($data[$key]['#options'][$optkey]);
      break;
    }
    if (++$i > 1) {
      break;
    }
  }

  $i = 0;
  foreach ($list_choices as $key => $percent) {
    $key = explode('-', $key);
    $chorder = $key[0];
    $optkey = $key[1];
    $key = $key[2];

    $text = '';
    foreach ($choices as $choice) {
      if ($choice['chorder'] == $chorder) {
        $text = $choice['short_answer'];
      }
    }
    $output[] = $percent.'% '.t('of votes for').' '.t($text).' '.t('are').' '.
($data[$key]['#options'][$optkey]);

    if (++$i > 3) {
      break;
    }
  } # get "57% of votes for rumor are Hindu"

  return '<span>'.implode('</span></br><span>', $output).'</span></br>';
}

/*
 * Load poll choices
 */
function issue_choices($nid) {
  static $choices = array();
  if (!isset($choices[$nid])) {
    $list = array();
    $result = db_query("SELECT pc.*, sa.short_answer FROM {poll_choices} pc LEFT JOIN {short_answers} sa ON sa.chorder = pc.chorder AND sa.qid = pc.nid  WHERE pc.nid = '%d' ORDER BY pc.chorder", $nid);
    while ($row = db_fetch_array($result)) {
      if (empty($row['short_answer'])) {
        $row['short_answer'] = $row['chtext'];
      }
      $list[] = $row;
    }
    $choices[$nid] = $list;
  }
  return $choices[$nid];
}

/*
 * Colors
 */
function issue_colors($index = false) {
  static $i = 0;
  static $colors = array();
  if (empty($colors)) {
    $colors += array(
      '#934d9e',
      '#FF7F00',
      '#50c0ac',
      '#0c6926',
      '#ef4c8d',
      '#362750',
      '#e1e43c',
      '#ef3d3b',
      '#3cc7f4',
      '#589a1c',
      '#C2499B',
      '#f89521',
      '#CC2027',
      '#55ba59',
      '#d5bc29',
      '#6ccbd5',
      '#43B649',
      '#F6EB16'
    );
  }
  if ($index === true) {
    return $colors;
  }
  if ($index !== false && isset($colors[$index])) {
    return $colors[$index];
  } else {
    $color = $colors[$i];
    $i = ($i+1) % count($colors);
    return $color;
  }
}




















function _issue_theme() {
  return array(
    'like_dislike_bar' => array(
      'arguments' => array(
        'pro' => NULL,
        'con' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),

    'issue_information' => array(
      'template' => 'issue-real-informations',
      'arguments' => array('nid' => NULL, 'created' => NULL, 'postedby' => NULL, 'subject' => NULL, 'area' => NULL, 'detail' => NULL, 'original_nid' => NULL, 'original_language' => NULL, 'orgLangKey' => NULL),
    ),
    'issue_result_analysis' => array(
      'arguments' => array('nid' => NULL),
    ),

    'popular_categories' => array(
      'template' => 'popular-categories',
      'arguments' => array('popular' => NULL),
    )
  );
}

/*
 * Drupal hooks
 * ********************** */



/* * ************************
 * Load data
 */









/*
 * Update Comment
 */



/*
 * Forms
 * ********************** */
function ahah_render($fields, $name) {
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];

  return drupal_render($new_form);
}



/* New Feature Ajax Submission */

function issue_vote_submit_ajax($type = '') {
  global $user;
//echo '<pre>'; print_r($form); exit;
  $nid = $_POST['nid_val'];
  $choice = $_POST['choice'] != '' ? $_POST['choice'] : -1;
  $default_vote = $_POST['def_vote'];

  // update vote time
  $date_time = date("y-m-d H:i:s", time());

  if ($type == 'edit') {
    // validation here
    if (!user_is_logged_in()) {

      $msg['message'] = t('You have to login to do this action!.');
    }
    else if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any of the choices.');
    }
    else if ($default_vote == $choice) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    }
    else {
      if ($user->uid) {
        db_query('update {poll_votes} set chorder=%d, date_voted = "%s" where nid=%d and uid=%d', $choice, $date_time, $nid, $user->uid);

        /* New SET NOTIFY LOG */
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $answer = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '%d' AND chorder = '%d'", $nid, $choice));
        $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $answer);
        set_notify_log($user->uid, $nid, 'change_answer', $variable);
        /* New SET NOTIFY LOG */
      }
      //minus one the value of previously voted choice
      db_query("UPDATE {poll_choices} SET chvotes = chvotes-1 WHERE nid = %d AND chorder = %d", $nid, $default_vote);
      // Add one to the votes.for new choices
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      cache_clear_all();


      $msg['message'] = t('Your vote has been updated');
      $msg['success'] = 1;
    }
  }
  else if ($type == 'add') {
    if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    }
    else {
      if ($user->uid) {
        $insert = db_query('INSERT INTO {poll_votes} (nid, chorder, uid, date_voted) VALUES (%d, %d, %d, "%s")', $nid, $choice, $user->uid, $date_time);
      }
      else {
        db_query("INSERT INTO {poll_votes} (nid, chorder, hostname, date_voted) VALUES (%d, %d, '%s', '%s')", $nid, $choice, ip_address(), $date_time);
      }

      // Add one to the votes.
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      /* New SET NOTIFY LOG */
      $form = array();
      $form['#nid'] = $nid;
      $form['#post']['choice'] = $choice;
      add_vote_notify($form);
      /* New SET NOTIFY LOG */

      cache_clear_all();
      if ($insert) {
        $msg['message'] = t('Your vote has been recorded');
        $msg['success'] = 1;
      }
      else {
        $msg['message'] = t('Your vote was not recorded, Try again later');
      }
    }
  }
  else {
    $msg['message'] = t('Error in poll voting');
  }
  print json_encode($msg);
}

/* New Feature Ajax Submission */

/**
 * Implementation of hook_form_alter().
 */
function issue_form_alter(&$form, $form_state, $form_id) {
  $res->field_filepath[0]['value'] = $file_im;
  if ($form_id == 'user_relationships_ui_request') {

    $form['#submit'][] = 'add_follow_notify';
  }
  if ($form_id == 'subscriptions_add_form') {
    $form['#submit'][] = 'add_subscription_notify';
  }
  if ($form_id == 'issue_vote_form') {
    // echo '<pre>';print_r($form);exit;
    $form['#submit'][] = 'choice_vote_date_update';
    $form['#submit'][] = 'add_vote_notify';
    $form['#submit'][] = 'chk_profile_complete';
    $form['#validate'][] = 'check_user_anonymous';
    //echo $form_id."<pre>";  print_r($form);exit;
  }
  if ($form_id == 'issue_edit_vote') {
    // $form['#action'] = 'qlite/view/'.$form['#nid'];
    $form['#submit'][] = 'choice_vote_date_update';
    $form['#submit'][] = 'chk_profile_complete';
  }
  if ($form_id == 'poll_node_form') {
    //$form['#after_build'][] = 'issue_after_build';
    $form['field_issue_state']['#access'] = false;
    $form['field_issue_city']['#access'] = false;

    //echo "<pre>";
    //print_r($form); exit;
    // echo $form['#node']->nid; exit;
  }
  if ($form_id == 'abuse_report_form') {
    //  echo "<pre>";
    //print_r($form);
    //$form['#after_build'][] = 'issue_after_build';
    $form['reason'] = array(
      '#type' => 'radios',
      '#title' => '<small>' . t('Which one of Heard Mentality’s Guidelines and Principles is this debate posting infringing?') . ' <a href="">' . t('Read Guidelines') . '</a></small>',
      '#options' => array_filter($form['reason']['#options']),
      '#required' => TRUE,
      '#default_value' => variable_get('reason', 1),
    );

    $form['body'] = array('#type' => 'textarea',
      '#resizable' => FALSE,
      '#cols' => 75);

    $form['op'] = false;
    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'),
      '#ahah' => array(
        'wrapper' => 'log_res',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#attributes' => array('class' => 'submit-issue leftfloat'));

    $form['#submit'][] = 'add_flag_notify';
  }
}

function choice_vote_date_update($form, &$form_state) {
  global $user;
  //update the date that has to be set while adding or editing vote due to merge issue problem
  $nid = !empty($form['#nid']) ? $form['#nid'] : $form['#node']->nid;
  $date_time = date("y-m-d H:i:s", time());
  //$date_time=strtotime($date_time);

  db_query("update {poll_votes} set `date_voted`='$date_time' where uid=%d and nid=%d", $user->uid, $nid);

  //update the date that has to be set while adding or editing vote
}

function check_user_anonymous($form, &$form_state) {

  if (user_is_anonymous())
    form_set_error('', t('Please login and cast your vote to see the reports of this issue ! '));
}

function issue_after_build($form, &$form_state) {
  // allter the form values: Stuff!

  foreach (element_children($form['choice']) as $key) {
    
  }
  return $form;
}


function issue_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Node block'),
      );
      $blocks[1] = array(
        'info' => t('Details Tab'),
      );
      $blocks[2] = array(
        'info' => t('Issue Real Info'),
      );
      $blocks[3] = array(
        'info' => t('Issue Search Form'),
      );
      $blocks[4] = array(
        'info' => t('Issue Filter Options'),
      );
      $blocks[5] = array(
        'info' => t('Popular Categories'),
      );

      return $blocks;

    case 'view':
      switch ($delta) {
        case '0':
          if (arg(0) == 'node' && is_numeric($nid = arg(1))) {
            $node = node_load($nid);
            if (!empty($node) && $node->type == 'poll') {
              $block['content'] = theme('issue_content_bottom', $node);
            }
          }
        break;
        case '2':
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);
          }
          $nid = $nid != '' ? $nid : get_qid();
          $block['subject'] = "Issue Details with Category & Location";
          $item = _issue_information($nid);
          if ($item) {
            $subject = $item['subject'];
            $area = $item['area'];
            $detail = $item['detail'];
            $postedby = $item['postedby'];
            $created = $item['created'];
            $original_nid = $item['original_nid'];
            $original_language = $item['original_language'];
            $orgLangKey = $item['orgLangKey'];

            $block['content'] = theme('issue_information', $nid, $created, $postedby, $subject, $area, $detail, $original_nid, $original_language, $orgLangKey);
          }
          break;
        case '3':
          $block['subject'] = 'Issue Search Form';
          $block['content'] = drupal_get_form('issue_search_form');
          break;
        case '4':
          $block['subject'] = 'Issue Filter Options';
          $block['content'] = issue_filter_options();
          break;
        case '5':
          $block['subject'] = 'Popular Categories';
          $block['content'] = popular_categories();
          break;
      }
      return $block;
  }
}

function issue_pundit_tab($qid='') {
  global $base_url;
  //	$output='sample content Gurus';
  $profileBadges = getAnsweredUsers($qid);

  $output1 = '';
  if (count($profileBadges) > 0) {

    $pat = $base_url . '/' . drupal_get_path('module', 'profile');
    foreach ($profileBadges as $profile) {
      $details = load_user($profile['uid']);
      $output1.=load_user_badge($profile['uid']);
      $output1 .= '<div class="clr"></div><br/>';
    }
  }
  else {
    $output1 = "<div class='messages warning'>" . t('No Pundit(s) found for this issue') . "</div>";
  }
  $output = $output1;

  return $output;
}







function add_vote_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form);
  $nid = $form['#nid'];
  $choice = $form['#post']['choice'];
  $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
  $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $choice);
  set_notify_log($user->uid, $nid, 'add_vote', $variable);
  /* New SET NOTIFY LOG */

  _send_votenotify($nid);


  # increasepoints('2', $nid, '0');
  up_actions_execute('ansquestion', $user->uid);
  // user_points_action_fired('ansquestion', $user->uid);
}

function add_flag_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $nid = $form['#parameters'][2]->oid;
  $qtitle = $form['#parameters'][2]->title;
  $variable = array('qid' => $nid, 'q_title' => $qtitle);
  set_notify_log($user->uid, $nid, 'question_flag', $variable);
  /* New SET NOTIFY LOG */
}



function _send_votenotify($qid='') {
  global $user;
  $qry = "insert into notification (uid,follower_action,is_question,new_answer,node_id) values('" . $user->uid . "','1','1','1'," . $qid . "' ) ";

  hm_mails($qid, '', 'vote_answer');
}

// short answer for issue
// follow notify
function add_follow_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $target = $form['#parameters'][2]->uid;
  $uid = $user->uid;
  $variable = array('target_id' => $target);
  set_notify_log($uid, '', 'user_follow', $variable);
  /* New SET NOTIFY LOG */
}

function add_subscription_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $tid = $form['sid']['#value'];
  $category = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '%d'", $tid));
  $uid = $user->uid;
  $variable = array('tid' => $tid, 'category' => $category);
  set_notify_log($uid, '', 'category_follow', $variable);
  /* New SET NOTIFY LOG */
}

function chk_profile_complete($form, &$form_state) {
  global $user;
  ////////////question search vote added end here
  //first time vote shows profile update popup
  $ccnt = user_load(array('uid' => $user->uid));

  if ($ccnt->prompt == 1 && is_null($user->initpop)) {
    $user_data = array('initpop' => '1');
    user_save($user, $user_data);
  }
}

function getAnsweredUsers($question_id = NULL) {
  /*   $query = "SELECT pav.uid, sav.uid
    from suggest_answer_vote sav
    INNER JOIN possible_answer_vote pav on sav.qid=pav.qid
    where 1=1 AND pav.qid = '".$question_id."' OR  sav.qid = '".$question_id."'
    order by  pav.uid"; */
  $query = "SELECT  sav.uid from suggest_answer_vote sav
			where  sav.qid ='" . $question_id . "' UNION
			SELECT pav.uid
			from poll_votes pav
			where  pav.nid ='" . $question_id . "'";

  $userids = ExecuteQuery($query, "select");
  if (count($userids) <= 0) {
    return $userids;
  }
  else {
    $Ids = array();
    foreach ($userids as $userid) {
      $Ids[] = $userid['uid'];
    }
    $separated = implode(",", $Ids);
    $separated = '( ' . $separated . ')';

    /*   $query = "SELECT bt.name as badgename, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
      from profile_badges pb
      INNER JOIN users u on pb.uid=u.uid
      LEFT JOIN badge_types bt on  bt.id = pb.badge_type_id
      WHERE 1=1 AND u.uid  IN".$separated;
      $query = "SELECT up.image, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
      from profile_badges pb
      INNER JOIN users u on pb.uid=u.uid
      LEFT JOIN user_profile up on  up.uid = u.uid
      WHERE 1=1 AND u.uid  IN" . $separated; */
    $query = "(select ps.uid from {term_node} as qc join  {pundit_section} as ps on ps.cat_id=qc.tid join {users} as u on u.uid=ps.uid where u.status=1 AND qc.nid=$question_id AND ps.uid IN $separated group by ps.uid) union (select ps.uid from {term_node} as qc join  {pundit_section} as ps on ps.cat_id=qc.tid join {users} as u on u.uid=ps.uid where u.status=1 AND qc.nid=$question_id AND ps.uid IN $separated group by ps.uid) ";
    $profileBadges = ExecuteQuery($query, "select");
  }
  return $profileBadges;
}

function suggest_answer_replacement($qid = '') {

  $query = "SELECT nid, SUM(nid) as possiblevote FROM poll_votes where nid='" . $qid . "' GROUP BY nid";
  $query_list = db_query($query);
  $fetvot = db_fetch_object($query_list);
  $vot1 = $fetvot->possiblevote;

  $query_sugest = "SELECT qid, SUM(vote) as suggestv FROM suggest_answer where qid='" . $qid . "' GROUP BY qid";
  $query_sugestlist = db_query($query_sugest);
  $fetvotsugest = db_fetch_object($query_sugestlist);
  $vot2 = $fetvotsugest->suggestv;
  $totalvotes = $vot1 + $vot2;

  $vSqlsv = "select * from {vote_percent} where id='1' ";
  $rlistbv = db_query($vSqlsv);
  $oListquestbv = db_fetch_object($rlistbv);

  $percent = $oListquestbv->percent / 100 * $totalvotes;
  //echo $percent;
  $tot = $percent * 100;


  $vsans = "select * from {suggest_answer} where  qid=$qid ";
  $vslist = db_query($vsans);

  while ($vlsistquest = db_fetch_object($vslist)) {
    $answprcs = $vlsistquest->vote / 100 * $totalvotes;

    $valuss = $answprcs * 100;
    // $valuss = 2000;
    if ($valuss > $tot) {
      $insert_change = "insert into suggest_ans_changeids (qid,ans_id)Values('" . $qid . "','" . $vlsistquest->said . "') ";
      $listchnge = db_query($insert_change);

      $select_allv = "select * from suggest_answer_vote where answer_id=$vlsistquest->said  ";
      $listam = db_query($select_allv);

      while ($listamqry = db_fetch_object($listam)) {

        $insert_white = "insert into suggest_ans_tmp (qid,uid,answer_id,vote,vote_date)Values('" . $qid . "','" . $listamqry->uid . "','" . $vlsistquest->said . "','" . $vlsistquest->vote . "','" . $listamqry->vote_date . "') ";
        $qrylist = db_query($insert_white);
      }
      //echo $valuss;
      //echo $vlsistquest->said;
    }
  }

  $mysql_sug_rows = mysql_num_rows(db_query("select distinct(answer_id) from suggest_ans_tmp  "));


  //echo $mysql_sug_rows;
  //$vpans = "select * from {possible_answer} where  qid='" . $qid . "' order by vote desc limit 0,$mysql_sug_rows ";
  $vpans = "select * from {poll_choices} where  nid='" . $qid . "' order by chvotes desc limit 0,$mysql_sug_rows ";

  $vplist = db_query($vpans);

  while ($vplistquest = db_fetch_object($vplist)) {
    $insert_list_ids = "insert into possible_answer_changeids (qid,ans_id)Values('" . $qid . "','" . $vplistquest->chorder . "') ";
    $qrylist_change = db_query($insert_list_ids);

    $select_allvp = "select * from poll_votes where chorder= '$vplistquest->chorder' AND nid = '$qid'  ";
    $listamp = db_query($select_allvp);

    while ($listamqryamp = db_fetch_object($listamp)) {

      $insert_whited = "insert into possible_answer_tmp (qid,uid,panswer_id,vote,vote_pdate)Values('" . $qid . "','" . $listamqryamp->uid . "','" . $vplistquest->paid . "','" . $vplistquest->vote . "','" . $listamqryamp->vote_pdate . "') ";
      $qrylist = db_query($insert_whited);
    }
  }

  $qry1 = db_query("select * from suggest_ans_changeids where qid ='" . $qid . "'");
  $array1 = array();
  while ($row1 = db_fetch_object($qry1)) {
    $array1[] = $row1->ans_id;
  }

  $qry2 = db_query("select * from possible_answer_changeids where qid ='" . $qid . "' ");
  while ($row2 = db_fetch_object($qry2)) {
    $array2[] = $row2->ans_id;
  }

  for ($x = 0; $x < sizeof($array1); $x++) {
    $array[] = $array1[$x] . " - " . $array2[$x];

    $array1[$x] . " - " . $array2[$x];

    $update_idss = db_query("update possible_answer_tmp set  panswer_id='$array1[$x]'  where panswer_id='$array2[$x]' ");


    $updateval = db_query("update suggest_ans_tmp set  answer_id='$array2[$x]' where answer_id='$array1[$x]'");

    $deletsug = db_query("delete from suggest_answer_vote where answer_id='$array1[$x]'");

    $deletpos = db_query("delete from poll_votes where chorder='$array2[$x]' AND nid = '$qid'");

    $rechange_list = db_query("select * from {poll_choices} where  chorder='" . $array2[$x] . "' AND nid = '$qid' ");

    $rechg = db_fetch_object($rechange_list);
    $rechg->chvotes;

    $rechange_list_new = db_query("select * from {suggest_answer} where  said='" . $array1[$x] . "'  ");

    $rechg_new = db_fetch_object($rechange_list_new);
    $rechg_new->vote;
    $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='3'";
    $rs_mgmt = db_query($sel_user_cmt);
    $list_content = db_fetch_object($rs_mgmt);

    $vuser_ownersug = "select * from {users} where  uid='" . $rechg_new->uid . "'";
    $userown = db_query($vuser_ownersug);
    $ufet_qwn = db_fetch_object($userown);
    $ufet_qwn->mail;
    if ($usert->notify_etype == 1) {
      $subject_proj = $list_content->subject;


      //////////mail for suggest answer owner///////////////


      $contentm = str_replace("#uname#", $ufet_qwn->name, $list_content->content);
      $contentm = str_replace("#quest#", $oListquest->title, $contentm);
      //echo  $contentm;

      $mail_success = htmlmail_function($ufet_qwn->mail, $subject_proj, $contentm, '');
    }
    if ($usert->notify_itype == 1) {
      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $rechg_new->uid . "','1','1','" . $qid . "') ");
    }
    $update_ids = "update poll_choices set  chtext='$rechg_new->answer', chvotes='$rechg_new->vote'  where chorder='$array2[$x]' AND nid = '$qid' ";
    $updateqry = db_query($update_ids);

    $update_sug = "update suggest_answer set  answer='$rechg->chtext', vote='$rechg->chvotes',uid='$oListquest->uid' where said='$array1[$x]' ";
    $updateqrys = db_query($update_sug);


    /////////////Mail For question Author///////////


    $vuser = "select * from {users} where  uid='" . $oListquest->uid . "'";
    $username = db_query($vuser);
    $ufet = db_fetch_object($username);
    $ufet->mail;
    if ($ufet->notify_etype == 1) {
      $subject_projm = 'Heard Menatlity-Answer Has Been Replaced For Your Question';


      $contentmown = str_replace("#uname#", $ufet->name, $list_content->content);
      $contentmown .= str_replace("#quest#", $oListquest->title, $contentmown);
      //	echo  $contentmown;

      $mail_success = htmlmail_function($ufet->mail, $subject_projm, $contentmown, $from, '');


      // $mail_success = htmlmail_function($ufet->mail,$subject_proj,$messpro_list,$from,'');
    }
    $delossld = "delete  from possible_answer_changeids where ans_id='" . $array2[$x] . "'";
    $delssqry = db_query($delossld);
    $deloldwds = "delete  from suggest_ans_changeids where ans_id='" . $array1[$x] . "'";
    $delqrysss = db_query($deloldwds);
    if ($ufet->notify_itype == 1) {
      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $ufet->uid . "','1','1','" . $qid . "') ");
    }
  }

  $seltmp = db_query("select * from suggest_ans_tmp");

  while ($tmp_rec = db_fetch_object($seltmp)) {

    $insert_dumm = "insert into poll_votes (nid,uid,chorder) values ('" . $tmp_rec->qid . "','" . $tmp_rec->uid . "','" . $tmp_rec->answer_id . "','" . $tmp_rec->vote_date . "')";
    $dumy_rec = db_query($insert_dumm);
    //provocateur badge
    provocateur($tmp_rec->qid, $tmp_rec->answer_id);
    ///////////////////////mail notification for who voted answers ///////////////////////////////
    $vusers = "select * from {users} where  uid='" . $tmp_rec->uid . "' ";
    $usernames = db_query($vusers);
    $ufets = db_fetch_object($usernames);
    $ufets->mail;
    if ($ufets->notify_etype == 1) {
      $subject_projlist = 'Heard Menatlity-Answer Has Been Replaced ';


      $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='3'";
      $rs_mgmt = db_query($sel_user_cmt);
      $list_content = db_fetch_object($rs_mgmt);
      $contentmlist = str_replace("#uname#", $ufets->name, $list_content->content);
      $contentmlist = str_replace("#quest#", $oListquest->title, $contentmlist);
      // $contentm;

      $mail_success = htmlmail_function($ufets->mail, $subject_projlist, $contentmlist, '');
    }

    if ($ufets->notify_itype == 1) {


      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $tmp_rec->uid . "','1','1','" . $qid . "' ");
    }
    $deltmp = db_query("delete  from suggest_ans_tmp");
  }

  $seltmps = db_query("select * from possible_answer_tmp");

  while ($tmp_recs = db_fetch_object($seltmps)) {

    $insert_dumms = "insert into suggest_answer_vote (qid,uid,answer_id,vote_date) values ('" . $tmp_recs->qid . "','" . $tmp_recs->uid . "','" . $tmp_recs->panswer_id . "','" . $tmp_recs->vote_pdate . "')";
    $dumy_recs = db_query($insert_dumms);

    $deltmps = db_query("delete  from possible_answer_tmp");
  }
}

function get_quest_taxonomy($nid) {
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $result = db_query(db_rewrite_sql('SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.nid = %d ORDER BY weight', 't', 'tid'), $vid, $nid);
  $terms = array();
  while ($term = db_fetch_object($result)) {
    $terms[] = $term;
  }
  return $terms;
}

function get_question_categories($nid) {
  global $base_url;
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  $cat = implode(",", $catVals);
  $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($cat)");
  while ($ncat = db_fetch_object($ncats)) {
    $cat = $ncat->tid;

    $ctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
    // parent categories
    $catPath = 'searchquestion?txt_search=&cid=' . $cat;
    $category.= '<div class="butb"><div class="butb-left"></div><div class="butb-bg"><a title="' . $ctitle . '" rel="tag" href="' . $base_url . '/' . $catPath . '">' . $ctitle . '</a></div><div class="butb-right"></div></div>';
    $scats = get_node_tree_child($cat, $nid);
    foreach ($scats as $scat) {

      $sctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
      // first level categories
      $scatPath = 'searchquestion?txt_search=&cid=' . $cat . '&scid=' . $scat;
      $category.= '<div class="butb"><div class="buty-left"></div><div class="buty-bg"><a title="' . $sctitle . '" rel="tag" href="' . $base_url . '/' . $scatPath . '">' . $sctitle . '</a></div><div class="buty-right"></div></div>';
      $sscats = get_node_tree_child($scat, $nid);
      foreach ($sscats as $sscat) {

        $ssctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
        // second level categories
        $sscatPath = 'searchquestion?txt_search=&cid=' . $cat . '&scid=' . $scat . '&sscid=' . $sscat;
        $category.= '<div class="butb"><div class="butg-left"></div><div class="butg-bg"><a title="' . $ssctitle . '" rel="tag" href="' . $base_url . '/' . $sscatPath . '">' . $ssctitle . '</a></div><div class="butg-right"></div></div>';
      }
    }
    $category .= '<br class="clr"/><br class="clr"/>';
  }
  return $category;
}

function get_node_tree_child($tid, $nid) {
  $childrenArray = taxonomy_get_children($tid);
  $children = array();
  $subcats = array();
  foreach ($childrenArray as $key => $value) {
    $children[] = $key;
  }
  if (!empty($children)) {
    $scats = implode(",", $children);
    $nscats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($scats)");
    while ($nscat = db_fetch_object($nscats)) {
      $subcats[] = $nscat->tid;
    }
  }
  return $subcats;
}

function issue_link($type, $object, $teaser = FALSE) {

  $nid = $object->nid;
  $tnid = get_tnid($nid);
  $lang = db_result(db_query("SELECT language FROM {node} WHERE nid = '%d' AND tnid = '%d'", $tnid, $tnid));
  $languages = language_list();
  foreach ($languages as $langcode => $language) {
    if ($langcode == $lang) {
      $nodeLanguage = $language;
    }
  }
  // echo '<pre>'; print_r($languages);exit;
  $links['issue_original'] = array(
    'title' => t('View Originally Posted Issue'),
    'href' => 'node/' . $tnid,
    'language' => $nodeLanguage,
    'attributes' => array('class' => 'node-issue-org'),
  );
  return $links;
}

/* * ********* LANGUAGE TRANSLATION *********** */

// get paraent translate id
function get_tnid($nid = '') {
  $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
  $tnid = $res != 0 ? $res : $nid;
  return $tnid;
}

// get translated content for debates
// get translated debate replies/ and resource replies


// issue ahah calllback
function issue_ahah_callback($type = '', $key = '') {
  if ($type == 'category') {
    if ($key == 'scat') {

      $catids[] = $_POST['subject'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName1 = 'area';
      $options[''] = t('AREA');

      $defArea = $_POST['defarea'];
    }
    if ($key == 'sscat') {

      $catids[] = $_POST['area'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName2 = 'detail';
      $options[''] = t('DETAIL');

      $defDetail = $_POST['defdetail'];
    }
    $cids = implode(",", $catids);
    // SET SUB CATEGORIES

    $scats = array();

    foreach ($catids as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $tid => $value) {
        $stid[] = $tid;
      }

      array_push($scats, $stid);
    }
    // print_r($stid);exit;
    $i = 0;
    if (count($stid) > 0) {
      foreach ($stid as $value => $scid) {
        $cnt = taxonomy_term_count_nodes($scid);
        if ($cnt != 0) {
          $options[$scid] = t(db_result(db_query("SELECT name FROM {term_data} WHERE tid = '" . $scid . "'")));
        }
        $i++;
      }
    }

    if ($key == 'scat') {

      $fields['area'] = array('#type' => 'select',
        '#options' => $options,
        '#ahah' => array('wrapper' => 'sub-sub-cat-wrapper',
          'path' => 'issue/ahah/category/sscat',
          'effect' => 'fade',
          'event' => 'change',
        ),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'area',
        '#value' => $defArea,
      );

      $output .= ahah_render($fields, $fieldName1);
    }
    if ($key == 'sscat') {

      $fields['detail'] = array('#type' => 'select',
        '#options' => $options,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'detail',
        '#value' => $defDetail);

      $output .= ahah_render($fields, $fieldName2);
    }
  }
  elseif ($type == 'location') {
    // current language
    $lang = $_POST['cur_language'];
    if ($lang == '') {
      $langQuery = " AND n.language = 'en' OR n.language = ''";
    }
    else {
      $langQuery = " AND n.language = '$lang'";
    }
    if ($key == 'state') {
      // select state

      $countryNames[] = $_POST['country'];
      //  krumo($countryNames);
      $fieldNameState = 'state';
      $states[] = t('STATE');
      $defstate = $_POST['defstate'];

      if (!empty($countryNames)) {

        $countryList = geonames_query('countryinfo', NULL, $options);
        foreach ($countryNames as $country) {

          $xyz = geonames_countryinfo($country);
          foreach ($countryList->results as $countryss) {
            if ($country == $countryss['countryname']) {
              $geoid = $countryss['geonameid'];
              break;
            }
          }
          $query = array('geonameid' => $geoid);
          $results = geonames_query('children', $query);
          foreach ($results->results as $state) {
            // get issue state list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_state} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_state_value = '%s' $langQuery", $state['geonameid']));
            if ($count > 0) {
              $states[$state['geonameid']] = $state['name'];
            }
          }
        }
      }
      else {
        $states[] = t('No countries selected');
      }
      $fields['state'] = array('#type' => 'select', '#options' => $states,
        '#ahah' => array('wrapper' => 'city-wrapper',
          'path' => 'issue/ahah/location/city',
          'effect' => 'fade',
          'event' => 'change',),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defstate,
        '#id' => 's_state',
      );

      $output .= ahah_render($fields, $fieldNameState);
    }
    if ($key == 'city') {
      $steateIds[] = $_POST['state'];
      $fieldNameCity = 'cicty';
      $cities[] = t('CITY');
      $defcity = $_POST['defcity'];

      if (!empty($steateIds)) {
        foreach ($steateIds as $code) {
          //  krumo($code);
          $explode = explode(',', $code);
          //    krumo($explode);
          $query = array('geonameid' => $explode[0]);
          $result = geonames_query('children', $query);
          foreach ($result->results as $state) {
            // get issue city list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_city} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_city_value = '%s' $langQuery", $state['geonameid'] . $explode[0] . $explode[1]));
            if ($count > 0) {
              $cities[$state['geonameid'] . $explode[0] . $explode[1]] = $state['name'];
            }
          }
        }
      }
      else {
        $cities[] = t('No states selected');
      }

      $fields['city'] = array('#type' => 'select',
        '#options' => $cities,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defcity
      );

      $output .= ahah_render($fields, $fieldNameCity);
    }
  }

// set ahah behaviour for inner rendering buttons
  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.
  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {

          $filefield_ahah_settings[$id] = $ahah_settings;
        }
      }
    }
  }

  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, ' . drupal_to_js($filefield_ahah_settings) . ');</script>';
  }

  //print drupal_to_js(array('data' => $output, 'status' => true));
  print drupal_json(array('data' => $output, 'status' => true));
}

////
function _issue_information($nid = '') {
  $node = node_load($nid);
  $tnid = get_tnid($node->nid);
  $users = user_load($node->uid);
  // category lists
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[$cat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[$scat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[$sscat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }

  // find originally posted language
  $trans = node_load($tnid);
  $orgLangKey = $trans->language;
  $languages = language_list();
  $orgLanguage = $languages[$orgLangKey]->name;
  $path = drupal_get_path_alias('node/' . $tnid);

  $values['subject'] = $ctitle;
  $values['area'] = $sctitle;
  $values['detail'] = $ssctitle;
  $values['postedby'] = $users->name;
  $values['created'] = format_date($node->created, "custom", "M j Y");
  $values['original_nid'] = $tnid;
  $values['orgLangKey'] = $orgLangKey;
  $values['original_language'] = $orgLanguage;
  return $values;
}

// issue information theme
function theme_issue_information($nid = '', $created = '', $postedby = '', $ctitle = array(), $sctitle = array(), $ssctitle = array(), $original_nid = '', $original_language = '', $orgLangKey = '') {
  global $base_url;
  $info = '';
  $info .= '<div id="issue_information">';
  // created details
  $info .= '<div class="post-by">' . t('Issue posted on ') . $created . '&nbsp;'
          . t('By') . '&nbsp;' . l($postedby, 'profile/' . $postedby) . '</div>';
  //category details
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">SUBJECT</div>';
  if (!empty($ctitle)) {
    foreach ($ctitle as $tid => $subject) {
      $info .= l($subject, 'issues/0/' . $tid . '/0/0/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No subjects found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">AREA</div>';
  if (!empty($sctitle)) {
    foreach ($sctitle as $tid => $area) {
      $parent = taxonomy_get_parents($tid);
      $cid = array_keys($parent);
      $info .= l($area, 'issues/0/' . $cid[0] . '/' . $tid . '/0/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No areas found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">DETAIL</div>';
  if (!empty($ssctitle)) {
    foreach ($ssctitle as $tid => $detail) {
      $sparent = taxonomy_get_parents($tid);
      $ssid = array_keys($sparent);
      $ssparent = taxonomy_get_parents($ssid[0]);
      $cid = array_keys($ssparent);
      $info .= l($detail, 'issues/0/' . $cid[0] . '/' . $ssid[0] . '/' . $tid . '/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No details found') . '<br />';
  }
  $info .= '</div>';
  // original language
  $path = drupal_get_path_alias('node/' . $original_nid);
  $info .= '<br />' . t('Issue originally written in') . '&nbsp;' . $original_language . '<br />'
          . l('Click to view in original language', $base_url . '/' . $orgLangKey . '/' . $path);
  $info .= '</div>';
  return $info;
}




// issue filter options
function issue_filter_options() {
  $key = arg(1) != '' ? arg(1) : '0';
  $subject = arg(2) != '' ? arg(2) : '0';
  $area = arg(3) != '' ? arg(3) : '0';
  $detail = arg(4) != '' ? arg(4) : '0';
  $country = arg(5) != '' ? arg(5) : '0';
  $state = arg(6) != '' ? arg(6) : '0';
  $city = arg(7) != '' ? arg(7) : '0';
  $method = arg(8) != '' ? arg(8) : '0';

  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';

  if ($method == 'alltime') {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }
  elseif ($method == '7days') {
    $actall = '';
    $act7 = 'class="active"';
    $actviews = '';
  }
  elseif ($method == 'views') {
    $actall = '';
    $act7 = '';
    $actviews = 'class="active"';
  }
  else {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }



  $key_path = $sitelink . 'issues/' . $key . '/' . $subject . '/' . $area . '/' . $detail . '/' . $country . '/' . $state . '/' . $city;
  $issue_filter = '<div class="sort-by">' . t('View') . ' &nbsp;
                <a href="' . $key_path . '/alltime" ' . $actall . '>' . t('Most Votes (all-time)') . '</a>&nbsp;|&nbsp;'
          . '<a href="' . $key_path . '/7days" ' . $act7 . '>' . t('Most Votes (past 7 days)') . '</a>&nbsp;|&nbsp;'
          . '<a href="' . $key_path . '/views" ' . $actviews . '>' . t('Number of Views') . '</a></div>';
  return $issue_filter;
}

// insert node views


// rating buttons - agree, disagree
// popular categories
function popular_categories() {
  $sql = db_query("SELECT nid, count(nid) as cnt from {poll_votes} group by nid ORDER BY cnt desc");
  while ($votes = db_fetch_object($sql)) {
    $term = db_query("SELECT tn.tid, td.name name FROM {term_node} AS tn LEFT JOIN {term_data} AS td ON tn.tid = td.tid WHERE tn.nid = '%d'", $votes->nid);
    if ($term != '') {
      while ($pop = db_fetch_object($term)) {
        $popular[$pop->tid] = $pop->name;
      }
    }
  }

  // get only 15 elements
  $popular = array_slice($popular, 0, 15, true);
  $popular_categories = theme('popular_categories', $popular);
  return $popular_categories;
}

/* * Rallydev:526* */

function __issue_description_trimmer($context) {

  $initial_character_count = 2500;
  $context_initial = "";
  $context_remaining = "";
  $output = array();
  $context = trim($context);
  $output['actual_length'] = $trimmed_string_length = strlen($context);
  if ($trimmed_string_length <= $initial_character_count) {
    $output['context_initial'] = str_replace("\r\n", "<br>", $context);
    $output['context_remaining'] = "";
  }
  else {
    $context_initial = substr($context, 0, $initial_character_count);
    $output['context_initial'] = str_replace("\r\n", "<br>", $context_initial) . '<div id="new-ellipse"><a>... more</a></div>';
    $context_remaining = substr($context, $initial_character_count, $trimmed_string_length);
    $output['context_remaining'] = str_replace("\r\n", "<br>", $context_remaining);
  }
  return $output;
}
