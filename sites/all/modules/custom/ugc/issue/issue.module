<?php

@require_once('issue.forms.inc');

/**
 * Content type: poll
 *
 * @note
 *  We're not using the drupal's node hooks there
 *  b/c node type is cck-exported and not created within this module
 *
 * TODO get_tnid() -- remove
 * TODO issue_suggest_form - refactor
 *
 */

/*
 * Implementation of hook_help().
 */
function issue_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#issue':
      return t('');
    break;
  }
}

/*
 * Implementation of hook_init()
 */
function issue_init() {
  drupal_add_css(drupal_get_path('module', 'poll') . '/poll.css');
  drupal_add_js(drupal_get_path('module', 'issue') . '/issue.js');

  // TODO -- refactor
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/filter.js');
  drupal_add_js(drupal_get_path('module', 'issue') . '/js/common.js');
  if (module_exists('jquery_ui')) {
    jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));
  }
  drupal_add_js(drupal_get_path('module', 'question') . '/scripts/question.js');
}

		
 
 
 
/*
 * Get vote count
 */
function issue_get_votes($nid) {
  static $votes = array();
  if (!isset($votes[$nid])) {
    $vote = array();
    $vote['#all'] = 0;
    $result = db_query("SELECT chorder, COUNT(*) AS count FROM {poll_votes} where nid='%d' GROUP BY chorder ORDER BY chorder ASC", $nid);
    while ($row = db_fetch_object($result)) {
      $vote['#all'] += $row->count;
      $vote[$row->chorder] = $row->count;
    }
    $votes[$nid] = $vote;
  }
  return $votes[$nid];
}

/*
 * Define constant for debates
 */
define('TYPE_DEBATE', 1);

/*
 * Define constant for resources
 */
define('TYPE_RESOURCE', 2);

/*
 * Get debates and resources
 */
function issue_get_dr($nid) {
  static $dr = array();
  if (empty($dr[$nid])) {
    $tmp = array(
      '#list' => array(),
      '#count' => array(
        TYPE_DEBATE => 0,
        TYPE_RESOURCE => 0,
        '#all' => 0,
      )
    );

    $result = db_query("SELECT * FROM {content_type_forum} WHERE field_ref_qid_nid = '%d' ORDER BY nid DESC", $nid);
    while ($row = db_fetch_array($result)) {
      $tmp['#list'][] = $row;
      $tmp['#count']['#all']++;
      $tmp['#count'][$row['field_type_value']]++;
    }

    $dr[$nid] = $tmp;
  }
  return $dr[$nid];
}


/**
 * @file
 * Issue Poll -A sophisticated issue module for voting and analysis report generating.
 */
#module_load_include('inc', 'issue', 'issue.theme.inc');

/* * ************************
 * Content Type: Issue
 */




/**
 * Implementation of hook_node_info().
 */
function issue_node_info() {
  $info = array();
  return $info;
}

/**
 * Implementation of hook_perm().
 */
function issue_perm() {
  return array(
    'create issue',
    'edit issue',
    'edit own issue',
    'vote on issue',
    'cancel own vote',
    'administer issue',
    'inspect all votes',
    'show vote results',
    'access electoral list',
    'add write-ins',
    'issue list',
  );
}

/**
 * Implementation of hook_access().
 */
function issue_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create issue', $account);
  }
  if ($op == 'update') {
    if (user_access('edit issue', $account) || ($node->uid == $account->uid && user_access('edit own issue', $account))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_form().
 */
function issue_form(&$node, $form_state) {
  $form = array();

  // Only add javascript once, even if _form is called multiple times.
  static $add_js;
  if (!$add_js) {
    // Pass translatable strings
    drupal_add_js(
            array(
      'advPoll' => array(
        'remove' => t('Remove'),
        'addChoice' => t('Add choice'),
        'noLimit' => t('No limit')
      )
            ), 'setting');
    drupal_add_js(drupal_get_path('module', 'issue') . '/issue-form.js', 'module');
    drupal_add_css(drupal_get_path('module', 'issue') . '/issue.css', 'module');
    $add_js = TRUE;
  }

  $type = node_get_types('type', $node);
  $editing = isset($node->nid);

  $form['title'] = array(
    '#type' => 'textfield',
    '#maxlength' => 100,
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  $form['body_field']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#required' => FALSE,
    '#default_value' => $node->body,
  );
  $form['body_field']['format'] = filter_form($node->format);

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function issue_insert($node) {
  _issue_insert_choices($node);
}

/**
 * Implementation of hook_update().
 */
function issue_update($node) {
  db_query("
    UPDATE {issue}
    SET
      active = %d,
      max_choices = %d,
      algorithm = '%s',
      use_list = %d,
      show_votes = %d,
      start_date = '%s',
      end_date = '%s',
      writeins = %d,
      show_writeins = %d,
      question = '%s'
    WHERE nid = %d", !$node->settings['close'], $node->settings['max_choices'], $node->settings['algorithm'], $node->settings['use_list'], $node->settings['show_votes'], $node->settings['start_date'] ? strtotime($node->settings['start_date']) : 0, $node->settings['end_date'] ? strtotime($node->settings['end_date']) : 0, $node->settings['writeins'], $node->settings['show_writeins'], isset($node->question) ? $node->question : '', $node->nid
  );
  _issue_insert_choices($node);
  votingapi_recalculate_results('issue', $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function issue_delete($node) {
  db_query('DELETE FROM {issue} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {issue_choices} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {issue_electoral_list} WHERE nid = %d', $node->nid);
  yn_vote_delete($node->nid, null, 'issue');
  _votingapi_delete('cache', array('content_id' => $node->nid, 'content_type' => 'issue'));
}

/*
 * Implementation of hook_load()
 */

function issue_load($node) {
  # issue object to return
  $issue = db_fetch_object(db_query('SELECT * FROM {issue} WHERE nid = %d', $node->nid));


  $issue->choice = array();
  $issue->writein_choices = 0;
  $result = db_query('SELECT cid, weight, label, writein FROM {issue_choices} WHERE nid = %d ORDER BY weight', $node->nid);
  while ($choice = db_fetch_array($result)) {
    $issue->choice[$choice['cid']] = $choice;
    if ($choice['writein'] == 1) {
      $issue->writein_choices++;
    }
  }
  $issue->choices = count($issue->choice);

  $result = db_query("
    SELECT value
    FROM {votingapi_cache}
    WHERE
      content_type = 'issue' AND
      content_id = %d AND
      tag = '_issue' AND
      function = 'total_votes'", $node->nid);
  if ($cache = db_fetch_object($result)) {
    // Found total votes in the cache.
    $issue->votes = $cache->value;
  }
  else {
    $issue->votes = 0;
  }
  list($issue->voted, $issue->cancel_vote) = _issue_user_voted($node->nid);
  return $issue;
}

/**
 * Implementation of hook_validate().
 */
function issue_validate($node, &$form) {
  $node->choice = array_values($node->choice);
  // TODO: verify if this hack is still needed in Drupal 6.
  // Start keys at 1 rather than 0.
  array_unshift($node->choice, '');
  unset($node->choice[0]);
  // Check for at least two choices.
  $real_choices = 0;
  // TODO: take out _POST
  foreach ($_POST['choice'] as $i => $choice) {
    if ($choice['label'] != '') {
      $real_choices++;
    }
  }
  if ($real_choices < 2) {
    form_set_error("choice][$real_choices][label", t('You must fill in at least two choices.'));
  }
  // Validate max choices since it has #DANGEROUS_SKIP_CHECK set to true.
  if ($node->settings['max_choices'] < 0) {
    form_set_error('settings][max_choices]', t('Maximum choices must be a non-negative integer.'));
  }
  if ($node->settings['max_choices'] > $real_choices) {
    form_set_error('settings][max_choices]', t('Maximum choices cannot be larger than the number of choices submitted.'));
  }
  // Validate dates.
  if (!empty($node->settings['start_date']) && strtotime($node->settings['start_date']) <= 0) {
    form_set_error('settings][start_date', t('You have to specify a valid starting date.'));
  }
  if (!empty($node->settings['end_date']) && strtotime($node->settings['end_date']) <= 0) {
    form_set_error('settings][end_date', t('You have to specify a valid ending date.'));
  }
  if (!empty($node->settings['end_date']) && $node->settings['end_date'] < $node->settings['start_date']) {
    form_set_error('settings][end_date', t('Ending date cannot be before the starting date.'));
  }
}

/*
 * Content Type: Issue
 * ********************** */




/* * ************************
 * Drupal hooks
 */









/**
 * Implementation of hook_menu().
 */
function issue_menu() {
  // global $user;
  $menu['issue/create'] = array(
    'title' => 'Add an Issue',
    'page callback' => 'issue_create',
    'access arguments' => array('create issue'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/autotextfields/callback'] = array(
    'title' => 'Add an Issue',
    'page callback' => 'issue_autotextfields_callback',
    'access arguments' => array('create issue'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/get_related_issues'] = array(
    'title' => 'Related Issues',
    'page callback' => 'issue_related_callback',
    'access arguments' => array('create issue'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'issue.pages.inc'
  );
  $menu['issues2'] = array(
    'title' => 'Issues',
    'page callback' => 'issues_list',
    'access arguments' => array('issue list'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'issue.pages.inc'
  );
  $menu['issue/ahah/%/%'] = array(
    'title' => 'Issue Ahah Control',
    'page callback' => 'issue_ahah_callback',
    'access arguments' => array('issue list'),
    'page arguments' => array(2, 3),
  );
  $menu['issue/thread/delete/%/%/%'] = array(
    'title' => 'Forum / Reply delete',
    'page callback' => 'issue_thread_delete',
    'access arguments' => array('vote on issue'),
    'page arguments' => array(3, 4, 5),
    'file' => 'issue.pages.inc',
  );
  $menu['issue/ajax/%/%'] = array(
    'title' => 'Insight View',
    'page callback' => 'issue_ajax',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(2, 3),
    'access callback' => true,
    'file' => 'issue.pages.inc',
  );
  $menu['issues/load_resources/%/%/%/%/%'] = array(
    'title' => 'Load Resources',
    'page callback' => 'issue_resources',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(2, 3, 4, 5, 6),
    'access callback' => TRUE,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/vote/ajax/submit/%'] = array(
    'page callback' => 'issue_vote_submit_ajax',
    'access arguments' => array('create issue'),
    'page arguments' => array(4),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $menu['issue/%/tab_content/%/%'] = array(
    'page callback' => 'issue_ajax_tab_content',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 3, 4),
    'access callback' => TRUE,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/highstock/ajax/%/%'] = array(
    'page callback' => 'issue_ajax_highstock_graph',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/highchart/ajax/%/%'] = array(
    'page callback' => 'issue_ajax_highchart_result',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'file' => 'issue.pages.inc',
  );
  $menu['issue/gmap/ajax/%'] = array(
    'page callback' => 'issue_ajax_gmap_result',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'issue.pages.inc',
  );
  return $menu;
}








/*
 * Implementation of hook_theme()
 */

function issue_theme($existing, $type, $theme, $path) {
  return array(
    'delete_button' => array(
      'arguments' => array(
        'id' => NULL,
        'type' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'like_dislike_bar' => array(
      'arguments' => array(
        'pro' => NULL,
        'con' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'rating_button' => array(
      'arguments' => array(
        'item' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'debate_parent_template' => array(
      'template' => 'debate-parent-template',
      'arguments' => array(
        'item' => NULL,
        #'strength' => NULL,
        'comments' => NULL,
        'reply_box' => NULL,
        'reply_count' => NULL,
        'ratings' => NULL,
        'delete' => NULL
      ),
    ),
    'reference_parent_template' => array(
      'template' => 'reference-parent-template',
      'arguments' => array(
        'items' => NULL,
        'strength' => NULL,
        'comments' => NULL,
        'reply_box' => NULL,
        'reply_count' => NULL,
        'ratings' => NULL,
        'delete' => NULL
      ),
    ),
    'forum_child_reply_template' => array(
      'template' => 'forum-child-reply-template',
      'arguments' => array(
        'items' => NULL,
        'userPicture' => NULL,
        'ratings' => NULL,
        'delete' => NULL
      ),
    ),
    'forum_replies' => array(
      'arguments' => array(
        'content_id' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'forum_reply' => array(
      'arguments' => array(
        'item' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'sub_loader' => array(
      'arguments' => array(
        'styles' => NULL,
      ),
      'file' => 'issue.theme.inc',
    ),
    'issue_debate_list' => array(// TODO rename
      'arguments' => array(
        'nid' => NULL
      ),
      'file' => 'issue.theme.inc',
    ),
    'debate_area' => array(
      'template' => 'debate-area',
      'arguments' => array(
        'addNewDebateForm' => NULL,
        'debateFilterForm' => NULL,
        # 'debateStatistics' => NULL,
        # 'debateList' => NULL,
        'count' => NULL,
        'show_only' => NULL,
        'nid' => NULL
      ),
    ),
    'issue_results' => array(
      'template' => 'issue_results',
      'arguments' => array('nid' => NULL, 'cdebate' => NULL, 'cresource' => NULL, 'cpundit' => NULL, 'allowvotes' => NULL),
    ),
    'issue_details' => array(
      'template' => 'issue_details_tab',
      'arguments' => array('nid' => NULL, 'votes' => NULL),
    ),
    'issue_answer' => array(
      'arguments' => array('form' => NULL),
    ),
    'issue_information' => array(
      'template' => 'issue-real-informations',
      'arguments' => array('nid' => NULL, 'created' => NULL, 'postedby' => NULL, 'subject' => NULL, 'area' => NULL, 'detail' => NULL, 'original_nid' => NULL, 'original_language' => NULL, 'orgLangKey' => NULL),
    ),
    'issue_result_analysis' => array(
      'arguments' => array('nid' => NULL),
    ),
    'issue_detail_wrapper' => array(
      'template' => 'issue_detail_wrapper',
      'arguments' => array('nid' => NULL, 'result_analysis' => NULL, 'debate_list' => NULL, 'resource_list' => NULL, 'debateCount' => NULL, 'resourceCount' => NULL),
    ),
    'single_resource_template' => array(
      'arguments' => array('debItems' => array()),
    ),
    'reference_area' => array(
      'template' => 'reference-area',
      'arguments' => array('addNewReferenceForm' => NULL, 'referenceFilterForm' => NULL, 'refTypeFilter' => NULL, 'referenceStatistics' => NULL, 'referenceList' => NULL),
    ),
    'issue_result_graph_analysis' => array(
      'template' => 'issue-result-graph-analysis',
      'arguments' => array('map' => NULL, 'report_percent' => NULL, 'report_graph' => NULL, 'short_answers' => NULL),
    ),
    'popular_categories' => array(
      'template' => 'popular-categories',
      'arguments' => array('popular' => NULL),
    )
  );
}

/*
 * Drupal hooks
 * ********************** */



/* * ************************
 * Load data
 */

/*
 * Function to load debates
 *
 * @params
 * debId    - Node Id for debate
 * issId    - Issue Id the debate is related to
 * issTnid  - Translate Issue Id
 */

function load_debate($debId = '', $issId = '', $issTnid = '') {
  $item = array();
  global $user, $language;

  # get the node and its creator
  $forum = node_load(array('nid' => $debId, 'status' => '1'));
  $account = user_load($forum->uid);
  # translate title and body
  $translated = translate_forum($debId, $language->language);
  $forum->title = $translated->title;
  $forum->body = $translated->body;
  # get votes
  list($vote_up, $vote_down, $sum) = yn_votes($forum->nid, 'node');
  # get strenght votes
  list($strong_count, $weak_count) = get_strenght($forum->nid);
  # get posted and last activity time
  $posted = date("F d Y H:i:s", $forum->created);
  $last_timestamp = db_result(db_query("
    SELECT timestamp
    FROM {comments}
    WHERE nid = '%d'
    ORDER BY cid DESC
    LIMIT 0,1", $forum->nid)
  );
  $last_activity = $last_timestamp != '' ? date("F d Y H:i:s", $last_timestamp) : $posted;
  # strength
  $query = "
    SELECT *
    FROM {debate_options} a
      JOIN {poll_choices} b
        ON a.chorder=b.chorder
    WHERE
      a.nid='" . $forum->nid . "' AND
      b.nid='" . $issTnid . "'
    ORDER BY b.chorder";
  $strength = ExecuteQuery($query, "select");

  # output
  $item['debate_id'] = $translated->nid;
  $item['issue_id'] = $issId;
  $item['title'] = $forum->title;
  $item['issue_tnid'] = $issTnid;
  $item['debate_tnid'] = $debId;
  $item['uid'] = $account->uid;
  $item['uname'] = $account->name;
  $item['posted'] = $posted;
  $item['last_activity'] = $last_activity;
  $item['strength'] = $strength;
  $item['vote_up'] = $vote_up;
  $item['vote_down'] = $vote_down;
  $item['allow_rating'] = !yn_user_voted($forum->nid, 'node');
  $item['posted_by'] = $forum->uid;
  $item['ago'] = get_time_interval($item['posted']);
  // unify the debates and resources and comments
  $item['content_id'] = $item['debate_tnid'];
  $item['type'] = 'debate';

  return $item;
}

/*
 * Function to load resources
 *
 * @params
 * resId    - Node Id for debate
 * issId    - Issue Id the debate is related to
 * issTnid  - Translate Issue Id
 */

function load_resource($resId = '', $issId = '', $issTnid = '', $resType = '') {
  $item = array();
  global $user;

  # get the node and its creator
  $forum = node_load(array('nid' => $resId, 'status' => '1'));
  $account = user_load($forum->uid);
  # get votes
  list($vote_up, $vote_down, $sum) = yn_votes($forum->nid, 'node');
  # get strenght votes
  list($strong_count, $weak_count) = get_strenght($forum->nid);
  # get posted and last activity time
  $posted = date("F d Y H:i:s", $forum->created);
  $last_timestamp = db_result(db_query("
    SELECT timestamp
    FROM {comments}
    WHERE nid = '%d'
    ORDER BY cid DESC
    LIMIT 0,1", $forum->nid)
  );
  $last_activity = $last_timestamp != '' ? date("F d Y H:i:s", $last_timestamp) : $posted;
  # strength
  $query = "
    SELECT *
    FROM {resource_options} a
      JOIN {poll_choices} b
        ON a.chorder=b.chorder
    WHERE
      a.nid='" . $forum->nid . "' AND
      b.nid='" . $issTnid . "'
    ORDER BY b.chorder";
  $strength = ExecuteQuery($query, "select");

  # output
  $item['rtype'] = $resType;
  $item['issue_id'] = $issId;
  $item['title'] = $forum->title;
  $item['body'] = $forum->body;
  $item['issue_tnid'] = $issTnid;
  $item['resource_id'] = $resId;
  $item['image'] = $forum->field_filepath[0]['value'];
  $item['uid'] = $account->uid;
  $item['uname'] = $account->name;
  $item['posted'] = $posted;
  $item['last_activity'] = $last_activity;
  $item['strength'] = $strength;
  $item['vote_up'] = $vote_up;
  $item['vote_down'] = $vote_down;
  $item['allow_rating'] = !yn_user_voted($forum->nid, 'node');
  $item['posted_by'] = $forum->uid;
  $item['source'] = $forum->field_source[0]['value'] != '' ? $forum->field_source[0]['value'] : '';
  $item['ago'] = get_time_interval($item['posted']);
  $item['video_id'] = $forum->field_videoid[0]['value'] != '' ? $forum->field_videoid[0]['value'] : '';
  $item['nlink'] = $forum->field_nlink[0]['value'] != '' ? $forum->field_nlink[0]['value'] : '';
  $item['filepath'] = $forum->field_filepath[0]['value'] != '' ? $forum->field_filepath[0]['value'] : '';
  // unify the debates and resources and comments
  $item['content_id'] = $item['resource_id'];
  $item['type'] = 'resource';

  return $item;
}

/*
 * Function to load replies
 *
 * @params
 * cid    - Comment Id
 */

function load_reply($cid = '') {
  global $language, $user;
  # get the comment
  $forum = db_fetch_array(db_query("SELECT * FROM {comments} WHERE cid = '%d'", $cid));
  if (!$forum)
    return;
  # get translated comment
  $forum['comment'] = get_translated_comment($cid, $language->language);
  if (empty($forum['comment']))
    return;
  # get author
  $account = user_load($forum['uid']);
  # get votes
  list($vote_up, $vote_down, $sum) = yn_votes($forum['cid'], 'comment');
  # get post date
  $posted = date("Y-m-d H:i:s", $forum['timestamp']);

  # output
  $item = array();
  $item['cid'] = $cid;
  $item['reply_content'] = $forum['comment'];
  $item['vote_up'] = $vote_up;
  $item['vote_down'] = $vote_down;
  $item['uid'] = $account->uid;
  $item['uname'] = $account->name;
  $item['posted'] = $posted;
  $item['allow_rating'] = !yn_user_voted($forum['cid'], 'comment');
  $item['posted_by'] = $forum['uid'];
  $item['ago'] = get_time_interval($posted);
  if ($forum['str_wk'] == 1) {
    $item['class'] = 'positive';
    $item['sign'] = '+';
  }
  else {
    $item['class'] = 'negative';
    $item['sign'] = '-';
  }
  // unify the debates and resources and comments
  $item['content_id'] = $item['cid'];
  $item['type'] = 'reply';

  return $item;
}

/*
 * Converts time to string like "3 hour(s) ago"
 */

function get_time_interval($time) {
  # dates/interval
  $date_now = new DateTime("now");
  $date = new DateTime($time);
  $interval = $date->diff($date_now);
  # convert to string
  if ($interval->y != 0) {
    return $interval->y . ' year' . ($interval->y > 1 ? 's' : '') . ' ago';
  }
  if ($interval->m != 0) {
    return $interval->m . ' month' . ($interval->m > 1 ? 's' : '') . ' ago';
  }
  if ($interval->d != 0) {
    return $interval->d . ' day' . ($interval->d > 1 ? 's' : '') . ' ago';
  }
  if ($interval->h != 0) {
    return $interval->h . ' hour' . ($interval->h > 1 ? 's' : '') . ' ago';
  }
  if ($interval->i != 0) {
    return $interval->i . ' minute' . ($interval->i > 1 ? 's' : '') . ' ago';
  }
  return 'just now';
}

/*
 * Function to get the number of the strong/weak votes
 *
 * return array(STRONG_COUNT,WEAK_COUNT)
 *
 * TODO make it use only one sql request
 */

function get_strenght($forum_nid) {
  $votes = array();
  $query = "SELECT COUNT(*) FROM {comments} WHERE str_wk = '%d' AND nid = '%d'";
  $votes[] = db_result(db_query($query, 1, $forum_nid));
  $votes[] = db_result(db_query($query, 0, $forum_nid));
  return $votes;
}

/*
 * Function to get translated node for the forum
 */

function translate_forum($forumId ='', $curLanguage = '') {
  $ftid = db_result(db_query("
    SELECT nid 
    FROM {node} 
    WHERE 
      tnid = '%d' AND 
      language = '%s' AND 
      translate = 1", $forumId, $curLanguage)
  );
  $ftid = $ftid != '' ? $ftid : $forumId;
  $translated = node_load(array('nid' => $ftid, 'status' => '1'));
  return $translated;
}

/*
 * Load data
 * ********************** */

/* * ************************
 * Forms
 */

/*
 * Forum Reply Form
 *
 * @form        - drupal required variable
 * @content_id  - debate_tnid/resource_id
 * @variables   - array to pass various number of params to submit
 */

function reply_form($form, $content_id, $variables = array()) {
  $form = array();

  if (!user_is_logged_in()) {
    $form['log_in'] = array(
      '#type' => 'markup',
      '#value' => t('Please Login to post reply')
    );
  }
  else {
    $form['#attributes'] = array('class' => 'arg-reply-form');
    $form['#action'] = url($_GET['q'], array('absolute' => TRUE));
    $form['err_r'] = array(
      '#type' => 'markup',
      '#value' => '<div class="error-msg reply_err"></div>'
    );
    $form['reply_content'] = array('#type' => 'textarea',
      '#size' => 70,
      '#cols' => 10,
      '#id' => 'reply_content_' . $content_id,
      '#rows' => 3,
      '#attributes' => array('class' => 'textarea-input'),
      '#resizable' => FALSE,
    );
    $form['str_wk'] = array(
      '#type' => 'radios',
      '#options' => array(
        '1' => t('Strengthen'),
        '0' => t('Weaken')
      ),
      '#default_value' => '1',
      '#prefix' => '<div class="help_radios" style="display:none;">',
      '#suffix' => '</div>',
    );
    $form['reply_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit reply'),
      '#prefix' => '<div align="right">',
      '#suffix' => '</div>' . theme('sub_loader', 'display:none; margin-bottom:-15px; float:left;'),
    );
    $form['variables'] = array(
      '#type' => 'hidden',
      '#id' => 'variables',
      '#default_value' => json_encode($variables),
    );
    $form['content_id'] = array(
      '#type' => 'hidden',
      '#default_value' => $content_id,
    );
  }

  return $form;
}

/*
 * Forum Reply Form submitter
 *
 * TODO find out how the coins' part works and fix it
 */

function reply_form_submit($form, &$form_state) {
  global $user;
  $json = array();
  # find out if user has enough points to leave a comment
  $coins = $user->total_coins;
  $coins_threshold = 0; # get_coins('p_debate');
  if ($coins < $coins_threshold) {
    $json['message'] = '<span>' . t('Sorry, you do not have enough coins to reply for this post') . '</span>';
  }
  else {
    # collect comment data
    $comment = check_plain($form_state['values']['reply_content']);
    $values = array(
      'nid' => $form_state['values']['content_id'],
      'uid' => $user->uid,
      'name' => $user->name,
      'language' => get_input_language($comment),
      'subject' => $comment,
      'comment' => $comment,
      'status' => 0,
      'format' => '',
      'mail' => '',
      'homepage' => '',
      'str_wk' => $form_state['values']['str_wk'],
    );
    # save the comment
    $cid = comment_save($values);
    comment_update($cid, $values['str_wk'], $values['language']);
    # notify log
    /*
     * TODO -
     * find out if d_title, q_title are used somewhere else,
     * since they're related to both debates and resources
     * these names may be confusing for developers later
     */
    $vars = json_decode($form_state['values']['variables']);
    $issue_tnid = get_tnid($vars->issue_id);
    $issue_title = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $issue_tnid));
    $content_title = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $values['nid']));
    set_notify_log($user->uid, $values['nid'], 'reply', array(
      'did' => $values['nid'],
      'd_title' => $content_title,
      'uid' => $user->uid,
      'qid' => $issue_tnid,
      'q_title' => $issue_title,
    ));
    # output
    if (!$cid) {
      $json['message'] = '<span>' . t('Sorry, your reply not able to post') . '</span>';
    }
    else {
      $item = load_reply($cid);
      $ratings = theme('rating_button', $item);
      if (is_moderator() || $item['uid'] == $user->uid) {
        $delete = theme('delete_button', $item['cid'], 'reply', 'Are you sure you want to delete this argument?');
      }
      $userPicture = UserPicture_small_src($item['uid']);
      $json['content'] = theme('forum_child_reply_template', $item, $userPicture, $ratings, $delete);
      $json['message'] = '<span>' . t('Thanks, Your reply posted!') . '</span>';
    }
  }
  print json_encode($json);
  exit;
}

/*
 * Update Comment
 */

function comment_update($cid, $str_wk = '', $language) {
  db_query("UPDATE {comments} SET str_wk = '%d', language = '%s' WHERE cid = '%d'", $str_wk, $language, $cid
  );
}

/*
 * Forms
 * ********************** */

function issue_callback_helper() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  // Enable the submit/validate handlers to determine whether AHAH-submittted.
  $form_state['ahah_submission'] = TRUE;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  return $form;
}

function ahah_render($fields, $name) {
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];

  return drupal_render($new_form);
}

// add vote for issue
function issue_add_vote($dummy = '', $nid = '') {
  global $user;
  $form = array();
  if (empty($nid))
    $nid = arg(1);

  $node = node_load($nid);

  // IMPORTANT get translate nid (tnid) for current node
  $tnid = get_tnid($nid);
  $tnode = node_load($tnid);
  $form['#nid'] = $tnid;
  if ($node->choice) {
    $list = array();
    foreach ($node->choice as $i => $choice) {
      $list[$i] = '<span class="ch">' . check_plain($choice['chtext']) . '</span>';
    }
    $form['choice'] = array(
      '#type' => 'radios',
      '#default_value' => -1,
      '#options' => $list,
    );
  }

////////////////////////
  if (user_is_logged_in()) {
    if (arg(0) != 'issues_solr2') {
      // get suggest answer for current issue
      $answers = "SELECT * FROM suggest_answer where qid='" . $nid . "'  ";
      $anslist = db_query($answers);
      $count_row = db_result(db_query($answers));

      // user should login to participate with suggest answers
      $err = 0;
      if (isset($count_row) && $count_row > 0) {
        while ($answerfet = db_fetch_object($anslist)) {
          $options[$answerfet->said] = '<span class="ch">' . $answerfet->answer . '</span>';
        }
        $mysugg = db_result(db_query("SELECT answer_id FROM {suggest_answer_vote} WHERE qid = '$nid' AND uid = '$user->uid'"));
        /* $form['add_vote'] = array(
          '#type' => 'fieldset',
          '#title' => t('...Or submit a different answer'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#tree' => TRUE,
          ); */
        $form['add_vote']['suggested_answer'] = array(
          '#type' => 'radios',
          '#options' => $options,
          '#default_value' => $mysugg,
          '#prefix' => '<div class="choices additional">',
          '#suffix' => '</div>'
        );
      }
      $alreadyAdded = db_result(db_query("SELECT COUNT(said) FROM {suggest_answer} WHERE qid = '$nid' AND uid = '$user->uid'"));
      $alreadyVotedSuggest = db_result(db_query("SELECT COUNT(answer_id) FROM {suggest_answer_vote} WHERE qid = '$nid' AND uid = '$user->uid'"));
      $alreadyVotedMain = db_result(db_query("SELECT COUNT(chorder) FROM {poll_votes} WHERE nid = '$nid' AND uid = '$user->uid'"));
      // check whether the user already suggested the answer. if yes do not allow him to vote
      // also check whether the user already voted for this issue
      if ($alreadyAdded == 0 && $alreadyVotedSuggest == 0 && $alreadyVotedMain == 0) {

        /*
          $form['submit_suggest_vote'] = array(
          '#type' => 'submit',
          '#value' => t('Vote'),
          ); */
      }
      /*   else {
        $form['add_vote']['vote_error'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="suggest-error">',
        '#value' => t('You are not able to vote from suggested answers list. You have already voted or suggested a new answer.'),
        '#suffix' => '</div>',
        );
        $err = 1;
        } */
    }

    // user can suggest only one answer per issue
    if (arg(0) != 'issues_solr2') {
      //krumo($alreadyAdded);
      if ($alreadyAdded == 0) {
        $form['add_vote'] = array(
          '#type' => 'fieldset',
          '#title' => t('...Or submit a different answer'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#tree' => TRUE,
        );
        $form['add_vote']['new_suggest_answer'] = array(
          '#type' => 'textfield',
          '#size' => 38,
          '#description' => t('(Answers must not exceed 140 carachters in length)'),
          '#attributes' => array('class' => 'floatleft'),
          '#maxlength' => 140,
          '#id' => 'Answer3',
          '#prefix' => '<div class="nsa-wrapper"><table><tr><td class="first">',
          '#suffix' => '</td><td>',
        );
        if (empty($nid))
          $nid = arg(1);
        $form['add_vote']['nid'] = array(
          '#type' => 'hidden',
          '#value' => $nid,
        );

        $form['add_vote']['submit_suggest_answer'] = array(
          '#type' => 'submit',
          '#value' => t('Add Answer'),
          '#attributes' => array('class' => 'add-answer2 light'),
          '#suffix' => '</td></tr></table></div>',
        );
      }
      elseif ($err == 0) {
        $form['vote_error'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="suggest-error">',
          '#value' => t('You have already suggested a answer for this issue.'),
          '#suffix' => '</div>',
        );
      }
    }
  }
  else {
    $form['login_error'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="login-error">',
      '#value' => t('You should login to vote or post suggest answers.'),
      '#suffix' => '</div>',
    );
  }

  ////////////////////////
  if (arg(0) == 'issues_solr2') {
    $form['#id'] = 'issue_edit_form_stream';
    $form['nid_val'] = array(
      '#type' => 'hidden',
      '#value' => $tnid,
      '#id' => 'nid_val'
    );
    $form['def_vote'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#id' => 'def_vote'
    );
    $form['vote_type'] = array(
      '#type' => 'hidden',
      '#value' => 'add',
      '#id' => 'vote_type'
    );
    $form['#validate'] = '';
  }
  // check login before vote
  $loginBoxClass = $user->uid == 0 ? 'openlogin_box' : '';
  $form['check_login'] = array('#type' => 'hidden', '#value' => $user->uid, '#id' => 'check_login');


  if (arg(0) == 'issues_solr2') {
    $voteCount = db_result(db_query("SELECT count(nid) as qcount FROM `poll_votes` where nid='" . $tnid . "'"));
    $debates = db_result(db_query("SELECT count(nid) as fcount FROM `content_type_forum` where field_ref_qid_nid='" . $tnid . "' AND field_type_value = '1'"));
    $resources = db_result(db_query("SELECT COUNT(nid) FROM content_type_forum where  field_ref_qid_nid='$tnid' AND field_type_value = '2'"));

    $link_output = '<p class ="issue-meta">' . l($voteCount . t(' Votes'), 'node/' . $nid) . "/ " . l($debates . t(' Arguments'), 'node/' . $nid) . "/ " . l($resources . t(' References'), 'node/' . $nid) . '</p>';

    $form['vote-meta'] = array(
      '#type' => 'item',
      '#value' => $link_output,
    );
  }

  $form['change'] = array(
    '#type' => 'submit',
    '#value' => t('Vote'),
    '#attributes' => array('class' => 'button vote floatright ' . $loginBoxClass . ''),
    '#id' => 'edit-change',
  );
  /*
    <p class="issue-meta">
    <a href="<?php print $node_url; ?>"><span id="tot-count-<?php print $tnid; ?>"><?php print $votecount;
    ?></span> <?php print t('Votes'); ?></a>
    / <a href="<?php print $node_url; ?>"><?php print $totaldebates; ?> <?php print t('Arguments'); ?></a>
    / <a href="<?php print $node_url; ?>"><?php print $totalresources; ?> <?php print t('References'); ?></a>
    </p>

   */


  $form['#cache'] = TRUE;

// Provide a more cleanly named voting form theme.
  $form['#theme'] = 'poll_vote';
  return $form;
}

/**
 * Validation function for processing votes
 */
function issue_add_vote_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == 'Add Answer') {
    
  }
  else {
    if ($form_state['values']['choice'] == -1) {
      form_set_error('choice', t('Your vote could not be recorded because you did not select any of the choices.'));
    }
  }
}

/**
 * Submit handler for processing a vote
 */
function issue_add_vote_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == 'Add Answer') {
    global $user;
    $nid = $form_state['values']['add_vote']['nid'];
    $submit = $form_state['clicked_button']['#parents'][1];
    if ($submit == 'submit_suggest_answer') {
      $new_suggest_answer = $form_state['values']['add_vote']['new_suggest_answer'];
      if ($new_suggest_answer != '') {
        db_query("INSERT INTO {suggest_answer} SET uid = '%d', qid = '%d', answer = '%s', date_added = '%s'", $user->uid, $nid, $new_suggest_answer, date('Y-m-d'));
        $sid = db_last_insert_id('suggest_answer', 'said');
        /* New SET NOTIFY LOG */
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $new_suggest_answer);
        set_notify_log($user->uid, $nid, 'suggest_answer', $variable);
        /* New SET NOTIFY LOG */

        drupal_set_message($message = 'Your answer was added!', $type = 'success');
      }
      else {
//echo '<div class="messages error"> Please suggest your answer! </div>';
        drupal_set_message($message = 'Please enter suggest your answer!', $type = 'error');
      }
    }
// suggest a vote
    if ($submit == 'submit_suggest_vote') {
      $suggested_answer = $form_state['values']['suggested_answer'];

// get suggest answer vote count
      $list_own_answer = db_query("select * from {suggest_answer} where said='$suggested_answer'");
      $userown = db_fetch_object($list_own_answer);


      if ($suggested_answer != '') {
        $calvote = db_result(db_query("SELECT COUNT(*) from {suggest_answer_vote} where answer_id='$suggested_answer'"));
        if ($calvote == 0) {
          $votepoint = '1';
        }
        else {
          $votepoint = $userown->vote + 1;
        }

        db_query("INSERT INTO {suggest_answer_vote} SET qid = '%d', uid = '%d', answer_id = '%d', vote_date = '%s'", $nid, $user->uid, $suggested_answer, date('Y-m-d'));
        db_query("UPDATE {suggest_answer} SET vote = '%s' WHERE said = '%d' AND qid = '%d'", $votepoint, $suggested_answer, $nid);
        drupal_set_message($message = 'Your vote was added!', $type = 'success');
      }
      else {
        drupal_set_message($message = 'Please select your answer to vote!', $type = 'error');
      }
    }
  }
  else {
    global $user;
    $date_time = date("y-m-d H:i:s", time());
    $nid = $form['#nid'];
    $choice = $form_state['values']['choice'];
    global $user;
//$value_ = 'current';
    if ($user->uid) {
      db_query('INSERT INTO {poll_votes_history} (nid, chorder, uid, date_voted, status) VALUES (%d, %d, %d, "%s", %d)', $nid, $choice, $user->uid, $date_time, 1);
      db_query('INSERT INTO {poll_votes} (nid, chorder, uid) VALUES (%d, %d, %d)', $nid, $choice, $user->uid);
    }
    else {
      db_query("INSERT INTO {poll_votes} (nid, chorder, hostname) VALUES (%d, %d, '%s')", $nid, $choice, ip_address());
      db_query('INSERT INTO {poll_votes_history} (nid, chorder, hostname, date_voted, status) VALUES (%d, %d, %d, "%s", %d)', $nid, $choice, ip_address(), $date_time, 1);
    }
// Add one to the votes.
    db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);

    cache_clear_all();
    drupal_set_message(t('Your vote was recorded.'));
  }
// Return the user to whatever page they voted from.
}

function issue_edit_vote($dummy='', $nid='') {
  $form = array();
  if (empty($nid))
    $nid = arg(1);

  $node = node_load($nid);

// IMPORTANT get translate nid (tnid) for current node
  $tnid = get_tnid($nid);
  $tnode = node_load($tnid);
  if ($node->choice) {
    $list = array();
    foreach ($node->choice as $i => $choice) {
      $list[$i] = '<span class="ch">' . check_plain($choice['chtext']) . '</span>';
    }
    $form['choice'] = array(
      '#type' => 'radios',
      '#default_value' => $tnode->vote,
      '#options' => $list,
      '#nid' => $tnid,
      '#after_build' => array('solr_issues_radios_after_build'),
    );
  }
  $form['#nid'] = $tnid;

  if (arg(0) == 'issues_solr2') {
    $form['#id'] = 'issue_edit_form_stream';
    $form['nid_val'] = array('#type' => 'hidden', '#value' => $tnid, '#id' => 'nid_val');
    $form['def_vote'] = array('#type' => 'hidden', '#value' => $tnode->vote, '#id' => 'def_vote');
    $form['vote_type'] = array('#type' => 'hidden', '#value' => 'edit', '#id' => 'vote_type');
    $form['#validate'] = '';
    $voteCount = db_result(db_query("SELECT count(nid) as qcount FROM `poll_votes` where nid='" . $tnid . "'"));
    $debates = db_result(db_query("SELECT count(nid) as fcount FROM `content_type_forum` where field_ref_qid_nid='" . $tnid . "' AND field_type_value = '1'"));
    $resources = db_result(db_query("SELECT COUNT(nid) FROM content_type_forum where  field_ref_qid_nid='$tnid' AND field_type_value = '2'"));

    $link_output = '<p class ="issue-meta">' . l($voteCount . t(' Votes'), 'node/' . $nid) . "/ " . l($debates . t(' Arguments'), 'node/' . $nid) . "/ " . l($resources . t(' References'), 'node/' . $nid) . '</p>';

    $form['vote-meta'] = array(
      '#type' => 'item',
      '#value' => $link_output,
    );
  }
  if (arg(0) != 'issues_solr2') {

    $form['change'] = array(
      '#type' => 'submit',
      '#value' => t('Change Vote'),
      '#attributes' => array('class' => 'button vote floatright'),
      '#id' => 'edit-change',
    );
  }
  $form['#cache'] = TRUE;

// Provide a more cleanly named voting form theme.
  $form['#theme'] = 'poll_vote';
  return $form;
}

function issue_edit_vote_validate($form, &$form_state) {
  if (!user_is_logged_in()) {

    form_set_error(t('You have to login to do this action!.'));
  }

  if ($form_state['values']['choice'] == -1) {
    form_set_error('choice', t('Your vote could not be recorded because you did not select any of the choices.'));
  }
  if ($form['choice']['#default_value'] == $form_state['values']['choice']) {
    form_set_error('choice', t('Your vote could not be recorded because you did not select any new choices.'));
  }
}

function issue_edit_vote_submit($form, &$form_state) {
  global $user;
  $nid = $form['#nid'];
  $choice = $form_state['values']['choice'];
  $date_time = date("y-m-d H:i:s", time());
  if ($user->uid) {

// db_query('UPDATE {poll_votes_history} set status=%d where nid=%d and uid=%d', 0, $nid, $user->uid);
    db_query('INSERT INTO {poll_votes_history} (nid, chorder, uid, date_voted, status) VALUES (%d, %d, %d, "%s", %d)', $nid, $form['choice']['#default_value'], $user->uid, $date_time, 0);
    db_query('INSERT INTO {poll_votes_history} (nid, chorder, uid, date_voted, status) VALUES (%d, %d, %d, "%s", %d)', $nid, $choice, $user->uid, $date_time, 1);

    db_query('update {poll_votes} set chorder=%d where nid=%d and uid=%d', $choice, $nid, $user->uid);

    /* New SET NOTIFY LOG */
    $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
    $answer = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '%d' AND chorder = '%d'", $nid, $choice));
    $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $answer);
    set_notify_log($user->uid, $nid, 'change_answer', $variable);
    /* New SET NOTIFY LOG */
  }
//minus one the value of previously voted choice
  db_query("UPDATE {poll_choices} SET chvotes = chvotes-1 WHERE nid = %d AND chorder = %d", $nid, $form['choice']['#default_value']);
// Add one to the votes.for new choices
  db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);

  cache_clear_all();
  drupal_set_message(t('Your vote has been updated'));

// Return the user to whatever page they voted from.
}

/* New Feature Ajax Submission */

function issue_vote_submit_ajax($type = '') {
  global $user;
//echo '<pre>'; print_r($form); exit;
  $nid = $_POST['nid_val'];
  $choice = $_POST['choice'] != '' ? $_POST['choice'] : -1;
  $default_vote = $_POST['def_vote'];

  // update vote time
  $date_time = date("y-m-d H:i:s", time());

  if ($type == 'edit') {
    // validation here
    if (!user_is_logged_in()) {

      $msg['message'] = t('You have to login to do this action!.');
    }
    else if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any of the choices.');
    }
    else if ($default_vote == $choice) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    }
    else {
      if ($user->uid) {
        db_query('update {poll_votes} set chorder=%d, date_voted = "%s" where nid=%d and uid=%d', $choice, $date_time, $nid, $user->uid);

        /* New SET NOTIFY LOG */
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $answer = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '%d' AND chorder = '%d'", $nid, $choice));
        $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $answer);
        set_notify_log($user->uid, $nid, 'change_answer', $variable);
        /* New SET NOTIFY LOG */
      }
      //minus one the value of previously voted choice
      db_query("UPDATE {poll_choices} SET chvotes = chvotes-1 WHERE nid = %d AND chorder = %d", $nid, $default_vote);
      // Add one to the votes.for new choices
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      cache_clear_all();


      $msg['message'] = t('Your vote has been updated');
      $msg['success'] = 1;
    }
  }
  else if ($type == 'add') {
    if ($choice == -1) {

      $msg['message'] = t('Your vote could not be recorded because you did not select any new choices.');
    }
    else {
      if ($user->uid) {
        $insert = db_query('INSERT INTO {poll_votes} (nid, chorder, uid, date_voted) VALUES (%d, %d, %d, "%s")', $nid, $choice, $user->uid, $date_time);
      }
      else {
        db_query("INSERT INTO {poll_votes} (nid, chorder, hostname, date_voted) VALUES (%d, %d, '%s', '%s')", $nid, $choice, ip_address(), $date_time);
      }

      // Add one to the votes.
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $choice);


      /* New SET NOTIFY LOG */
      $form = array();
      $form['#nid'] = $nid;
      $form['#post']['choice'] = $choice;
      add_vote_notify($form);
      /* New SET NOTIFY LOG */

      cache_clear_all();
      if ($insert) {
        $msg['message'] = t('Your vote has been recorded');
        $msg['success'] = 1;
      }
      else {
        $msg['message'] = t('Your vote was not recorded, Try again later');
      }
    }
  }
  else {
    $msg['message'] = t('Error in poll voting');
  }
  print json_encode($msg);
}

/* New Feature Ajax Submission */

/**
 * Implementation of hook_form_alter().
 */
function issue_form_alter(&$form, $form_state, $form_id) {
  $res->field_filepath[0]['value'] = $file_im;
  if ($form_id == 'user_relationships_ui_request') {

    $form['#submit'][] = 'add_follow_notify';
  }
  if ($form_id == 'subscriptions_add_form') {
    $form['#submit'][] = 'add_subscription_notify';
  }
  if ($form_id == 'issue_add_vote') {
    // echo '<pre>';print_r($form);exit;
    $form['#submit'][] = 'choice_vote_date_update';
    $form['#submit'][] = 'add_vote_notify';
    $form['#submit'][] = 'chk_profile_complete';
    $form['#validate'][] = 'check_user_anonymous';
    //echo $form_id."<pre>";  print_r($form);exit;
  }
  if ($form_id == 'issue_edit_vote') {
    // $form['#action'] = 'qlite/view/'.$form['#nid'];
    $form['#submit'][] = 'choice_vote_date_update';
    $form['#submit'][] = 'chk_profile_complete';
  }
  if ($form_id == 'poll_node_form') {
    //$form['#after_build'][] = 'issue_after_build';
    $form['field_issue_state']['#access'] = false;
    $form['field_issue_city']['#access'] = false;

    //echo "<pre>";
    //print_r($form); exit;
    // echo $form['#node']->nid; exit;
  }
  if ($form_id == 'abuse_report_form') {
    //  echo "<pre>";
    //print_r($form);
    //$form['#after_build'][] = 'issue_after_build';
    $form['reason'] = array(
      '#type' => 'radios',
      '#title' => '<small>' . t('Which one of Heard Mentality’s Guidelines and Principles is this debate posting infringing?') . ' <a href="">' . t('Read Guidelines') . '</a></small>',
      '#options' => array_filter($form['reason']['#options']),
      '#required' => TRUE,
      '#default_value' => variable_get('reason', 1),
    );

    $form['body'] = array('#type' => 'textarea',
      '#resizable' => FALSE,
      '#cols' => 75);

    $form['op'] = false;
    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'),
      '#ahah' => array(
        'wrapper' => 'log_res',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#attributes' => array('class' => 'submit-issue leftfloat'));

    $form['#submit'][] = 'add_flag_notify';
  }
}

function choice_vote_date_update($form, &$form_state) {
  global $user;
  //update the date that has to be set while adding or editing vote due to merge issue problem
  $nid = !empty($form['#nid']) ? $form['#nid'] : $form['#node']->nid;
  $date_time = date("y-m-d H:i:s", time());
  //$date_time=strtotime($date_time);

  db_query("update {poll_votes} set `date_voted`='$date_time' where uid=%d and nid=%d", $user->uid, $nid);

  //update the date that has to be set while adding or editing vote
}

function check_user_anonymous($form, &$form_state) {

  if (user_is_anonymous())
    form_set_error('', t('Please login and cast your vote to see the reports of this issue ! '));
}

function issue_after_build($form, &$form_state) {
  // allter the form values: Stuff!

  foreach (element_children($form['choice']) as $key) {
    
  }
  return $form;
}

function issue_nodeapi($node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if ($node->type == 'poll') {
    switch ($op) {
      case 'insert':

        break;
      case 'load':

        break;
      case 'view':
        $output = '';
        global $base_url;
        $icons_path = drupal_get_path('module', 'issue') . '/icons';
        drupal_add_js(array('google_map_icons' => "$icons_path"), 'setting');
        drupal_add_js(array('base_url' => "$base_url"), 'setting');
        drupal_add_js(drupal_get_path('module', 'issue') . '/js/add_new_form.js');
        drupal_add_js(drupal_get_path('theme', 'heardmentalitylight') . '/javascripts/room_reservation.js');
        drupal_add_js(drupal_get_path('module', 'debate') . '/scripts/debate.js');
        drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/subtab.js');
        drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');
        drupal_set_html_head('<script>
            var uid="' . $user->uid . '";
                      </script>');
        if ($user->initpop == 1 && $user->uid > 1) {
          drupal_add_js('$(document).ready(function () { loadeditquestion(gSitePath+"profile/edit/1","Edit Profile ");});', 'inline');
          $user_data = array('initpop' => 2);
          user_save($user, $user_data);
        }
        drupal_add_js(drupal_get_path('module', 'quest_lite') . '/scripts/wave.js', 'theme');
        // set context to display in front page 
        $node->context = $node->body;
        $node->style = drupal_link_color($user->uid, $node->nid);
        if (user_is_logged_in()) {
          $node->suggest = drupal_get_form('issue_suggest_form', $node->nid);

          // IMPORTANT get translate nid (tnid) for current node
          $tnid = get_tnid($node->nid);
          $tnode = node_load($tnid);
          if ($tnode->allowvotes) {
            $output .= drupal_get_form('issue_add_vote', $node->nid);
            $node->content['body'] = array(
              '#value' => $output,
            );
          }
          else {
            unset($node->content['body']);
            // suggest answer calculation here
            suggest_answer_replacement($node->nid);
            $output .= drupal_get_form('issue_edit_vote', $node->nid);
            $node->content['body'] = array(
              '#value' => $output,
            );
          }
        }
        else {
          unset($node->content['body']);
          $output .= drupal_get_form('issue_add_vote', $node->nid);
          $node->content['body'] = array
            (
            '#value' => $output,
          );
        }
        $node->allowvotes = $tnode->allowvotes;
        // selected radio button stays green
        if ($node->allowvotes == '' && arg(0)) {
          $radCss = 'jQuery(document).ready(function(){
                                jQuery("input[name=choice]:checked").parents("div.form-item").addClass("staygreen");
                                });';
          drupal_add_js($radCss, 'inline');
        }
        // selected radio button stays green
        // abuse flag form ############
        $object = _abuse_load('node', $tnid);
        $reported = db_result(db_query("SELECT COUNT(*) FROM {abuse} WHERE type='%s' AND oid=%d AND uid=%d", 'node', $tnid, $user->uid));
        if ($reported > 0) {
          $flagForm = t('We have already received your report.  Thank you very much!');
        }
        else if ($user->uid == $object->uid) {
          $flagForm = t('Sorry, you cannot flag your own content');
        }
        else {
          $flagForm = drupal_get_form('abuse_report_form', $object, $user);
        }
        // abuse flag form ############


        $node->flagForm = $flagForm;
        // only for search issues
        //if (arg(0) == 'issues') {
        //votes
        $tnid = get_tnid($node->nid);
        $tnode = node_load($tnid);
        $node->tnid = $tnid;
        $voteCount = db_result(db_query("SELECT count(nid) as qcount FROM `poll_votes` where nid='" . $tnid . "'"));
        //debates
        $debates = db_result(db_query("SELECT count(nid) as fcount FROM `content_type_forum` where field_ref_qid_nid='" . $tnid . "' AND field_type_value = '1'"));
        //resources
        $resources = db_result(db_query("SELECT COUNT(nid) FROM content_type_forum where  field_ref_qid_nid='$tnid' AND field_type_value = '2'"));
        $node->votecount = $voteCount;
        $node->totaldebates = $debates;
        $node->totalresources = $resources;

        // categories
        $ctitle = array();
        $sctitle = array();
        $ssctitle = array();
        $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
        $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

        $catVals = array();
        while ($cat = db_fetch_object($csql)) {
          $catVals[] = $cat->tid;
        }
        if (!empty($catVals)) {

          $cat = implode(",", $catVals);
          $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
          while ($ncat = db_fetch_object($ncats)) {
            $cat = $ncat->tid;
            $ctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
            // parent categories
            $scats = get_node_tree_child($cat, $tnid);
            foreach ($scats as $scat) {
              $sctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
              // first level categories
              $sscats = get_node_tree_child($scat, $tnid);
              foreach ($sscats as $sscat) {
                $ssctitle[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
                // second level categories
              }
            }
          }
        }
        $node->catsubject = !empty($ctitle) ? rtrim(implode(",", $ctitle)) : 'none';
        $node->catarea = !empty($sctitle) ? rtrim(implode(",", $sctitle)) : 'none';
        $node->catdetail = !empty($ssctitle) ? rtrim(implode(",", $ssctitle)) : 'none';
        ////////////


        break;
    }
  }
}

function issue_save($array='') {
  global $user;
  $account = user_load(array('uid' => $user->uid));
  $node = new StdClass();
  $node->type = 'poll';
  $node->create = time();
  $node->title = $array['q_quest'];
  $node->body = $array['q_context'];
  $node->uid = $account->uid;
  $node->status = 1;
  $node->active = 1;
  node_save($node);


  if (!user_access('administer nodes')) {
    // Make sure all votes are 0 initially
    foreach ($node->choice as $i => $choice) {
      $node->choice[$i]['chvotes'] = 0;
    }
    $node->active = 1;
  }

  db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);

  $j = 0;
  for ($i = 1; $i <= $array['ans_cnt']; $i++) {
    $name = "q_ans" . $i;

    if (!empty($array[$name])) {

      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $array[$name], '0', $j++);
    }
  }

  /* New SET NOTIFY LOG */
  //set_notify_log($uid , $message_id, $nid, $variable)
  $qid = $node->nid;
  $qtitle = $node->title;
  $variable = array('qid' => $qid, 'q_title' => $qtitle, 'uid' => $user->uid);
  set_notify_log($user->uid, $qid, 'add_question', $variable);
  /* New SET NOTIFY LOG */

//url alias
  $dst = clean_url(myTruncate($node->title, 100, ''), '', '-', $node->nid);
  $url = 'node/' . $node->nid;
  db_query("INSERT INTO {url_alias} (src, dst, language) VALUES ('%s', '%s', '%s')", $url, $dst, 'en');
  //Related Issues
  if (!empty($array['chk_rel_issue'])) {
    $cont_type = array('content_types' => array('poll' => 'poll'));
    $relatedissues = array_combine($array['chk_rel_issue'], $array['chk_rel_issue']);
    $arrayid = array('nids' => $relatedissues);
    $manual = array('enable' => 1, 'nodes' => array('poll' => $arrayid));
    $related = array('nid' => $node->nid, 'content_types' => $cont_type, 'taxonomy' => array(''), 'manual' => $manual, 'sort' => array('criteria' => 'none'));
    db_query("INSERT INTO {noderecommendation_node} (nid, data) VALUES (%d, '%s')", $node->nid, serialize($related));
  }
  return $node;
}

function issue_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Node block'),
      );
      $blocks[1] = array(
        'info' => t('Details Tab'),
      );
      $blocks[2] = array(
        'info' => t('Issue Real Info'),
      );
      $blocks[3] = array(
        'info' => t('Issue Search Form'),
      );
      $blocks[4] = array(
        'info' => t('Issue Filter Options'),
      );
      $blocks[5] = array(
        'info' => t('Popular Categories'),
      );

      return $blocks;

    case 'view':
      switch ($delta) {
        case '0':

          $block['subject'] = "Issue Reporting";
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);

            $node = node_load($nid);

            if (!empty($node) && $node->type == 'poll') {
              //$tab = issue_view_results($nid, false, false, true);
              $tab = view_issue_results($nid);
            }
          }
          $block['content'] = $tab;

          break;
        case '2':
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);
          }
          $nid = $nid != '' ? $nid : get_qid();
          $block['subject'] = "Issue Details with Category & Location";
          $item = _issue_information($nid);
          if ($item) {
            $subject = $item['subject'];
            $area = $item['area'];
            $detail = $item['detail'];
            $postedby = $item['postedby'];
            $created = $item['created'];
            $original_nid = $item['original_nid'];
            $original_language = $item['original_language'];
            $orgLangKey = $item['orgLangKey'];

            $block['content'] = theme('issue_information', $nid, $created, $postedby, $subject, $area, $detail, $original_nid, $original_language, $orgLangKey);
          }
          break;
        case '3':
          $block['subject'] = 'Issue Search Form';
          $block['content'] = drupal_get_form('issue_search_form');
          break;
        case '4':
          $block['subject'] = 'Issue Filter Options';
          $block['content'] = issue_filter_options();
          break;
        case '5':
          $block['subject'] = 'Popular Categories';
          $block['content'] = popular_categories();
          break;
      }
      return $block;
  }
}

function issue_pundit_tab($qid='') {
  global $base_url;
  //	$output='sample content Gurus';
  $profileBadges = getAnsweredUsers($qid);

  $output1 = '';
  if (count($profileBadges) > 0) {

    $pat = $base_url . '/' . drupal_get_path('module', 'profile');
    foreach ($profileBadges as $profile) {
      $details = load_user($profile['uid']);
      $output1.=load_user_badge($profile['uid']);
      $output1 .= '<div class="clr"></div><br/>';
    }
  }
  else {
    $output1 = "<div class='messages warning'>" . t('No Pundit(s) found for this issue') . "</div>";
  }
  $output = $output1;

  return $output;
}

function load_taxonomy($nid='') {

  global $user;
  $arrcategories = taxonomy_node_get_terms($nid);
  foreach ($arrcategories as $catterm) {
    $cattermid = $catterm->tid;
    break;
  }
  // get category for node
  //$terms = get_quest_taxonomy($nid);
  $terms = get_question_categories($nid);
  if ($terms) {
    $category .= $terms;
  }
  else {
    $category.= 'No associated categories.';
  }
  //  print render_view_page(2, $cattermid);
  ///new tech
  //$node_content = node_view(node_load($nid));
//$vars['node_content'] = $node_content;
//print_r($node_content);
//print drupal_render($node_content->field_tags);

  $node = node_load($nid);
  if (module_exists('taxonomy')) {
    $terms = taxonomy_link('taxonomy terms', $node);
    $html = theme('links', $terms, array('class' => 'node-terms'));
  }
  else {
    $html = 'No associated categories.';
  }

  //return $html;
  return $category;
}

function issue_view_results(&$nid, $teaser, $page, $block) {
  global $user;
  // Count the votes and find the maximum
  $node = node_load($nid);
  $tnid = get_tnid($nid);
  $tnode = node_load($tnid);
  // $total_votes = 0;
  // $max_votes = 0;
  // foreach ($node->choice as $choice) {
//    if (isset($choice['chvotes'])) {
//      $total_votes += $choice['chvotes'];
//      $max_votes = max($max_votes, $choice['chvotes']);
//    }
//  }
//  $poll_results = '';
//echo $node->allowvotes; exit;
  // get debate, resource, pundit counts
  $debateCount = db_result(db_query("SELECT COUNT(nid) FROM {content_type_forum} WHERE field_type_value = '1' AND field_ref_qid_nid = '$tnid'"));
  $resourceCount = db_result(db_query("SELECT COUNT(nid) FROM {content_type_forum} WHERE field_type_value = '2' AND field_ref_qid_nid = '$tnid'"));
  $punditCount = count(getAnsweredUsers($nid));
  return theme('issue_results', $nid, t($debateCount), t($resourceCount), t($punditCount), $tnode->allowvotes);
}

// get taxonomy id
function get_taxonomy_id($module = '', $name = '') {
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", $module));
  $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = '%d' AND name = '%s'", $vid, $name));
  return $tid;
}

function add_vote_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form);
  $nid = $form['#nid'];
  $choice = $form['#post']['choice'];
  $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
  $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $choice);
  set_notify_log($user->uid, $nid, 'add_vote', $variable);
  /* New SET NOTIFY LOG */

  _send_votenotify($nid);


  # increasepoints('2', $nid, '0');
  up_actions_execute('ansquestion', $user->uid);
  // user_points_action_fired('ansquestion', $user->uid);
}

function add_flag_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $nid = $form['#parameters'][2]->oid;
  $qtitle = $form['#parameters'][2]->title;
  $variable = array('qid' => $nid, 'q_title' => $qtitle);
  set_notify_log($user->uid, $nid, 'question_flag', $variable);
  /* New SET NOTIFY LOG */
}

function dates_range($date1, $date2) {
  if (empty($date1))
    $date1 = format_date(time(), 'custom', 'Y-m-d');
  if (empty($date2))
    $date1 = format_date(time(), 'custom', 'Y-m-d');

  if ($date1 < $date2) {
    $dates_range[] = $date1;
    $date1 = strtotime($date1);
    $date2 = strtotime($date2);
    while ($date1 != $date2) {
      $date1 = mktime(0, 0, 0, date("m", $date1), date("d", $date1) + 1, date("Y", $date1));
      $dates_range[] = date('Y-m-d', $date1);
    }
  }
  return $dates_range;
}

function _send_votenotify($qid='') {
  global $user;
  $qry = "insert into notification (uid,follower_action,is_question,new_answer,node_id) values('" . $user->uid . "','1','1','1'," . $qid . "' ) ";

  hm_mails($qid, '', 'vote_answer');
}

// short answer for issue
// follow notify
function add_follow_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $target = $form['#parameters'][2]->uid;
  $uid = $user->uid;
  $variable = array('target_id' => $target);
  set_notify_log($uid, '', 'user_follow', $variable);
  /* New SET NOTIFY LOG */
}

function add_subscription_notify($form, &$form_state) {
  global $user;
  /* New SET NOTIFY LOG */
  //echo '<pre>'; print_r($form); exit;
  $tid = $form['sid']['#value'];
  $category = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '%d'", $tid));
  $uid = $user->uid;
  $variable = array('tid' => $tid, 'category' => $category);
  set_notify_log($uid, '', 'category_follow', $variable);
  /* New SET NOTIFY LOG */
}

function chk_profile_complete($form, &$form_state) {
  global $user;
  ////////////question search vote added end here
  //first time vote shows profile update popup
  $ccnt = user_load(array('uid' => $user->uid));

  if ($ccnt->prompt == 1 && is_null($user->initpop)) {
    $user_data = array('initpop' => '1');
    user_save($user, $user_data);
  }
}

function getAnsweredUsers($question_id = NULL) {
  /*   $query = "SELECT pav.uid, sav.uid
    from suggest_answer_vote sav
    INNER JOIN possible_answer_vote pav on sav.qid=pav.qid
    where 1=1 AND pav.qid = '".$question_id."' OR  sav.qid = '".$question_id."'
    order by  pav.uid"; */
  $query = "SELECT  sav.uid from suggest_answer_vote sav
			where  sav.qid ='" . $question_id . "' UNION
			SELECT pav.uid
			from poll_votes pav
			where  pav.nid ='" . $question_id . "'";

  $userids = ExecuteQuery($query, "select");
  if (count($userids) <= 0) {
    return $userids;
  }
  else {
    $Ids = array();
    foreach ($userids as $userid) {
      $Ids[] = $userid['uid'];
    }
    $separated = implode(",", $Ids);
    $separated = '( ' . $separated . ')';

    /*   $query = "SELECT bt.name as badgename, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
      from profile_badges pb
      INNER JOIN users u on pb.uid=u.uid
      LEFT JOIN badge_types bt on  bt.id = pb.badge_type_id
      WHERE 1=1 AND u.uid  IN".$separated;
      $query = "SELECT up.image, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
      from profile_badges pb
      INNER JOIN users u on pb.uid=u.uid
      LEFT JOIN user_profile up on  up.uid = u.uid
      WHERE 1=1 AND u.uid  IN" . $separated; */
    $query = "(select ps.uid from {term_node} as qc join  {pundit_section} as ps on ps.cat_id=qc.tid join {users} as u on u.uid=ps.uid where u.status=1 AND qc.nid=$question_id AND ps.uid IN $separated group by ps.uid) union (select ps.uid from {term_node} as qc join  {pundit_section} as ps on ps.cat_id=qc.tid join {users} as u on u.uid=ps.uid where u.status=1 AND qc.nid=$question_id AND ps.uid IN $separated group by ps.uid) ";
    $profileBadges = ExecuteQuery($query, "select");
  }
  return $profileBadges;
}

function suggest_answer_replacement($qid = '') {

  $query = "SELECT nid, SUM(nid) as possiblevote FROM poll_votes where nid='" . $qid . "' GROUP BY nid";
  $query_list = db_query($query);
  $fetvot = db_fetch_object($query_list);
  $vot1 = $fetvot->possiblevote;

  $query_sugest = "SELECT qid, SUM(vote) as suggestv FROM suggest_answer where qid='" . $qid . "' GROUP BY qid";
  $query_sugestlist = db_query($query_sugest);
  $fetvotsugest = db_fetch_object($query_sugestlist);
  $vot2 = $fetvotsugest->suggestv;
  $totalvotes = $vot1 + $vot2;

  $vSqlsv = "select * from {vote_percent} where id='1' ";
  $rlistbv = db_query($vSqlsv);
  $oListquestbv = db_fetch_object($rlistbv);

  $percent = $oListquestbv->percent / 100 * $totalvotes;
  //echo $percent;
  $tot = $percent * 100;


  $vsans = "select * from {suggest_answer} where  qid=$qid ";
  $vslist = db_query($vsans);

  while ($vlsistquest = db_fetch_object($vslist)) {
    $answprcs = $vlsistquest->vote / 100 * $totalvotes;

    $valuss = $answprcs * 100;
    // $valuss = 2000;
    if ($valuss > $tot) {
      $insert_change = "insert into suggest_ans_changeids (qid,ans_id)Values('" . $qid . "','" . $vlsistquest->said . "') ";
      $listchnge = db_query($insert_change);

      $select_allv = "select * from suggest_answer_vote where answer_id=$vlsistquest->said  ";
      $listam = db_query($select_allv);

      while ($listamqry = db_fetch_object($listam)) {

        $insert_white = "insert into suggest_ans_tmp (qid,uid,answer_id,vote,vote_date)Values('" . $qid . "','" . $listamqry->uid . "','" . $vlsistquest->said . "','" . $vlsistquest->vote . "','" . $listamqry->vote_date . "') ";
        $qrylist = db_query($insert_white);
      }
      //echo $valuss;
      //echo $vlsistquest->said;
    }
  }

  $mysql_sug_rows = mysql_num_rows(db_query("select distinct(answer_id) from suggest_ans_tmp  "));


  //echo $mysql_sug_rows;
  //$vpans = "select * from {possible_answer} where  qid='" . $qid . "' order by vote desc limit 0,$mysql_sug_rows ";
  $vpans = "select * from {poll_choices} where  nid='" . $qid . "' order by chvotes desc limit 0,$mysql_sug_rows ";

  $vplist = db_query($vpans);

  while ($vplistquest = db_fetch_object($vplist)) {
    $insert_list_ids = "insert into possible_answer_changeids (qid,ans_id)Values('" . $qid . "','" . $vplistquest->chorder . "') ";
    $qrylist_change = db_query($insert_list_ids);

    $select_allvp = "select * from poll_votes where chorder= '$vplistquest->chorder' AND nid = '$qid'  ";
    $listamp = db_query($select_allvp);

    while ($listamqryamp = db_fetch_object($listamp)) {

      $insert_whited = "insert into possible_answer_tmp (qid,uid,panswer_id,vote,vote_pdate)Values('" . $qid . "','" . $listamqryamp->uid . "','" . $vplistquest->paid . "','" . $vplistquest->vote . "','" . $listamqryamp->vote_pdate . "') ";
      $qrylist = db_query($insert_whited);
    }
  }

  $qry1 = db_query("select * from suggest_ans_changeids where qid ='" . $qid . "'");
  $array1 = array();
  while ($row1 = db_fetch_object($qry1)) {
    $array1[] = $row1->ans_id;
  }

  $qry2 = db_query("select * from possible_answer_changeids where qid ='" . $qid . "' ");
  while ($row2 = db_fetch_object($qry2)) {
    $array2[] = $row2->ans_id;
  }

  for ($x = 0; $x < sizeof($array1); $x++) {
    $array[] = $array1[$x] . " - " . $array2[$x];

    $array1[$x] . " - " . $array2[$x];

    $update_idss = db_query("update possible_answer_tmp set  panswer_id='$array1[$x]'  where panswer_id='$array2[$x]' ");


    $updateval = db_query("update suggest_ans_tmp set  answer_id='$array2[$x]' where answer_id='$array1[$x]'");

    $deletsug = db_query("delete from suggest_answer_vote where answer_id='$array1[$x]'");

    $deletpos = db_query("delete from poll_votes where chorder='$array2[$x]' AND nid = '$qid'");

    $rechange_list = db_query("select * from {poll_choices} where  chorder='" . $array2[$x] . "' AND nid = '$qid' ");

    $rechg = db_fetch_object($rechange_list);
    $rechg->chvotes;

    $rechange_list_new = db_query("select * from {suggest_answer} where  said='" . $array1[$x] . "'  ");

    $rechg_new = db_fetch_object($rechange_list_new);
    $rechg_new->vote;
    $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='3'";
    $rs_mgmt = db_query($sel_user_cmt);
    $list_content = db_fetch_object($rs_mgmt);

    $vuser_ownersug = "select * from {users} where  uid='" . $rechg_new->uid . "'";
    $userown = db_query($vuser_ownersug);
    $ufet_qwn = db_fetch_object($userown);
    $ufet_qwn->mail;
    if ($usert->notify_etype == 1) {
      $subject_proj = $list_content->subject;


      //////////mail for suggest answer owner///////////////


      $contentm = str_replace("#uname#", $ufet_qwn->name, $list_content->content);
      $contentm = str_replace("#quest#", $oListquest->title, $contentm);
      //echo  $contentm;

      $mail_success = htmlmail_function($ufet_qwn->mail, $subject_proj, $contentm, '');
    }
    if ($usert->notify_itype == 1) {
      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $rechg_new->uid . "','1','1','" . $qid . "') ");
    }
    $update_ids = "update poll_choices set  chtext='$rechg_new->answer', chvotes='$rechg_new->vote'  where chorder='$array2[$x]' AND nid = '$qid' ";
    $updateqry = db_query($update_ids);

    $update_sug = "update suggest_answer set  answer='$rechg->chtext', vote='$rechg->chvotes',uid='$oListquest->uid' where said='$array1[$x]' ";
    $updateqrys = db_query($update_sug);


    /////////////Mail For question Author///////////


    $vuser = "select * from {users} where  uid='" . $oListquest->uid . "'";
    $username = db_query($vuser);
    $ufet = db_fetch_object($username);
    $ufet->mail;
    if ($ufet->notify_etype == 1) {
      $subject_projm = 'Heard Menatlity-Answer Has Been Replaced For Your Question';


      $contentmown = str_replace("#uname#", $ufet->name, $list_content->content);
      $contentmown .= str_replace("#quest#", $oListquest->title, $contentmown);
      //	echo  $contentmown;

      $mail_success = htmlmail_function($ufet->mail, $subject_projm, $contentmown, $from, '');


      // $mail_success = htmlmail_function($ufet->mail,$subject_proj,$messpro_list,$from,'');
    }
    $delossld = "delete  from possible_answer_changeids where ans_id='" . $array2[$x] . "'";
    $delssqry = db_query($delossld);
    $deloldwds = "delete  from suggest_ans_changeids where ans_id='" . $array1[$x] . "'";
    $delqrysss = db_query($deloldwds);
    if ($ufet->notify_itype == 1) {
      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $ufet->uid . "','1','1','" . $qid . "') ");
    }
  }

  $seltmp = db_query("select * from suggest_ans_tmp");

  while ($tmp_rec = db_fetch_object($seltmp)) {

    $insert_dumm = "insert into poll_votes (nid,uid,chorder) values ('" . $tmp_rec->qid . "','" . $tmp_rec->uid . "','" . $tmp_rec->answer_id . "','" . $tmp_rec->vote_date . "')";
    $dumy_rec = db_query($insert_dumm);
    //provocateur badge
    provocateur($tmp_rec->qid, $tmp_rec->answer_id);
    ///////////////////////mail notification for who voted answers ///////////////////////////////
    $vusers = "select * from {users} where  uid='" . $tmp_rec->uid . "' ";
    $usernames = db_query($vusers);
    $ufets = db_fetch_object($usernames);
    $ufets->mail;
    if ($ufets->notify_etype == 1) {
      $subject_projlist = 'Heard Menatlity-Answer Has Been Replaced ';


      $sel_user_cmt = "SELECT * FROM notification_mail_format Where id='3'";
      $rs_mgmt = db_query($sel_user_cmt);
      $list_content = db_fetch_object($rs_mgmt);
      $contentmlist = str_replace("#uname#", $ufets->name, $list_content->content);
      $contentmlist = str_replace("#quest#", $oListquest->title, $contentmlist);
      // $contentm;

      $mail_success = htmlmail_function($ufets->mail, $subject_projlist, $contentmlist, '');
    }

    if ($ufets->notify_itype == 1) {


      $insert_notify = db_query("insert into notification (uid,new_answer,is_question,node_id) values('" . $tmp_rec->uid . "','1','1','" . $qid . "' ");
    }
    $deltmp = db_query("delete  from suggest_ans_tmp");
  }

  $seltmps = db_query("select * from possible_answer_tmp");

  while ($tmp_recs = db_fetch_object($seltmps)) {

    $insert_dumms = "insert into suggest_answer_vote (qid,uid,answer_id,vote_date) values ('" . $tmp_recs->qid . "','" . $tmp_recs->uid . "','" . $tmp_recs->panswer_id . "','" . $tmp_recs->vote_pdate . "')";
    $dumy_recs = db_query($insert_dumms);

    $deltmps = db_query("delete  from possible_answer_tmp");
  }
}

function get_quest_taxonomy($nid) {
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $result = db_query(db_rewrite_sql('SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.nid = %d ORDER BY weight', 't', 'tid'), $vid, $nid);
  $terms = array();
  while ($term = db_fetch_object($result)) {
    $terms[] = $term;
  }
  return $terms;
}

function get_question_categories($nid) {
  global $base_url;
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  $cat = implode(",", $catVals);
  $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($cat)");
  while ($ncat = db_fetch_object($ncats)) {
    $cat = $ncat->tid;

    $ctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
    // parent categories
    $catPath = 'searchquestion?txt_search=&cid=' . $cat;
    $category.= '<div class="butb"><div class="butb-left"></div><div class="butb-bg"><a title="' . $ctitle . '" rel="tag" href="' . $base_url . '/' . $catPath . '">' . $ctitle . '</a></div><div class="butb-right"></div></div>';
    $scats = get_node_tree_child($cat, $nid);
    foreach ($scats as $scat) {

      $sctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
      // first level categories
      $scatPath = 'searchquestion?txt_search=&cid=' . $cat . '&scid=' . $scat;
      $category.= '<div class="butb"><div class="buty-left"></div><div class="buty-bg"><a title="' . $sctitle . '" rel="tag" href="' . $base_url . '/' . $scatPath . '">' . $sctitle . '</a></div><div class="buty-right"></div></div>';
      $sscats = get_node_tree_child($scat, $nid);
      foreach ($sscats as $sscat) {

        $ssctitle = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
        // second level categories
        $sscatPath = 'searchquestion?txt_search=&cid=' . $cat . '&scid=' . $scat . '&sscid=' . $sscat;
        $category.= '<div class="butb"><div class="butg-left"></div><div class="butg-bg"><a title="' . $ssctitle . '" rel="tag" href="' . $base_url . '/' . $sscatPath . '">' . $ssctitle . '</a></div><div class="butg-right"></div></div>';
      }
    }
    $category .= '<br class="clr"/><br class="clr"/>';
  }
  return $category;
}

function get_node_tree_child($tid, $nid) {
  $childrenArray = taxonomy_get_children($tid);
  $children = array();
  $subcats = array();
  foreach ($childrenArray as $key => $value) {
    $children[] = $key;
  }
  if (!empty($children)) {
    $scats = implode(",", $children);
    $nscats = db_query("SELECT tid FROM {term_node} WHERE nid = '$nid' AND tid IN($scats)");
    while ($nscat = db_fetch_object($nscats)) {
      $subcats[] = $nscat->tid;
    }
  }
  return $subcats;
}

function theme_issue_answer($form) {
  // Change the button title to reflect the behavior when using JavaScript.
  drupal_add_js('if (Drupal.jsEnabled) { $(document).ready(function() { $("#edit-poll-more").val("' . t('+ Add another answer') . '"); }); }', 'inline');

  $rows = array();
  $head = t('Possible Answers') . ' <br><small>' . t('Enter atleast two possible answers.') . t('Click Add Another Answer to enter more.') . '</small>';
  $headers = array(
    $head,
  );

  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset($form[$key]['chtext']['#title'], $form[$key]['chvotes']['#title']);

    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['chtext']), 'class' => 'poll-chtext'),
      ),
    );

    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }

  // $output = theme('table', $headers, $rows);
  $output .= drupal_render($form);
  return $output;
}

function issue_link($type, $object, $teaser = FALSE) {

  $nid = $object->nid;
  $tnid = get_tnid($nid);
  $lang = db_result(db_query("SELECT language FROM {node} WHERE nid = '%d' AND tnid = '%d'", $tnid, $tnid));
  $languages = language_list();
  foreach ($languages as $langcode => $language) {
    if ($langcode == $lang) {
      $nodeLanguage = $language;
    }
  }
  // echo '<pre>'; print_r($languages);exit;
  $links['issue_original'] = array(
    'title' => t('View Originally Posted Issue'),
    'href' => 'node/' . $tnid,
    'language' => $nodeLanguage,
    'attributes' => array('class' => 'node-issue-org'),
  );
  return $links;
}

/* * ********* LANGUAGE TRANSLATION *********** */

// get paraent translate id
function get_tnid($nid = '') {
  $res = db_result(db_query("SELECT tnid FROM {node} WHERE nid = '%d'", $nid));
  $tnid = $res != 0 ? $res : $nid;
  return $tnid;
}

// get translated content for debates
// get translated debate replies/ and resource replies
function get_translated_comment($cid = '', $curLanguage = '') {
  $tcid = db_result(db_query("SELECT cid FROM {comments} WHERE tcid = '$cid' AND language = '$curLanguage' AND translate = 1"));
  $tcid = $tcid != '' ? $tcid : $cid;
  $translated = db_result(db_query("SELECT comment FROM {comments} WHERE cid = '$tcid'"));
  return $translated;
}

// issue ahah calllback
function issue_ahah_callback($type = '', $key = '') {
  if ($type == 'category') {
    if ($key == 'scat') {

      $catids[] = $_POST['subject'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName1 = 'area';
      $options[''] = t('AREA');

      $defArea = $_POST['defarea'];
    }
    if ($key == 'sscat') {

      $catids[] = $_POST['area'];
      $catids = empty($catids[0]) ? array() : $catids;
      $fieldName2 = 'detail';
      $options[''] = t('DETAIL');

      $defDetail = $_POST['defdetail'];
    }
    $cids = implode(",", $catids);
    // SET SUB CATEGORIES

    $scats = array();

    foreach ($catids as $catid) {
      $ids = taxonomy_get_children($catid);
      foreach ($ids as $tid => $value) {
        $stid[] = $tid;
      }

      array_push($scats, $stid);
    }
    // print_r($stid);exit;
    $i = 0;
    if (count($stid) > 0) {
      foreach ($stid as $value => $scid) {
        $cnt = taxonomy_term_count_nodes($scid);
        if ($cnt != 0) {
          $options[$scid] = t(db_result(db_query("SELECT name FROM {term_data} WHERE tid = '" . $scid . "'")));
        }
        $i++;
      }
    }

    if ($key == 'scat') {

      $fields['area'] = array('#type' => 'select',
        '#options' => $options,
        '#ahah' => array('wrapper' => 'sub-sub-cat-wrapper',
          'path' => 'issue/ahah/category/sscat',
          'effect' => 'fade',
          'event' => 'change',
        ),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'area',
        '#value' => $defArea,
      );

      $output .= ahah_render($fields, $fieldName1);
    }
    if ($key == 'sscat') {

      $fields['detail'] = array('#type' => 'select',
        '#options' => $options,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#id' => 'detail',
        '#value' => $defDetail);

      $output .= ahah_render($fields, $fieldName2);
    }
  }
  elseif ($type == 'location') {
    // current language
    $lang = $_POST['cur_language'];
    if ($lang == '') {
      $langQuery = " AND n.language = 'en' OR n.language = ''";
    }
    else {
      $langQuery = " AND n.language = '$lang'";
    }
    if ($key == 'state') {
      // select state

      $countryNames[] = $_POST['country'];
      //  krumo($countryNames);
      $fieldNameState = 'state';
      $states[] = t('STATE');
      $defstate = $_POST['defstate'];

      if (!empty($countryNames)) {

        $countryList = geonames_query('countryinfo', NULL, $options);
        foreach ($countryNames as $country) {

          $xyz = geonames_countryinfo($country);
          foreach ($countryList->results as $countryss) {
            if ($country == $countryss['countryname']) {
              $geoid = $countryss['geonameid'];
              break;
            }
          }
          $query = array('geonameid' => $geoid);
          $results = geonames_query('children', $query);
          foreach ($results->results as $state) {
            // get issue state list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_state} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_state_value = '%s' $langQuery", $state['geonameid']));
            if ($count > 0) {
              $states[$state['geonameid']] = $state['name'];
            }
          }
        }
      }
      else {
        $states[] = t('No countries selected');
      }
      $fields['state'] = array('#type' => 'select', '#options' => $states,
        '#ahah' => array('wrapper' => 'city-wrapper',
          'path' => 'issue/ahah/location/city',
          'effect' => 'fade',
          'event' => 'change',),
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defstate,
        '#id' => 's_state',
      );

      $output .= ahah_render($fields, $fieldNameState);
    }
    if ($key == 'city') {
      $steateIds[] = $_POST['state'];
      $fieldNameCity = 'cicty';
      $cities[] = t('CITY');
      $defcity = $_POST['defcity'];

      if (!empty($steateIds)) {
        foreach ($steateIds as $code) {
          //  krumo($code);
          $explode = explode(',', $code);
          //    krumo($explode);
          $query = array('geonameid' => $explode[0]);
          $result = geonames_query('children', $query);
          foreach ($result->results as $state) {
            // get issue city list
            $count = db_result(db_query("SELECT COUNT(*) FROM {content_field_issue_city} AS c LEFT JOIN {node} AS n ON c.nid = n.nid WHERE c.field_issue_city_value = '%s' $langQuery", $state['geonameid'] . $explode[0] . $explode[1]));
            if ($count > 0) {
              $cities[$state['geonameid'] . $explode[0] . $explode[1]] = $state['name'];
            }
          }
        }
      }
      else {
        $cities[] = t('No states selected');
      }

      $fields['city'] = array('#type' => 'select',
        '#options' => $cities,
        '#attributes' => array('class' => 'selectbox-sm'),
        '#value' => $defcity
      );

      $output .= ahah_render($fields, $fieldNameCity);
    }
  }

// set ahah behaviour for inner rendering buttons
  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.
  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {

          $filefield_ahah_settings[$id] = $ahah_settings;
        }
      }
    }
  }

  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, ' . drupal_to_js($filefield_ahah_settings) . ');</script>';
  }

  //print drupal_to_js(array('data' => $output, 'status' => true));
  print drupal_json(array('data' => $output, 'status' => true));
}

////
function _issue_information($nid = '') {
  $node = node_load($nid);
  $tnid = get_tnid($node->nid);
  $users = user_load($node->uid);
  // category lists
  $ctitle = array();
  $sctitle = array();
  $ssctitle = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s' AND module = '%s'", 'Sections', 'taxonomy'));
  $csql = db_query("SELECT td.tid FROM {term_data} as td JOIN {term_hierarchy} as th ON td.tid = th.tid WHERE td.vid = '$vid' AND th.parent = 0");

  $catVals = array();
  while ($cat = db_fetch_object($csql)) {
    $catVals[] = $cat->tid;
  }
  if (!empty($catVals)) {

    $cat = implode(",", $catVals);
    $ncats = db_query("SELECT tid FROM {term_node} WHERE nid = '$tnid' AND tid IN($cat)");
    while ($ncat = db_fetch_object($ncats)) {
      $cat = $ncat->tid;
      $ctitle[$cat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$cat'"));
      // parent categories
      $scats = get_node_tree_child($cat, $tnid);
      foreach ($scats as $scat) {
        $sctitle[$scat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$scat'"));
        // first level categories
        $sscats = get_node_tree_child($scat, $tnid);
        foreach ($sscats as $sscat) {
          $ssctitle[$sscat] = db_result(db_query("SELECT name FROM {term_data} WHERE tid = '$sscat'"));
          // second level categories
        }
      }
    }
  }

  // find originally posted language
  $trans = node_load($tnid);
  $orgLangKey = $trans->language;
  $languages = language_list();
  $orgLanguage = $languages[$orgLangKey]->name;
  $path = drupal_get_path_alias('node/' . $tnid);

  $values['subject'] = $ctitle;
  $values['area'] = $sctitle;
  $values['detail'] = $ssctitle;
  $values['postedby'] = $users->name;
  $values['created'] = format_date($node->created, "custom", "M j Y");
  $values['original_nid'] = $tnid;
  $values['orgLangKey'] = $orgLangKey;
  $values['original_language'] = $orgLanguage;
  return $values;
}

// issue information theme
function theme_issue_information($nid = '', $created = '', $postedby = '', $ctitle = array(), $sctitle = array(), $ssctitle = array(), $original_nid = '', $original_language = '', $orgLangKey = '') {
  global $base_url;
  $info = '';
  $info .= '<div id="issue_information">';
  // created details
  $info .= '<div class="post-by">' . t('Issue posted on ') . $created . '&nbsp;'
          . t('By') . '&nbsp;' . l($postedby, 'profile/' . $postedby) . '</div>';
  //category details
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">SUBJECT</div>';
  if (!empty($ctitle)) {
    foreach ($ctitle as $tid => $subject) {
      $info .= l($subject, 'issues/0/' . $tid . '/0/0/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No subjects found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">AREA</div>';
  if (!empty($sctitle)) {
    foreach ($sctitle as $tid => $area) {
      $parent = taxonomy_get_parents($tid);
      $cid = array_keys($parent);
      $info .= l($area, 'issues/0/' . $cid[0] . '/' . $tid . '/0/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No areas found') . '<br />';
  }
  $info .= '</div>';
  $info .= '<div class="catarea">';
  $info .= '<div class="cat-title">DETAIL</div>';
  if (!empty($ssctitle)) {
    foreach ($ssctitle as $tid => $detail) {
      $sparent = taxonomy_get_parents($tid);
      $ssid = array_keys($sparent);
      $ssparent = taxonomy_get_parents($ssid[0]);
      $cid = array_keys($ssparent);
      $info .= l($detail, 'issues/0/' . $cid[0] . '/' . $ssid[0] . '/' . $tid . '/0/0/0') . '<br />';
    }
  }
  else {
    $info .= t('No details found') . '<br />';
  }
  $info .= '</div>';
  // original language
  $path = drupal_get_path_alias('node/' . $original_nid);
  $info .= '<br />' . t('Issue originally written in') . '&nbsp;' . $original_language . '<br />'
          . l('Click to view in original language', $base_url . '/' . $orgLangKey . '/' . $path);
  $info .= '</div>';
  return $info;
}

// issue results , debates, resources
function view_issue_results($nid = '') {
  global $user, $theme;
  $node = node_load(array('nid' => $nid));

  // get tnid
  $tnid = get_tnid($nid);
  $tnode = node_load($tnid);

  module_load_include('inc', 'issue', 'issue.pages');
  // update view count
  insertviews($node->nid);
  // temp intialize function before user voted for a issue
  $inline1 = 'function initialize(){}';
  drupal_add_js($inline1, 'inline');
  if (user_is_logged_in() && !empty($user) && $tnode->allowvotes != 1) {

    // load insight view 
    $inline = '
                var nid = ' . $nid . '
                jQuery(document).ready(function(){
                  insight_view(nid);
                })
                ';
    drupal_add_js($inline, 'inline');

    $map = report_map($nid);
    $report_percent = report_percent($nid);
    $report_graph = report_graph($nid);
    $ans = load_options($nid);
    $colors = _load_colors_array();

    foreach ($ans as $key => $list) {
      $short_answers[$list['chorder']]['name'] = get_short_answer($nid, $list['chorder']);
      $short_answers[$list['chorder']]['color'] = $colors[$key];
    }

    $results = theme('issue_result_graph_analysis', $map, $report_percent, $report_graph, $short_answers);
  }
  $debates = theme('issue_debate_list', $nid);
  //$resources = theme('issue_resource_list', $nid);
  // get debate, resource, pundit counts
  $debateCount = db_result(db_query("SELECT COUNT(nid) FROM {content_type_forum} WHERE field_type_value = '1' AND field_ref_qid_nid = '$tnid'"));
  $resourceCount = db_result(db_query("SELECT COUNT(nid) FROM {content_type_forum} WHERE field_type_value = '2' AND field_ref_qid_nid = '$tnid'"));

  return theme('issue_detail_wrapper', $nid, $results, $debates, $resources, $debateCount, $resourceCount);
}

// suggest vote form here
function issue_suggest_form($dummy = '', $nid = '') {
  global $user;
  $nid = get_tnid($nid);
  $form = '';
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  if (user_is_logged_in()) {
    // get suggest answer for current issue
    $answers = "SELECT * FROM suggest_answer where qid='" . $nid . "'  ";
    $anslist = db_query($answers);
    $count_row = db_result(db_query($answers));

    // user should login to participate with suggest answers
    $err = 0;
    if (isset($count_row) && $count_row > 0) {
      while ($answerfet = db_fetch_object($anslist)) {

        $options[$answerfet->said] = $answerfet->answer;
      }
      $mysugg = db_result(db_query("SELECT answer_id FROM {suggest_answer_vote} WHERE qid = '$nid' AND uid = '$user->uid'"));
      $form['suggested_answer'] = array(
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => $mysugg,
      );
      $alreadyAdded = db_result(db_query("SELECT COUNT(said) FROM {suggest_answer} WHERE qid = '$nid' AND uid = '$user->uid'"));
      $alreadyVotedSuggest = db_result(db_query("SELECT COUNT(answer_id) FROM {suggest_answer_vote} WHERE qid = '$nid' AND uid = '$user->uid'"));
      $alreadyVotedMain = db_result(db_query("SELECT COUNT(chorder) FROM {poll_votes} WHERE nid = '$nid' AND uid = '$user->uid'"));
      // check whether the user already suggested the answer. if yes do not allow him to vote
      // also check whether the user already voted for this issue
      if ($alreadyAdded == 0 && $alreadyVotedSuggest == 0 && $alreadyVotedMain == 0) {
        $form['submit_suggest_vote'] = array(
          '#type' => 'submit',
          '#value' => t('Vote'),
        );
      }
      /* else {
        $form['vote_error'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="suggest-error">',
        '#value' => t('You are not able to vote from suggested answers list. You have already voted or suggested a new answer.'),
        '#suffix' => '</div>',
        );
        $err = 1;
        } */
    }

    // user can suggest only one answer per issue
    if ($alreadyAdded == 0) {
      $form['new_suggest_answer'] = array(
        '#type' => 'textfield',
        '#size' => 38,
        '#attributes' => array('class' => 'floatleft'),
        '#maxlength' => 140,
        '#id' => 'Answer3',
      );

      $form['#nid'] = $nid;
      $form['submit_suggest_answer'] = array(
        '#type' => 'submit',
        '#value' => t('Add Answer'),
        '#attributes' => array('class' => 'add-answer2 light'),
      );
    }
    elseif ($err == 0) {
      $form['vote_error'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="suggest-error">',
        '#value' => t('You have already suggested a answer for this issue.'),
        '#suffix' => '</div>',
      );
    }
  }
  else {
    $form['login_error'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="login-error">',
      '#value' => t('You should login to vote or post suggest answers.'),
      '#suffix' => '</div>',
    );
  }
  return $form;
}

function issue_suggest_form_submit($form, &$form_state) {
  global $user;
  //echo '<pre>'; print_r($form_state); exit;
  $nid = $form_state['values']['nid'];
  $submit = $form_state['clicked_button']['#parents'][0];

  // submit new suggest answer
  if ($submit == 'submit_suggest_answer') {
    $new_suggest_answer = $form_state['values']['new_suggest_answer'];
    if ($new_suggest_answer != '') {
      db_query("INSERT INTO {suggest_answer} SET uid = '%d', qid = '%d', answer = '%s', date_added = '%s'", $user->uid, $nid, $new_suggest_answer, date('Y-m-d'));
      $sid = db_last_insert_id('suggest_answer', 'said');
      /* New SET NOTIFY LOG */
      $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
      $variable = array('qid' => $nid, 'q_title' => $qtitle, 'answer' => $new_suggest_answer);
      set_notify_log($user->uid, $nid, 'suggest_answer', $variable);
      /* New SET NOTIFY LOG */

      drupal_set_message($message = 'Your answer was added!', $type = 'success');
    }
    else {
      //echo '<div class="messages error"> Please suggest your answer! </div>';
      drupal_set_message($message = 'Please enter suggest your answer!', $type = 'error');
    }
  }
  // suggest a vote
  if ($submit == 'submit_suggest_vote') {
    $suggested_answer = $form_state['values']['suggested_answer'];

    // get suggest answer vote count
    $list_own_answer = db_query("select * from {suggest_answer} where said='$suggested_answer'");
    $userown = db_fetch_object($list_own_answer);


    if ($suggested_answer != '') {
      $calvote = db_result(db_query("SELECT COUNT(*) from {suggest_answer_vote} where answer_id='$suggested_answer'"));
      if ($calvote == 0) {
        $votepoint = '1';
      }
      else {
        $votepoint = $userown->vote + 1;
      }

      db_query("INSERT INTO {suggest_answer_vote} SET qid = '%d', uid = '%d', answer_id = '%d', vote_date = '%s'", $nid, $user->uid, $suggested_answer, date('Y-m-d'));
      db_query("UPDATE {suggest_answer} SET vote = '%s' WHERE said = '%d' AND qid = '%d'", $votepoint, $suggested_answer, $nid);
      drupal_set_message($message = 'Your vote was added!', $type = 'success');
    }
    else {
      drupal_set_message($message = 'Please select your answer to vote!', $type = 'error');
    }
  }
}

function add_new_debate_form($form_state, $nid = '') {
  global $theme, $base_url;
  $form = '';
  $form['#action'] = url($_GET['q'], array('absolute' => TRUE));
  $form['#method'] = 'post';
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $nid,
  );
  $form['image'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#id' => 'image_value',
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#default_value' => 1,
    '#id' => 'add_new_type',
  );
  $form['head'] = array(
    '#type' => 'markup',
    '#value' => '<table><tr><td class="first">',
  );
  $form['title'] = array('#type' => 'textarea',
    '#id' => 'deb_title',
    '#size' => 70,
    '#cols' => 10,
    // '#attributes' => array('class' => 'argument-form'),
    '#rows' => 3,
    '#resizable' => false,
    '#prefix' => '<div class="argument-form"><label for="deb_title">What\'s your argument?</label>',
    '#suffix' => '</div>',
  );
  $form['ref_title'] = array(
    '#type' => 'textfield',
    '#default_value' => 'http://',
    '#size' => 60,
    '#maxlength' => 256,
    '#prefix' => '<div class="reference-form"><label for="edit-ref-title">Post a reference <span>(news, blog, gov, data...).</span></label>',
    '#suffix' => '</div><span class="error-msg" id="deb-err"></span>',
  );
  $ans = load_options($nid);
  //answers
  $form['tot_answers'] = array('#type' => 'hidden',
    '#default_value' => count($ans),
    '#id' => 'tot_ans');
  $i = 0;
  $form['asgn_val'] = array('#type' => 'markup',
    '#value' => '</td><td class="argument-form"><div class="assign"><table><th><td style="width: 100%;"><span class="label">' . t('Assign Values:') . '</span></td><td><span class="small_neg">' . t('-') . '</span></td><td><span class="small_pos">' . t('+') . '</span></td></tr></table></div>'
  );
  foreach ($ans as $list) {
    $short_answer = get_short_answer($nid, $list['chorder']);
    $answer = $short_answer != '' ? $short_answer : $list['chtext'];

    $supports = array('2' => '-', '0' => '-/+', '1' => '+');
    $form['sup_opp_' . $i] = array('#type' => 'select',
      '#prefix' => '<div class="value-select"><table><tr><td class="first"><label class="value floatleft">' . $answer . '</label></td><td>',
      '#options' => $supports,
      '#suffix' => '</td></th></table></div>',
      '#attributes' => array('class' => 'select-value'),
      '#id' => 'sup_' . $i,
      '#default_value' => 0,
    );
    $form['ans_id_' . $i] = array('#type' => 'hidden',
      '#value' => $list['chorder']
    );
    $i++;
  }
  $form['clr_div'] = array('#type' => 'markup', '#value' => '<div class="clr"></div><span class="req_assign">(Required to set one or more)</span>');
  $form['new_debate_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
    '#attributes' => array('class' => 'orange-btn'),
    '#prefix' => '</td></tr></table><div class="add_button">',
    '#suffix' => theme('sub_loader', 'display:none; float:left; margin-right:17px; position:relative; top:2px;'),
    '#id' => 'add_new_debate',
  );
  $form['attach'] = array(
    '#type' => 'submit',
    '#value' => t('Attach'),
    '#attributes' => array('class' => 'orange-btn'),
    '#prefix' => '<div class="reference-form pic_ref">',
    '#suffix' => '</div>',
    '#id' => 'lattach',
  );
  $form['link-arg'] = array(
    '#type' => 'item',
    '#value' => l(t('Or post a reference'), '#') . t(' (news, blog, gov, data...)'),
    '#prefix' => '<div class="argument-form">',
    '#suffix' => '</div>',
    '#id' => 'link_arg',
  );
  $form['link-ref'] = array(
    '#type' => 'item',
    '#value' => l(t('Or write an argument'), '#'),
    '#prefix' => '<div class="reference-form">',
    '#suffix' => '</div></div>',
    '#id' => 'link_ref',
  );

  $form['linkbox'] = array(
    '#type' => 'item',
    '#value' => '<div id ="linkbox"></div>',
  );
  return $form;
}

// add new debate submission
function add_new_debate_form_submit($form, &$form_state) {
  global $user;
  if ($form_state['values']['type'] == 1) {
    $user_coins = db_result(db_query("SELECT total_coins FROM {users} WHERE uid = '$user->uid'"));
    $wtitle = $form_state['values']['title'];
    $nid = $form_state['values']['nid'];

    $tot_ans = $form_state['values']['tot_answers'];

    if (!empty($wtitle) && !empty($user->uid)) {
      $lose_coins = 0;
      # $lose_coins = get_coins('c_debate');
      if ($user_coins >= $lose_coins) {

        // save values as node
        $deb = new stdClass();
        $deb->field_private[0]['value'] = "";
        $tnid = get_tnid($nid);
        $deb->field_ref_qid[0]['nid'] = $tnid;
        $deb->field_type[0]['value'] = '1';

        $deb->type = 'forum';
        $deb->title = $wtitle;
        $deb->uid = $user->uid;
        $deb->body = $wtitle;
        $deb->status = 1;
        // get tid for debate
        // get_taxonomy_id('module name','term data name')
        $tid = get_taxonomy_id('forum', 'Debate');
        $deb->taxonomy = array($tid);

        // LANGUAGE DETECTION
        // detect language from inputs using googleapis
        $inputLanguage = get_input_language($wtitle);
        $deb->language = $inputLanguage;
        // language status, initially language status is 0
        $deb->field_lang_status[0]['value'] = 0;
        //echo '<pre>'; print_r($deb); exit;
        $save = node_save($deb);

        $nodeid = $deb->nid;
        $vid = $deb->vid;

// add coin for Create new debates
        $coin_type = 'c_debate';
        user_coins_update($user->uid, '', $coin_type);
        for ($i = 0; $i < $tot_ans; $i++) {
          //$forum = "INSERT INTO {debate_options} set did='%d', paid='%d',ans_val='%d' ";
          $forum = "INSERT INTO {debate_options} set nid = '%d',chorder='%d',ans_val='%d' ";
          $result = db_query($forum, $nodeid, $form_state['values']['ans_id_' . $i], $form_state['values']['sup_opp_' . $i]);
        }

        //echo list_debate($qid, 1);
        $dumid = '';
        send_forumnotify($dumid, $nid);

        /* New SET NOTIFY LOG */
        $qtitle = db_result(db_query("SELECT title FROM {node} WHERE nid = '%d'", $nid));
        $variable = array('did' => $nodeid, 'd_title' => $wtitle, 'uid' => $user->uid, 'qid' => $nid, 'q_title' => $qtitle);
        set_notify_log($user->uid, $nodeid, 'add_debate', $variable);
        /* New SET NOTIFY LOG */

        $tnid = get_tnid($nid);


        $items = load_debate($deb->nid, $nid, $tnid);

        // anwers strength
        $strnth = $items['strength'];
        $strength = '';
        foreach ($strnth as $list) {
          $short_answer = get_short_answer($items['issue_id'], $list['chorder']);
          $tranAns = db_result(db_query("SELECT chtext FROM {poll_choices} WHERE nid = '" . $items['issue_id'] . "' AND chorder = '" . $list['chorder'] . "'"));
          $ans = $short_answer != '' ? $short_answer : $tranAns;

          switch ($list['ans_val']) {
            case 1:
              $strength.='<p class="position-plus"><strong>+</strong>&nbsp;' . $ans . '</p>';
              break;
            case 2:
              $strength.='<p class="position-minus"><strong>-</strong>&nbsp;' . $ans . '</p>';
              break;
          }
        }

        // reply
        $reply_box = '';
        $comments = '';
        $reply_count = db_result(db_query("SELECT COUNT(cid) FROM {comments} WHERE nid = '" . $items['debate_tnid'] . "'"));
        // delete
        if (is_moderator() || $items['uid'] == $user->uid) {
          $delete = theme('delete_button', $items['content_id'], $items['type'], 'Are you sure you want to delete this thread?');
        }
        else {
          $delete = '';
        }
        // ratings
        // allow rating check
        $ratings = theme('rating_button', $items);

        $json['success_post'] = 1;
        //   $json['content'] = theme('debate_parent_template', $items, $strength, $comments, $reply_box, $reply_count, $ratings, $delete);
        $json['message'] = '<span class="posted">Your argument posted successfully!</span>';
      }
      else {
        $json['message'] = '<div class="no_coins" align="center">' . t('Sorry you do not have enough coins to post New Debate') . '</div>';
      }
    }
    else {
      $json['message'] = '<div class="no_coins" align="center"><b>Error occured. Please try again.</b></div>';
    }
    print json_encode($json);
    exit;
  }
  else {
    ///
    module_load_include('php', 'debate', 'simple_html_dom');
    $html = file_get_html($form_state['values']['ref_title']);
    if (strpos($form_state['values']['ref_title'], 'youtube.com')) {
      $body = $html->find('#eow-description', 0)->plaintext;
      if (strlen($body) > 200) {
        $text = substr($body, 0, strpos($body, " ", 200));
      }
      $title = $html->find('#eow-title', 0)->innertext;
      $html->clear();
      $idStarts = strpos($form_state['values']['ref_title'], "?v=");
      if ($idStarts === FALSE) {
        $idStarts = strpos($form_state['values']['ref_title'], "&v=");
      }
      if ($idStarts === FALSE) {
        die("<div class='messages error'>YouTube video ID not found. Please double-check your URL.</div>");
      }
      $idStarts += 3;
      $ytvID = substr($form_state['values']['ref_title'], $idStarts, 11);
      $res->title = $title;
      $res->body = $text;
      $res->field_mtype[0]['value'] = 'video';
      $res->field_videoid[0]['value'] = $ytvID;
      $res->field_filepath[0]['value'] = 'http://img.youtube.com/vi/' . $ytvID . '/default.jpg';
    }
    else {
      module_load_include('php', 'debate', 'url_to_absolute');
      $html = file_get_html($form_state['values']['ref_title']);
      $tags = get_meta_tags($form_state['values']['ref_title']);
      if ($form_state['values']['image'] != 'no_image') {
        $filename = substr($form_state['values']['image'], strrpos($form_state['values']['image'], '/'), strlen($form_state['values']['image']));
        $file = file_get_contents($form_state['values']['image']);
        $path = file_directory_path() . '/resources' . $filename;
        $file_im = file_save_data($file, $path, FILE_EXISTS_REPLACE);
        image_scale($file_m, $path, '110', '70');

        $res->field_filepath[0]['value'] = file_create_url($file_im);
      }
      else {
        $res->field_filepath[0]['value'] = file_create_url(file_directory_path() . '/noimage.jpg');
      }
      $res->title = $html->find('title', 0)->innertext;
      $res->field_rtype[0]['value'] = 'news';
      $res->body = $tags['description'];
    }
    $res->type = 'forum';
    $res->field_source[0]['value'] = parse_url($form_state['values']['ref_title'], PHP_URL_HOST);
    $res->uid = $user->uid;
    $res->field_nlink[0]['value'] = $form_state['values']['ref_title'];
    $res->status = 1;
    $html->clear();
    // get tid (debate or resource)
    // get_taxonomy_id('module name','term data name')
    $tid = get_taxonomy_id('forum', 'Resource');
    $res->taxonomy = array($tid);
    // content type values
    // set main node as ref node for all resources
    $nid = $form_state['values']['nid'];
    $nid = get_tnid($nid);
    $res->field_ref_qid[0]['nid'] = $nid;
    $res->field_type[0]['value'] = '2';
    $res->language = 'en';
    $save = node_save($res);
    $json['success_post'] = 1;
    $json['message'] = '<span class="posted">Your reference posted successfully!</span>';
    print json_encode($json);
    exit;
  }
}

// issue filter options
function issue_filter_options() {
  $key = arg(1) != '' ? arg(1) : '0';
  $subject = arg(2) != '' ? arg(2) : '0';
  $area = arg(3) != '' ? arg(3) : '0';
  $detail = arg(4) != '' ? arg(4) : '0';
  $country = arg(5) != '' ? arg(5) : '0';
  $state = arg(6) != '' ? arg(6) : '0';
  $city = arg(7) != '' ? arg(7) : '0';
  $method = arg(8) != '' ? arg(8) : '0';

  $path = '<front>';
  $sitelink = url($path, array('absolute' => TRUE)) . '/';

  if ($method == 'alltime') {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }
  elseif ($method == '7days') {
    $actall = '';
    $act7 = 'class="active"';
    $actviews = '';
  }
  elseif ($method == 'views') {
    $actall = '';
    $act7 = '';
    $actviews = 'class="active"';
  }
  else {
    $actall = 'class="active"';
    $act7 = '';
    $actviews = '';
  }



  $key_path = $sitelink . 'issues/' . $key . '/' . $subject . '/' . $area . '/' . $detail . '/' . $country . '/' . $state . '/' . $city;
  $issue_filter = '<div class="sort-by">' . t('View') . ' &nbsp;
                <a href="' . $key_path . '/alltime" ' . $actall . '>' . t('Most Votes (all-time)') . '</a>&nbsp;|&nbsp;'
          . '<a href="' . $key_path . '/7days" ' . $act7 . '>' . t('Most Votes (past 7 days)') . '</a>&nbsp;|&nbsp;'
          . '<a href="' . $key_path . '/views" ' . $actviews . '>' . t('Number of Views') . '</a></div>';
  return $issue_filter;
}

// insert node views
function insertviews($qid = '') {
  global $user;
  //$qid = substr($_GET['q'], strrpos($_GET['q'], "/") + 1);

  if (user_is_logged_in()) {
    $ulid = $user->uid;
    $ipid = $_SERVER['REMOTE_ADDR'];
    //echo "SELECT COUNT(*) FROM {qviews} where  uid='$user->uid'   and qid='".$qid."' and view_date='".date("Y-m-d")."' ";
    $countret = db_result(db_query("SELECT COUNT(*) FROM {qviews} where  uid='$user->uid'   and qid='" . $qid . "' and view_date='" . date("Y-m-d") . "' "));
  }
  else {

    $ulid = 0;
    $ipid = $_SERVER['REMOTE_ADDR'];



    $countret = db_result(db_query("SELECT COUNT(*) FROM {qviews} where ip='$ipid'  and qid='" . $qid . "' and view_date='" . date("Y-m-d") . "'"));
  }
  //echo  $countret;
  if ($countret == 0) {

    db_query("INSERT INTO {qviews} (ip,uid,qid,view_date) VALUES ('$ipid',$ulid,$qid,'" . date("Y-m-d") . "')");
  }
}

// rating buttons - agree, disagree
// popular categories
function popular_categories() {
  $sql = db_query("SELECT nid, count(nid) as cnt from {poll_votes} group by nid ORDER BY cnt desc");
  while ($votes = db_fetch_object($sql)) {
    $term = db_query("SELECT tn.tid, td.name name FROM {term_node} AS tn LEFT JOIN {term_data} AS td ON tn.tid = td.tid WHERE tn.nid = '%d'", $votes->nid);
    if ($term != '') {
      while ($pop = db_fetch_object($term)) {
        $popular[$pop->tid] = $pop->name;
      }
    }
  }

  // get only 15 elements
  $popular = array_slice($popular, 0, 15, true);
  $popular_categories = theme('popular_categories', $popular);
  return $popular_categories;
}

/* * Rallydev:526* */

function __issue_description_trimmer($context) {

  $initial_character_count = 2500;
  $context_initial = "";
  $context_remaining = "";
  $output = array();
  $context = trim($context);
  $output['actual_length'] = $trimmed_string_length = strlen($context);
  if ($trimmed_string_length <= $initial_character_count) {
    $output['context_initial'] = str_replace("\r\n", "<br>", $context);
    $output['context_remaining'] = "";
  }
  else {
    $context_initial = substr($context, 0, $initial_character_count);
    $output['context_initial'] = str_replace("\r\n", "<br>", $context_initial) . '<div id="new-ellipse"><a>... more</a></div>';
    $context_remaining = substr($context, $initial_character_count, $trimmed_string_length);
    $output['context_remaining'] = str_replace("\r\n", "<br>", $context_remaining);
  }
  return $output;
}

function _load_colors_array() {
  $colors = array(
    '#934d9e',
    '#FF7F00',
    '#50c0ac',
    '#0c6926',
    '#ef4c8d',
    '#362750',
    '#e1e43c',
    '#ef3d3b',
    '#3cc7f4',
    '#589a1c',
    '#C2499B',
    '#f89521',
    '#CC2027',
    '#55ba59',
    '#d5bc29',
    '#6ccbd5',
    '#43B649',
    '#F6EB16'
  );
  return $colors;
}

/* * *********** */















/* * * CUSTOM FUNCTIONS ** */

/*
 * Get short answer for the node
 */

function get_short_answer($nid = '', $chorder = '') {
  $short = db_fetch_object(db_query("
    SELECT short_answer
    FROM {short_answers}
    WHERE
      qid= '%d' AND
      chorder = '%d'", $nid, $chorder)
  );
  return $short->short_answer;
}

/*
 * Debate/resource refresh
 *
 * @content_id - debate/resource id
 *
 * @returns associative array
 * #id        - content_id
 * #vote_up   -
 * #vote_dn   -
 * #vote_ct   -
 * #replies   - array or replies
 *
 * TODO -- use it when voting or replying
 */

function issue_dr_refresh($content_id) {
  $output = array();
  # debate/resource
  $output['id'] = $content_id;
  list($output['vote_up'], $output['vote_dn'], $output['vote_sum']) = yn_votes($output['id'], 'node');
  # replies
  $output['replies'] = array();
  $items = issue_dr_comments($content_id);
  foreach ($items as $item) {
    $item['markup'] = theme('forum_reply', $item);
    $output['replies'] = $item;
  }
  return $output;
}

/*
 * Get debate/resource comments
 *
 * @content_id - debate/resource id
 * @pid        -
 */

function issue_dr_comments($content_id, $pid = 0) {
  $items = array();
  $query = "
    SELECT *
    FROM {comments} AS c
    WHERE
      c.nid     = '%d' AND
      c.status  = '0' AND
      c.pid     = '%d' AND
      c.comment <> '' AND
      (c.cid = c.tcid OR c.tcid = 0)
    ORDER BY c.cid DESC";
  $result = db_query($query, $content_id, $pid);
  while ($row = db_fetch_array($result)) {
    $items[] = load_reply($row['cid']);
  }
  return $items;
}