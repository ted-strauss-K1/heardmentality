<?php

@require_once('arguments.forms.inc');

/*
 * Implementation of hook_init()
 */
function arguments_init() {
  drupal_add_js(drupal_get_path('module', 'arguments') . '/arguments.forms.js');
}

/*
 * Implementation of hook_enable()
 */
function arguments_enable() {
 //
}

/*
 * Implementation of hook_menu()
 */
function arguments_menu() {
  $menu = array();

  $menu['arguments/tabs/%/%/%'] = array(
    'page callback' => 'arguments_tabs',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
  );
  $menu['arguments/comment'] = array(
    'page callback'     => 'arguments_comment',
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );
  $menu['arguments/delete/%/%'] = array(
    'page callback'     => 'arguments_delete',
    'page arguments' => array(2, 3),
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );

  $menu['arguments/resource'] = array(
    'page callback'     => 'arguments_preview_resource',
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );


  return $menu;
}

/*
 * Implementation of hook_theme()
 */
function arguments_theme() {
  $theme = array();

  $theme['arguments_tabs'] = array(
    'arguments' => array('nodes' => array()),
    'file'      => 'arguments.theme.inc',
  );
  $theme['arguments_item'] = array(
    'arguments' => array('node' => null),
    'template' => 'arguments-item',
    # 'file'      => 'arguments.theme.inc'
  );
  $theme['arguments_result_ball'] = array(
    'arguments' => array('vote_sum' => NULL),
    'file'      => 'arguments.theme.inc',
  );
  $theme['arguments_rating_button'] = array(
    'arguments' => array('node' => NULL),
    'file'      => 'arguments.theme.inc',
  );
  $theme['arguments_comment'] = array(
    'arguments' => array('comment' => NULL),
    'template' => 'arguments-comment',
    # 'file'      => 'arguments.theme.inc',
  );
  $theme['arguments_resource_preview'] = array(
    'arguments' => array('node' => NULL),
    'template' => 'arguments-resource-preview',
    # 'file'      => 'arguments.theme.inc',
  );
  $theme['arguments_delete'] = array(
    'arguments' => array(
      'comment_type' => NULL,
      'comment_id' => NULL,
    ),
    'file'      => 'arguments.theme.inc',
  );

  return $theme;
}

/*
 * arguments_resource_preview
 */
function arguments_preview_resource() {
  $url = isset($_POST['url']) ? $_POST['url'] : false;
  $node = arguments_fetch_url($url);

  if ($node === false) {
    drupal_json(array(
      'status' => false,
      'message' => t('No URL provided'),
    ));
  } else {
    drupal_json(array(
      'status' => true,
      'message' => theme('arguments_resource_preview', $node),
    ));
  }
  exit();
}

/*
 * Define constant for debates
 */
define('TYPE_DEBATE', 1);

/*
 * Define constant for resources
 */
define('TYPE_RESOURCE', 2);

/*
 * Debate Node creation
 */
function arguments_add_debate($nid, $title) {
  global $user;
  if (empty($nid) || empty($title)) {
    return false;
  }

  $node = new stdClass();
  $node->field_private[0]['value'] = "";
  $node->field_ref_qid[0]['nid'] = issue_get_translated_node($nid, false);
  $node->field_type[0]['value'] = TYPE_DEBATE;
  $node->type = 'forum';
  $node->title = $title;
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->body = $title;
  $node->status = 1;
  $node->taxonomy = ($tid = ugc_taxonomy_term_id('Debate', 'forum')) !== false ? array($tid) : array();
  $node->language = ugc_detect_language($title);
  $node->field_lang_status[0]['value'] = 0;

  // Without node_submit()
  $node->teaser = $node->body;
  $node->created = time();
  $node->validated = TRUE;

  node_save($node);

  return $node;
}

/*
 * Add the options to the argument
 *
 * @param nid - Argument Node Id
 */
function arguments_options($nid, $options = array()) {
  if (!empty($options)) {
    $replace = array();
    foreach ($options as $option) {
      db_query("INSERT INTO {arguments_options} (nid, chorder, val, date_added) VALUES ('%d', '%d', '%d', '%s')", $nid, $option['chorder'], $option['option'], date('Y-m-d H:i:s'));
    }
  }
}

/*
 * Resource Node creation
 */
function arguments_add_resource($nid, $url, $image) {
  global $user;
  if (empty($nid) || empty($url)) {
    return false;
  }
  $url_p = parse_url($url);
  $node = arguments_fetch_url($url, $image);
  if ($node === false) {
    return false;
  }
  unset($node->images);
  unset($node->noimage);
  unset($node->domain);

  # common values
  $node->type = 'forum';
  $node->field_source[0]['value'] = $url_p['host'];
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->field_nlink[0]['value'] = $url;
  $node->status = 1;
  $node->taxonomy = ($tid = ugc_taxonomy_term_id('Resource', 'forum')) !== false ? array($tid) : array();
  $node->field_ref_qid[0]['nid'] = issue_get_translated_node($nid, false);
  $node->field_type[0]['value'] = TYPE_RESOURCE;
  $node->language = 'en';

  // Without node_submit()
  $node->teaser = $node->body;
  $node->created = time();
  $node->validated = TRUE;

  node_save($node);

  return $node;
}

/*
 * Create the core of the resource node by url
 */
function arguments_fetch_url($url, $image = false) {
  module_load_include('php', 'arguments', 'includes/simple_html_dom');

  $html = file_get_html($url);
  if (empty($html)) {
    return false;
  }
  $node = new stdClass();
  $url_p = parse_url($url);
  $node->domain = $url_p['host'];
  if (false !== strpos($url_p['host'], 'youtube.com')) { # YouTube Video

    $params = explode('&', $url_p['query']);
    $youtube_id = false;
    foreach ($params as $param) {
      $param = explode('=', $param, 2);
      if ($param[0] == 'v') {
        $youtube_id = $param[1];
        break;
      }
    }
    if ($youtube_id === false || strlen($youtube_id) != 11) {
      return false;
    }
    $body = $html->find('#eow-description', 0);
    $node->body = empty($body) ? '' : ugc_truncate($body->plaintext, 200);
    $title = $html->find('#eow-title', 0);
    $node->title = empty($title) ? '' : $title->innertext;
    $node->field_mtype[0]['value'] = 'video';
    $node->field_videoid[0]['value'] = $youtube_id;
    $node->field_filepath[0]['value'] = 'http://img.youtube.com/vi/' . $youtube_id . '/default.jpg';

    $node->images = array($node->field_filepath[0]['value']);
    $node->noimage = false;

  } else { # Regular URL

    $tags = get_meta_tags($url);
    $node->body = empty($tags) ? '' : $tags['description'];
    $title = $html->find('title', 0);
    $node->title = empty($title) ? '' : $title->innertext;
    $node->field_rtype[0]['value'] = 'news';

    module_load_include('php', 'arguments', 'includes/url_to_absolute');
    # get images
    $images = array();
    $images_source = $html->find('img');
    foreach( $images_source as $element ) {
      # $images[$element->src] = true;
      $images[] = url_to_absolute($url, $element->src);
    }
//    var_dump($images); die();
    $node->images = arguments_resource_validate_images($images);
    $node->noimage = true;

    if ($image === false) {
      $node->field_filepath[0]['value'] = file_create_url(file_directory_path() . '/noimage.jpg');
    } else {
      # save image to disk
      $result = drupal_http_request($image, array(), 'POST', '', 3);
      if( $result->data ) {
        $ext = arguments_resource_image_extension($image);
        $hash = md5($image);
        $filepath = file_directory_path() . '/resources/res-' . $hash . '.' . $ext;
        $file = file_save_data($result->data, $filepath, FILE_EXISTS_REPLACE);
        image_scale($file, $filepath, '110', '70');
        $node->field_filepath[0]['value'] = file_create_url($file);
      } else {
        $node->field_filepath[0]['value'] = file_create_url(file_directory_path() . '/noimage.jpg');
      }
    }
  }
  $html->clear();
  return $node;
}

/*
 * Validate the images
 *
 * @param images - array of image absolute urls
 */
function arguments_resource_validate_images($images) {
  $ext_allowed = array('png', 'jpg', 'jpeg', 'gif');
  $result = array();
  $sizes = array();
  foreach ($images as $image) {
    $ext = arguments_resource_image_extension($image);
    if (in_array($ext, $ext_allowed)) {
      list($width, $height, $type, $attr) = getimagesize($image);
      if ($width > 30 && $height > 30) {
        $size_coeff = $width * $height;
        $result[$size_coeff][] = $image;
      }
    }
  }
  // sort by size
  krsort($result, SORT_NUMERIC);
  $output = array();
  foreach ($result as $items) {
    foreach ($items as $item) {
      $output[] = $item;
    }
  }
  return $output;
}

/*
 * Get the image extension
 */
function arguments_resource_image_extension($image) {
  $img = explode("/", $image);
  $img = end($img);
  $ext = explode(".", $img);
  $ext = end($ext);
  return strtolower($ext);
}

/*
 * Get list of arguments
 *
 * @param nid - Issue Node Id
 */
function arguments_get_list($nid) {
  static $dr = array();
  if (empty($dr[$nid])) {
    $tmp = array(
      '#list' => array(),
      '#count' => array(
        TYPE_DEBATE => 0,
        TYPE_RESOURCE => 0,
        '#all' => 0,
      )
    );

    $result = db_query("SELECT * FROM {content_type_forum} WHERE field_ref_qid_nid = '%d' ORDER BY nid DESC", $nid);
    while ($row = db_fetch_array($result)) {
      $tmp['#list'][] = $row;
      $tmp['#count']['#all']++;
      $tmp['#count'][$row['field_type_value']]++;
    }

    $dr[$nid] = $tmp;
  }
  return $dr[$nid];
}

/*
 * Implementation of hook_nodeapi()
 */
function arguments_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'forum') {
    switch ($op) {
      case 'load' :
        _arguments_load($node);
      break;
    }
  }
  return;
}

/*
 * Load the argument
 *
 * @see arguments_nodeapi()
 */
function _arguments_load(&$node) {
  $node->content_id = $node->nid;
  $node->content_type = 'node';
  # only for the debates
  if ($node->field_type[0]['value'] == TYPE_DEBATE) {
    # translate
    global $language;
    $tnode = arguments_translate($node->nid, $language->language);
    if ($tnode !== false) {
      $node->title = $tnode->title;
      $node->body = $tnode->body;
    }
    # get strength
    $options = array();
    $result = db_query("SELECT chorder, val FROM arguments_options WHERE nid = '%d' AND val <> 0 ORDER BY chorder ASC", $node->nid);
    while ($row = db_fetch_array($result)) {
      $options[$row['chorder']] = $row['val'];
    }
    # choices
    $issue_nid = $node->field_ref_qid[0]['nid'];
    $node->parent_issue = $issue_nid;
    $choices = issue_choices($issue_nid);
    # node options
    foreach ($choices as $index => &$choice) {
      if (isset($options[$choice['chorder']])) {
        $choice['value'] = $options[$choice['chorder']];
      } else {
        unset($choices[$index]);
      }
    }
    $node->options = $choices;
  }

  # get votes
  list($node->vote_up, $node->vote_dn, $node->vote_sum) = yn_votes($node->nid, 'node');
  # comments
  $node->comments = arguments_get_comments($node->nid);
  # posted ago
  $node->ago = ugc_time_interval(date("F d Y H:i:s", $node->created));
  # rated
  $node->rated = yn_user_voted($node->content_id, 'node');
  # ownership
  global $user;
  $node->owner  = $user->uid == $node->uid;
}

/*
 * Post-load the argument's comment
 * Prepare the comment object to be similar to the Node Object
 *
 * @param node - comment object
 */
function _arguments_load_comment(&$node) {
  if ($node === false) {
    return;
  }
  global $user, $language;
  $node->content_id = $node->cid;
  $node->content_type = 'comment';
  # get votes
  list($node->vote_up, $node->vote_dn, $node->vote_sum) = yn_votes($node->nid, 'comment');
  # posted ago
  $node->ago = ugc_time_interval(date("F d Y H:i:s", $node->timestamp));
  # rated
  $node->rated = yn_user_voted($node->content_id, 'comment');
  $translated = arguments_translate_comment($node->cid, $language->language);
  if ($translated !== false) {
    $node->comment = $translated;
  }
  # ownership
  $node->owner  = $user->uid == $node->uid;
}

/*
 * List of the Arguments
 *
 * @param nid   -- Issue Node Id
 * @param sort  -- Sort
 * @param print -- Print/Return parameter
 */
function arguments_tabs($nid, $sort = null, $print = null) {
  $argnids = arguments_filter($nid, $sort, $_REQUEST['class'], $_REQUEST['chorder']);
  $nodes = array();
  foreach ($argnids as $argnid) {
    $nodes[] = node_load($argnid);
  }
  $output = theme('arguments_tabs', $nodes);

  # print/return
  if ($print == 1) {
    return $output;
  }
  else {
    print $output;
  }
  exit();
}


/*
 * Get the filtered list of Arguments
 *
 * @param nid   -- Issue Node Id
 * @param sort  -- Sort
 * @param print -- Print/Return parameter
 */
function arguments_filter($nid, $sort = null, $class = null, $chorder = null) {
  $argnids = array();
  if (!is_null($class) && !is_null($chorder)) {
    # filter arguments
    switch ($class) {
      case 'neutral' : $val = 0; break;
      case 'positive' : $val = 1; break;
      case 'negative' : $val = -1; break;
      default : $val = 0; break;
    }
    $result = db_query("SELECT DISTINCT(n.nid) FROM {node} n INNER JOIN {content_type_forum} ctf ON ctf.nid = n.nid LEFT JOIN {arguments_options} ao ON ao.nid = n.nid WHERE n.status = 1 AND n.type = 'forum' AND ctf.field_ref_qid_nid = '%d' AND ( (ctf.field_type_value = '%d' AND ao.val = '%d' AND ao.chorder = '%d') OR (ctf.field_type_value = '%d')) ORDER BY n.nid DESC", $nid, TYPE_DEBATE, $val, $chorder, TYPE_RESOURCE);
  } else {
    # sort parameters
    switch ($sort) {
      case 0 : # older
        $order_by   = 'n.created';
        $order_sort = 'ASC';
        break;
      case 1 : # recent
        $order_by   = 'n.created';
        $order_sort = 'DESC';
        break;
      case 2 : # supported
        $order_by   = 'ctf.field_strength_value';
        $order_sort = 'DESC';
        break;
      default : # default
        $order_by   = 'n.nid';
        $order_sort = 'DESC';
      break;
    }
    $result = db_query("SELECT DISTINCT(n.nid) FROM {node} n INNER JOIN {content_type_forum} ctf ON ctf.nid = n.nid WHERE n.status = 1 AND n.type = 'forum' AND ctf.field_ref_qid_nid = '%d' ORDER BY %s %s", $nid, $order_by, $order_sort);
  }
  while ($argnid = db_result($result)) {
    $argnids[] = $argnid;
  }
  return $argnids;
}

/*
 * Translate the Agrument
 *
 * @param nid - Argument Node Id
 * @param language - Desired Language, default 'en'
 */
function arguments_translate($nid, $language = 'en') {
  static $translated = array();
  if (empty($language)) {
    $language = 'en';
  }
  if (!isset($translated[$nid][$language])) {
    $tnid = db_result(db_query("SELECT nid FROM {node} WHERE tnid = '%d' AND language = '%s' AND translate = 1", $nid, $language));
    if ($tnid !== false && $tnid != $nid) {
      $translated[$nid][$language] = node_load(array('nid' => $tnid));
    } else {
      $translated[$nid][$language] = false;
    }
  }
  return $translated[$nid][$language];
}

/*
 * Translate the Comment
 *
 * @param nid - Argument Comment Id
 * @param language - Desired Language, default 'en'
 */
function arguments_translate_comment($nid, $language = 'en') {
  static $translated = array();
  if (empty($language)) {
    $language = 'en';
  }
  if (!isset($translated[$nid][$language])) {
    $comment = db_result(db_query("SELECT comment FROM {comments} WHERE tcid = '%d' AND language = '%s' AND translate = 1", $nid, $language));
    if ($comment !== false) {
      $translated[$nid][$language] = $comment;
    } else {
      $translated[$nid][$language] = false;
    }
  }
  return $translated[$nid][$language];
}

/*
 * Get argument comments
 *
 * @param nid - Argument Node Id
 *
 */
function arguments_get_comments($id) {
  $items = array();
  $query = "
    SELECT *
    FROM {comments} AS c
    WHERE
      c.nid     = '%d' AND
      c.status  = '1' AND
      c.comment <> '' AND
      (c.cid = c.tcid OR c.tcid = 0)
    ORDER BY c.cid DESC";
  $result = db_query($query, $id);
  while ($row = db_fetch_object($result)) {
    _arguments_load_comment($row);
    if ($row !== false) {
      $items[] = $row;
    }
  }
  return $items;
}

/*
 * Arguments Comment Form
 *
 * Submission
 */
function arguments_comment() {
  if (!user_is_logged_in()) {
    drupal_json(array(
      'status' => false,
      'message' => t('Please login to post reply'),
    ));
    exit();
  }

  $post = $_REQUEST;
  $text = check_plain($post['comment']);
  $nid = $post['content_id'];
  $str_wk = $post['str_wk'];

  global $user;
  $comment = new stdClass();
  $comment->pid         = 0;
  $comment->nid         = $nid;
  $comment->uid         = $user->uid;
  $comment->subject     = $text;
  $comment->comment     = $text;
  $comment->hostname    = ip_address();
  $comment->timestamp   = time();
  $comment->status      = 1;
  $comment->format      = '';
  $comment->thread      = '';
  $comment->name        = $user->name;
  $comment->mail        = $user->mail;
  $comment->homepage    = '';
  $comment->str_wk      = $str_wk;
  $comment->language    = ugc_detect_language($text);

  # save
  arguments_comment_save($comment);
  _arguments_load_comment($comment);
  # output
  if ($comment === false) {
    drupal_json(array(
      'status' => false,
      'message' => t('Error occurred'),
    ));
    exit();
  }
  drupal_json(array(
    'status' => true,
    'message' => t('Thanks, Your reply posted!'),
    'content' => theme('arguments_comment', $comment),
  ));

  if (module_exists('activity_stream')) {
    $node = node_load($comment->nid);
    activity_stream_add_activity(ACTIVITY_STREAM_ARGUMENT_REPLY, array('nid' => $node->parent_issue, 'nid_arg' => $comment->nid, 'cid' => $comment->cid));
  }

  exit();
}


/*
 * Save the comment
 *
 * Replaces the comment_save to use only one db call
 *
 * @param comment - Comment Object
 */
function arguments_comment_save(&$comment) {
  $result = db_query("INSERT INTO {comments} SET
    pid         = '%d',
    nid         = '%d',
    uid         = '%d',
    subject     = '%s',
    comment     = '%s',
    hostname    = '%s',
    timestamp   = '%s',
    status      = '%s',
    format      = '%s',
    thread      = '%s',
    name        = '%s',
    mail        = '%s',
    homepage    = '%s',
    str_wk    = '%s',
    language    = '%s'",
    $comment->pid, $comment->nid, $comment->uid, $comment->subject, $comment->comment, $comment->hostname, $comment->timestamp, $comment->status, $comment->format, $comment->thread, $comment->name, $comment->mail, $comment->homepage, $comment->str_wk, $comment->language);

 if (!$result) {
   $comment = false;
 } else {
   $comment->cid = db_last_insert_id('comments', 'cid');
 }
}

/*
 * "arguments/delete" callback
 */
function arguments_delete($content_type, $content_id) {
  global $user;
  if (user_access('moderation', $user) || arguments_check_owner($content_type, $content_id)) {
    switch ($content_type) {
      case 'node' :
        db_query("UPDATE {node} SET status = 0 WHERE nid = '%d'", $content_id);
      break;
      case 'comment' :
        db_query("UPDATE {comments} SET status = 0 WHERE cid = '%d'", $content_id);
      break;
    }
    drupal_json(array(
      'status' => true,
      'message' => t('Successfully deleted'),
    ));
    exit();
  }
  drupal_json(array(
    'status' => false,
    'message' => t('Sorry, you have no permissions to delete the content'),
  ));
  exit();
}

/*
 * Check if user is ownew of the content
 */
function arguments_check_owner($content_type, $content_id) {
  global $user;
  switch ($content_type) {
    case 'node' :
      return false != db_result(db_query("SELECT nid FROM {node} WHERE nid = '%d' AND uid = '%d'", $content_id, $user->uid));
    break;
    case 'comment' :
      return false != db_result(db_query("SELECT cid FROM {comments} WHERE cid = '%d' AND uid = '%d'", $content_id, $user->uid));
    break;
  }
  return false;
}


