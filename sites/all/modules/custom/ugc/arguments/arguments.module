<?php

@require_once('arguments.forms.inc');

/*
 * Implementation of hook_init()
 */
function arguments_init() {
  drupal_add_js(drupal_get_path('module', 'arguments') . '/arguments.js');
}

/*
 * Implementation of hook_enable()
 */
function arguments_enable() {
 //
}

/*
 * Implementation of hook_menu()
 */
function arguments_menu() {
  $menu = array();

  $menu['arguments'] = array(
    'title'             => 'Arguments Test',
    'page callback'     => 'arguments_test',
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );

  return $menu;
}

/*
 * Testing function
 *
 * TODO -- remove
 */
function arguments_test() {
  $node = node_load(36953	);
  var_dump($node);
}

/*
 * Define constant for debates
 */
define('TYPE_DEBATE', 1);

/*
 * Define constant for resources
 */
define('TYPE_RESOURCE', 2);

/*
 * Debate Node creation
 */
function arguments_add_debate($nid, $title, $uid) {
  if (empty($nid) || empty($title) || empty($uid) ) {
    return false;
  }

  $node = new stdClass();
  $node->field_private[0]['value'] = "";
  $node->field_ref_qid[0]['nid'] = issue_get_translated_node($nid, false);
  $node->field_type[0]['value'] = TYPE_DEBATE;
  $node->type = 'forum';
  $node->title = $title;
  $node->uid = $uid;
  $node->body = $title;
  $node->status = 1;
  $node->taxonomy = ($tid = ugc_taxonomy_term_id('Debate', 'forum')) !== false ? array($tid) : array();
  $node->language = ugc_detect_language($title);
  $node->field_lang_status[0]['value'] = 0;
  node_save($node);

  return $node;
}

/*
 * Add the options to the argument
 *
 * @param nid - Argument Node Id
 */
function arguments_options($nid, $options = array()) {
  if (!empty($options)) {
    $replace = array();
    foreach ($options as $option) {
      $replace[] = sprintf("('%d', '%d', '%d', '%s')",
        $nid, $option['chorder'], $option['option'], date('')
      );
    }
    db_query("INSERT INTO {arguments_options} (nid, chorder, option, date) VALUES %s", implode(',', $replace));
  }
}

/*
 * Resource Node creation
 */
function arguments_add_resource($nid, $url, $uid, $image) {
  die('I got to the resource arg');
  if (empty($nid) || empty($url) || empty($uid)) {
    return false;
  }
  module_load_include('php', 'arguments', 'includes/simple_html_dom');
  $html = file_get_html($url);
  if (empty($html)) {
    return false;
  }
  $node = new stdClass();
  $url_p = parse_url($url);
  if (strpos($url_p['host'], 'youtube.com')) { # YouTube Video

    $params = explode('&', $url_p['query']);
    $youtube_id = false;
    foreach ($params as $param) {
      $param = explode('=', $param, 2);
      if ($param[0] == 'v') {
        $youtube_id = $param[1];
        break;
      }
    }
    //var_dump($youtube_id);
    if ($youtube_id === false || strlen($youtube_id) != 11) {
      return false;
    }
    $body = $html->find('#eow-description', 0);
    $node->body = empty($body) ? '' : ugc_truncate($body->plaintext, 200);
    $title = $html->find('#eow-title', 0);
    $node->title = empty($title) ? '' : $title->innertext;
    $node->field_mtype[0]['value'] = 'video';
    $node->field_videoid[0]['value'] = $youtube_id;
    $node->field_filepath[0]['value'] = 'http://img.youtube.com/vi/' . $youtube_id . '/default.jpg';

  } else { # Regular URL

    $tags = get_meta_tags($url);
    $node->body = empty($tags) ? '' : $tags['description'];
    $title = $html->find('title', 0);
    $node->title = empty($title) ? '' : $title->innertext;
    $node->field_rtype[0]['value'] = 'news';
    if ($image === false) {
      $node->field_filepath[0]['value'] = file_create_url(file_directory_path() . '/noimage.jpg');
    } else {
      # save image to disk
      $result = drupal_http_request($image, array(), 'POST', '', 3);
      if( $result->data ) {
        $ext = arguments_resource_image_extension($image);
        $hash = md5($image);
        $filepath = file_directory_path() . '/resources/res-' . $hash . '.' . $ext;
        $file = file_save_data($result->data, $filepath, FILE_EXISTS_REPLACE);
        image_scale($file, $filepath, '110', '70');
        $node->field_filepath[0]['value'] = file_create_url($file);
      } else {
        $node->field_filepath[0]['value'] = file_create_url(file_directory_path() . '/noimage.jpg');
      }
    }
  }
  $html->clear();

  # common values
  $node->type = 'forum';
  $node->field_source[0]['value'] = $url_p['host'];
  $node->uid = $uid;
  $node->field_nlink[0]['value'] = $url;
  $node->status = 1;
  $node->taxonomy = ($tid = ugc_taxonomy_term_id('Resource', 'forum')) !== false ? array($tid) : array();
  $node->field_ref_qid[0]['nid'] = issue_get_translated_node($nid, false);
  $node->field_type[0]['value'] = TYPE_RESOURCE;
  $node->field_ref_qid[0]['nid'] = issue_get_translated_node($nid, false);
  $node->language = 'en';
  node_save($node);

  return $node;
}

/*
 * Validate the images
 *
 * @param images - array of image absolute urls
 */
function arguments_resource_validate_images($images) {
  $ext_allowed = array('png', 'jpg', 'jpeg');
  $result = array();
  foreach ($images as $image) {
    $ext = arguments_resource_image_extension($image);
    if (in_array($ext, $ext_allowed)) {
      list($width, $height, $type, $attr) = getimagesize($image);
      if ($width > 30 && $height > 30) {
        $result[] = $image;
      }
    }
  }
  return $result;
}

/*
 * Get the image extension
 */
function arguments_resource_image_extension($image) {
  $img = explode("/", $image);
  $img = end($img);
  $ext = explode(".", $img);
  $ext = end($ext);
  return strtolower($ext);
}









