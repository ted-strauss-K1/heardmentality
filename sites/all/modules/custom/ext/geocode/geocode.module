<?php

/**
 * Function to add geocode js file to page
 */
function geocode_js() {
  drupal_add_js(drupal_get_path('module', 'geocode') . '/geocode.js');
}

/**
 * @return array
 */
function geocode_menu() {
  $menu = array();

  $menu['geocode'] = array(
    'page callback'   => 'geocode',
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 *
 */
function geocode() {
  # location
  $location = array(
    'country_name'  => FALSE,
    'country_code'  => FALSE,
    'province_name' => FALSE,
    'province_code' => FALSE,
    'city_name'     => FALSE,
    'city_code'     => FALSE,
    'latitude'      => FALSE,
    'longitude'     => FALSE,
    'postalcode'    => FALSE,
  );

  # location info from request
  if (!empty($_REQUEST['countrycode'])) {
    $countrycode = $_REQUEST['countrycode'];
    if ($countryname = location_country_name($countrycode)) {
      $location['country_name'] = $countryname;
      $location['country_code'] = $countrycode;
    }
  }
  if (!empty($_REQUEST['postalcode'])) {
    $postalcode = $_REQUEST['postalcode'];
    $location['postalcode'] = $postalcode;
  }
  if (!empty($_REQUEST['coords'])) {
    $coords = $_REQUEST['coords'];
    if (isset($coords['latitude'])) {
      $location['latitude'] = $coords['latitude'];
    }
    if (isset($coords['longitude'])) {
      $location['longitude'] = $coords['longitude'];
    }
  }

  # if no coordinates
  if ((FALSE === $location['latitude']) && (FALSE === $location['longitude'])) {
    # get coordinates using countrycode + postalcode (geonames)
    if ($coords = geocode_geonames_postalcode_request($_REQUEST['countrycode'], $_REQUEST['postalcode'])) {
      $location['latitude'] = $coords['latitude'];
      $location['longitude'] = $coords['longitude'];
    }
  }

  # if still no coordinates
  if ((FALSE === $location['latitude']) && (FALSE === $location['longitude'])) {
    # get coordinates using countrycode + postalcode (geonames)
    if ($coords = geocode_googlemaps_postalcode_request($_REQUEST['countrycode'] . ',' . $_REQUEST['postalcode'])) {
      $location['latitude'] = $coords['latitude'];
      $location['longitude'] = $coords['longitude'];
    }
  }

  # if still no coordinates
  if ((FALSE === $location['latitude']) && (FALSE === $location['longitude'])) {
    exit(json_encode(array(
      'status'   => FALSE,
      'message'  => __('We could not determine your location', array('@code' => 'geocode-error')),
      'location' => $location,
    )));
  }

  # find location
  if ($location_info = geocode_geonames_latlng_request($location['latitude'], $location['longitude'])) {
    foreach (array('country', 'province', 'city') as $prefix) {
      if (isset($location_info[$prefix . '_code'])) {
        $location[$prefix . '_code'] = $location_info[$prefix . '_code'];
        $location[$prefix . '_name'] = $location_info[$prefix . '_name'];
      }
    }
  }

  # if no city_code
  if (!$location['city_code']) {
    # not used google before
    if (!isset($_REQUEST['city_name'])) {
      geocode_googlemaps_postalcode_request($location['latitude'] . ',' . $location['longitude']);
    }
    # if there's city name
    $cityname = $_REQUEST['city_name'];
    if (!empty($_REQUEST['postal_code']) && empty($location['postalcode'])) {
      $location['postalcode'] = $_REQUEST['postal_code'];
    }
    if (!empty($cityname) && !empty($location['country_code'])) {
      if ($location_info = geocode_geonames_cityname_request($cityname, $location['country_code'])) {
        foreach (array('country', 'province', 'city') as $prefix) {
          if (isset($location_info[$prefix . '_code'])) {
            $location[$prefix . '_code'] = $location_info[$prefix . '_code'];
            $location[$prefix . '_name'] = $location_info[$prefix . '_name'];
          }
        }
      }
    }
  }

  # found location
  exit(json_encode(array(
    'status'   => TRUE,
    'message'  => __('We have determined your location', array('@code' => 'geocode-success')),
    'location' => $location,
  )));
}

/**
 * Determine the lat/lng of the countrycode + postalcode given
 *
 * @param $countrycode
 * @param $postalcode
 *
 * @return array|bool
 */
function geocode_geonames_postalcode_request($countrycode, $postalcode) {
  $response = @geonames_query('postalcodesearch', array(
    'postalcode' => $postalcode,
    'country'    => $countrycode,
    'maxrows'    => 1
  ));
  if ($response && isset($response->results[0])) {
    $result = $response->results[0];
    return array('latitude' => $result['lat'], 'longitude' => $result['lng']);
  }

  return FALSE;
}

/**
 * Determine the lat/lng of the address given
 *
 * @param $address
 *
 * @return array|bool
 */
function geocode_googlemaps_postalcode_request($address) {
  $googlemap_url = sprintf("http://maps.googleapis.com/maps/api/geocode/json?address=%s&sensor=false", str_replace(' ', '+', $address));

  # request
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $googlemap_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = json_decode(curl_exec($ch), TRUE);

  #
  if ($response && ($results = $response['results']) && ($result = $results[0])) {
    if ($address = $result['address_components']) {
      foreach ($address as $address_item) {
        if (in_array('locality', $address_item['types'])) {
          $_REQUEST['city_name'] = $address_item['short_name'];
        }
        if (in_array('postal_code', $address_item['types'])) {
          $_REQUEST['postal_code'] = $address_item['short_name'];
        }
      }
    }
    if ($coords = $result['geometry']['location']) {
      return array('latitude' => $coords['lat'], 'longitude' => $coords['lng']);
    }
  }

  return FALSE;
}

/**
 * @param $lat
 * @param $lng
 *
 * @return array|boolean
 */
function geocode_geonames_latlng_request($lat, $lng, $info = array()) {
  $output = array();

  $response = @geonames_query('extendedFindNearby', array(
    'lat'   => $lat,
    'lng'   => $lng,
    'style' => 'full'
  ), array('qs' => 'f'));
  if ($response && $response->results) {
    $count = count($response->results);
    for ($i = $count - 1; $i >= 0; $i--) {
      $result = $response->results[$i];

      # detect country
      if (!$output['country_code'] && !empty($result['countrycode'])) {
        $country_codes = location_get_iso3166_list();
        $country_code_tmp = strtolower($result['countrycode']);
        if (isset($country_codes[$country_code_tmp])) {
          $output['country_code'] = $country_code_tmp;
          $output['country_name'] = $country_codes[$country_code_tmp];
        }
      }

      # detect province
      if ($output['country_code'] && !$output['province_code']) {
        if (isset($result['iso3166-2']) && !empty($result['iso3166-2'])) {
          $province_codes = location_get_provinces($output['country_code']);
          $province_code_tmp = $result['iso3166-2'];
          if (isset($province_codes[$province_code_tmp])) {
            $output['province_code'] = $province_code_tmp;
            $output['province_name'] = $province_codes[$province_code_tmp];
          }
        }
      }

      # detect city
      if ($output['country_code'] && $output['province_code'] && !$output['city_code']) {
        if (isset($result['fcode']) && (FALSE !== strpos($result['fcode'], 'PPL'))) {
          $city_codes = location_get_cities($output['country_code'], $output['province_code']);
          $city_code_tmp = $result['geonameid'];
          if (isset($city_codes[$city_code_tmp])) {
            $output['city_code'] = $city_code_tmp;
            $output['city_name'] = $city_codes[$city_code_tmp];
            // postalcode ?
          }
        }
      }
    }
  }

  if (!empty($output)) {
    $output += array(
      'latitude'  => $lat,
      'longitude' => $lng,
    );
    $output += $info;
  }

  return empty($output) ? FALSE : $output;
}

/**
 * @param $city_name
 * @param $country_code
 *
 * @return array|bool
 */
function geocode_geonames_cityname_request($city_name, $country_code) {
  $output = array();

  $response = @geonames_query('search', array(
    'query'   => $city_name,
    'country' => $country_code,
    'style'   => 'full'
  ), array('qs' => 'f'));
  if ($response && $response->results) {
    $result = $response->results[0];

    # detect country
    if (!$output['country_code'] && !empty($result['countrycode'])) {
      $country_codes = location_get_iso3166_list();
      $country_code_tmp = strtolower($result['countrycode']);
      if (isset($country_codes[$country_code_tmp])) {
        $output['country_code'] = $country_code_tmp;
        $output['country_name'] = $country_codes[$country_code_tmp];
      }
    }

    # detect province
    if ($output['country_code'] && !$output['province_code']) {
      if (isset($result['iso3166-2']) && !empty($result['iso3166-2'])) {
        $province_codes = location_get_provinces($output['country_code']);
        $province_code_tmp = $result['iso3166-2'];
        if (isset($province_codes[$province_code_tmp])) {
          $output['province_code'] = $province_code_tmp;
          $output['province_name'] = $province_codes[$province_code_tmp];
        }
      }
    }

    # detect city
    if ($output['country_code'] && $output['province_code'] && !$output['city_code']) {
      if (isset($result['fcode']) && (FALSE !== strpos($result['fcode'], 'PPL'))) {
        $city_codes = location_get_cities($output['country_code'], $output['province_code']);
        $city_code_tmp = $result['geonameid'];
        if (isset($city_codes[$city_code_tmp])) {
          $output['city_code'] = $city_code_tmp;
          $output['city_name'] = $city_codes[$city_code_tmp];
          // postalcode ?
        }
      }
    }
  }

  return empty($output) ? FALSE : $output;
}
