<?php

/**
 * This file contains global sites functions
 */

/**
 * Soft dependency from T-Function module
 */
if (!module_exists('tt')) {
  /**
   * See tt.module
   *
   * @param       $string
   * @param array $args
   * @param null  $langcode
   *
   * @return null|string
   */
  function __($string, $args = array(), $langcode = NULL) {
    return t($string, $args, $langcode);
  }

  /**
   * @param       $code
   * @param array $args
   * @param null  $langcode
   *
   * @return null|string
   */
  function __t($code, $args = array(), $langcode = NULL) {
    if (is_string($args)) {
      $args['@default'] = $args;
    }
    else {
      $args['@default'] = isset($args['@default']) ? $args['@default'] : '';
    }
    return __($args['@default'], array('@code' => $code) + $args, $langcode);
  }
}

/**
 *
 */
function bootstrap_functions_enable() {
  db_query("UPDATE {system} SET bootstrap = 1 WHERE name = '%s'", 'bootstrap_functions');
}

/**
 * Set the title of the current page, for display on the page and in the title bar.
 *
 * @param $title
 *   Optional string value to assign to the page title; or if set to NULL
 *   (default), leaves the current title unchanged.
 *
 * @return
 *   The updated title of the current page.
 */
function drupal_set_subtitle($title = NULL) {
  static $stored_title;

  if (isset($title)) {
    $stored_title = $title;
  }

  return $stored_title;
}

# development function

function mtime($msg = FALSE) {
  static $time, $data = array();

  if (FALSE === $msg) {
    $time = round(microtime(TRUE), 4);
    return;
  }

  if (TRUE === $msg) {
    $output = "<table>";
    foreach ($data as $item) {
      $output .= sprintf("<tr><td>%s</td><td>%s</td></tr>", $item["time"], $item["msg"]);
    }
    $output .= "</table>";
    return $output;
  }

  $time2 = round(microtime(TRUE), 4);
  $data[] = array(
    'msg'  => $msg,
    'time' => $time2 - $time,
  );
  $time = $time2;
}


/**
 * Setect mobile browser
 *
 * @return bool
 */
function is_mobile() {
  $useragent = $_SERVER['HTTP_USER_AGENT'];
  return preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i', $useragent) || preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i', substr($useragent, 0, 4));
}

/**
 * https://phylsys.com/blog/59
 *
 * trims text to a maximum length, splitting at last word break, and (optionally) appending ellipses and stripping HTML tags
 *
 * @param string $input      text to trim
 * @param int    $length     maximum number of characters allowed
 * @param bool   $ellipses   if ellipses (...) are to be added
 * @param bool   $strip_html if html tags are to be stripped
 *
 * @return string
 */
function trim_better(&$input, $length, $ellipses = TRUE, $strip_html = TRUE) {
  //strip tags, if desired
  if ($strip_html) {
    $input = strip_tags($input);
  }

  //strip leading and trailing whitespace
  $input = trim($input);

  //no need to trim, already shorter than trim length
  if (strlen($input) <= $length) {
    return $input;
  }

  //leave space for the ellipses (...)
  if ($ellipses) {
    $length -= 3;
  }

  //this would be dumb, but I've seen dumber
  if ($length <= 0) {
    return '';
  }

  //find last space within length
  //(add 1 to length to allow space after last character - it may be your lucky day)
  $last_space = strrpos(substr($input, 0, $length + 1), ' ');
  if ($last_space === FALSE) {
    //lame, no spaces - fallback to pure substring
    $trimmed_text = substr($input, 0, $length);
  }
  else {
    //found last space, trim to it
    $trimmed_text = substr($input, 0, $last_space);
  }

  //add ellipses (...)
  if ($ellipses) {
    $trimmed_text .= '...';
  }

  return $trimmed_text;
}

/**
 * @param $date
 *
 * @return string
 */
function time_interval($date, $is_timestamp = FALSE) {
  # dates/interval
  $date_now = new DateTime("now");
  $date = new DateTime($is_timestamp ? date("F d Y H:i:s", $date) : $date);
  $interval = $date->diff($date_now);
  # convert to string
  if ($interval->y != 0) {
    return $interval->y . ' ' . t('year' . ($interval->y > 1 ? 's' : '')) . ' ' . t('ago');
  }
  if ($interval->m != 0) {
    return $interval->m . ' ' . t('month' . ($interval->m > 1 ? 's' : '')) . ' ' . t('ago');
  }
  if ($interval->d != 0) {
    return $interval->d . ' ' . t('day' . ($interval->d > 1 ? 's' : '')) . ' ' . t('ago');
  }
  if ($interval->h != 0) {
    return $interval->h . ' ' . t('hour' . ($interval->h > 1 ? 's' : '')) . ' ' . t('ago');
  }
  if ($interval->i != 0) {
    return $interval->i . ' ' . t('minute' . ($interval->i > 1 ? 's' : '')) . ' ' . t('ago');
  }
  return t('just now');
}

/**
 *
 */
function dbg() {
  $dbg = debug_backtrace();
  foreach ($dbg as $record) {
    print $record['function'] . ' on line ' . $record['line'] . ' in ' . $record['file'] . " <br>\n";
  }
}

/**
 * @return bool
 */
function is_node_page() {
  return ('node' == arg(0)) && is_numeric(arg(1)) && ('' == arg(2));
}

function register_t($string, $textgroup = 'default', $skip = FALSE) {
  $lids = array();
  $result = db_query("SELECT lid FROM locales_source WHERE source = '%s'", $string);
  while ($lid = db_result($result)) {
    $lids[] = $lid;
  }

  switch (count($lids)) {
    case 0  :
      db_query("INSERT INTO locales_source VALUES (NULL, '/ru/', '%s', '%s', '%s')", $textgroup, $string, VERSION);
      if (!$skip) {
        register_t($string, $textgroup, TRUE);
      }
      break;
    case 1  :
      db_query("UPDATE locales_source SET textgroup = '%s' WHERE lid = '%s'", $textgroup, $lids[0]);
      db_query("REPLACE INTO locales_target VALUES ('%s', '%s', 'ru', 0, 0, 0, 0)", $lids[0], $string);
      break;
    default :
      echo $string . ' ' . implode(',', $lids) . " <br>\n";
      break;
  }
}

/**
 * Get user profile image
 *
 * @param      $user
 * @param bool $presetname
 *
 * @return mixed
 */
function user_profile_image($user, $presetname = FALSE) {
  static $imgs = array();
  if (!isset($imgs[$user->uid][$presetname])) {
    $img = $user->picture;
    if (!preg_match('/^http(s)?:\/\//', $img)) {
      if ($presetname === FALSE || !imagecache_generate_image($presetname, $user->picture)) {
        $img = file_directory_path() . '/' . $user->picture;
      }
      else {
        $img = imagecache_create_path($presetname, file_directory_path() . '/' . $user->picture);
      }
      if (!preg_match('/^http(s)?:\/\//', $img)) {
        global $base_url;
        $img = $base_url . '/' . $img;
      }
    }
    $imgs[$user->uid][$presetname] = $img;
  }
  return $imgs[$user->uid][$presetname];
}
