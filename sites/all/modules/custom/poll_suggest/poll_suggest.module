<?php

/**
 * Add poll suggestion
 *
 * @usage poll_suggest_add(1, "Hello world!")
 */
function poll_suggest_add($nid, $chtext, $uid = '')
{
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  db_query("INSERT INTO {poll_suggest} SET nid = '%d', uid = '%d', chtext = '%s'", $nid, $uid, $chtext);
  if (module_exists("rules")) {
    global $user;
    rules_invoke_event('poll_suggest_add', $user, node_load($nid));
  }
  return db_last_insert_id('poll_suggest', 'chid');
}

/**
 * Remove poll suggestion
 *
 * @usage poll_suggest_remove(array('chid' => 13))
 * @usage poll_suggest_remove(array('nid' => 14, uid => 32))
 */
function poll_suggest_remove($params = array())
{
  if (isset($params['chid'])) {
    db_query("DELETE FROM {poll_suggest} WHERE chid = '%d'", $params['chid']);
  }
  if (isset($params['nid']) && isset($params['uid'])) {
    db_query("DELETE FROM {poll_suggest} WHERE nid = '%d', uid = '%d'", $params['nid'], $params['uid']);
  }
}

/**
 * Update poll suggestion text
 *
 * @usage poll_suggest_update_text(array('chtext' => 'Hello world!', 'chid' => 13))
 * @usage poll_suggest_update_text(array('chtext' => 'Hello world!', 'nid' => 14, uid => 32))
 */
function poll_suggest_update_text($params = array())
{
  if (isset($params['chtext']) && !empty($params['chtext'])) {
    if (isset($params['chid'])) {
      db_query("UPDATE {poll_suggest} SET chtext = '%s' WHERE chid = '%d'", $params['chtext'], $params['chid']);
    }
    if (isset($params['nid']) && isset($params['uid'])) {
      db_query("UPDATE {poll_suggest} SET chtext = '%s' WHERE nid = '%d', uid = '%d'", $params['chtext'], $params['nid'], $params['uid']);
    }
  }
}

/**
 * Add the poll suggestion vote
 *
 * @usage poll_suggest_vote_add(13, 32)
 */
function poll_suggest_vote_add($chid, $uid)
{
  db_query("INSERT INTO {poll_suggest_votes} SET chid = '%d', uid = '%d', date_voted = '%d'", $chid, $uid, date("y-m-d H:i:s"));
  poll_suggest_choice_convert($chid);
}

/**
 * Remove poll suggestion vote
 *
 * @usage poll_suggest_vote_remove(13, 32)
 */
function poll_suggest_vote_remove($chid, $uid)
{
  db_query("DELETE FROM {poll_suggest_votes} WHERE chid = '%d' AND uid = '%d'", $chid, $uid);
}

/**
 * Get suggested answers
 *
 * @usage
 */
function poll_suggest_get($nid, $uid = '')
{
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $list = array();
  $result = db_query("SELECT ps.chid, ps.uid, ps.chtext, IFNULL(psv.uid, 0) AS uservote FROM {poll_suggest} ps LEFT JOIN {poll_suggest_votes} psv ON psv.chid = ps.chid AND psv.uid = '%d' WHERE ps.nid = '%d' GROUP BY ps.chid", $uid, $nid);
  while ($row = db_fetch_array($result)) {
    $list[] = $row;
  }
  return $list;
}

/**
 * Get suggested votes stats
 */
function poll_suggest_get_votes($nid)
{
  static $votes = array();
  if (!isset($votes[$nid])) {
    $vote = array();
    $vote['#all'] = 0;
    $result = db_query("SELECT ps.chid, COUNT(psv.vid) AS count FROM {poll_suggest} ps LEFT JOIN {poll_suggest_votes} psv ON ps.chid = psv.chid WHERE nid = '%d' GROUP BY ps.chid", $nid);
    while ($row = db_fetch_object($result)) {
      $vote['#all'] += $row->count;
      $vote[$row->chid] = $row->count;
    }
    $votes[$nid] = $vote;
  }
  return $votes[$nid];
}

/**
 * Get suggested votes stats
 */
function poll_suggest_get_uservotes($uid)
{
  static $votes = array();
  if (!isset($votes[$uid])) {
    $votes[$uid] = (int)db_result(db_query("SELECT COUNT(*) FROM {poll_suggest_votes} WHERE uid = '%d'", $uid));
  }
  return $votes[$uid];
}

/**
 * Implementation of hook_nodeapi()
 */
function poll_suggest_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  if ($node->type == 'poll') {
    switch ($op) {
      case 'delete' :
        db_query("DELETE FROM {poll_suggest_votes} WHERE chid IN (SELECT chid FROM {poll_suggest} WHERE nid = '%d')", $node->nid);
        db_query("DELETE FROM {poll_suggest} WHERE nid = '%d'", $node->nid);
        db_query("DELETE FROM {poll_suggest_allow} WHERE nid = '%d'", $node->nid);
        break;
      case 'load' :
        $node->allowsuggestions = (bool)db_result(db_query("SELECT status FROM {poll_suggest_allow} WHERE nid = '%d'", $node->nid));
        $node->choice_suggest = poll_suggest_get($node->nid);
        $node->vote_suggest = $node->choice_suggest[0]['uservote'] ? $node->choice_suggest[0]['chid'] : -1;
        break;
      case 'presave' :
        poll_suggest_allowsuggestions_set($node->nid, $node->allowsuggestions);
        break;
    }
  }
}

/**
 * Suggested answer conversion
 */
function poll_suggest_choice_convert($chid)
{
  $nid = db_result(db_query("SELECT nid FROM {poll_suggest} WHERE chid = '%d'", $chid));
  $votes_s = poll_suggest_get_votes($nid);
  if ($votes_s[$chid] >= 10) { # more than 10 votes
    $votes_r = db_fetch_array(db_query("SELECT COUNT(*) AS count, SUM(chvotes) AS votes FROM {poll_choices} WHERE nid = '%d'", $nid));
    if (2 * $votes_r['count'] * $votes_s[$chid] >= $votes_r['votes'] + $votes_s['#all']) {
      # more than half of average regular answer's votes
      $sa = poll_suggest_get($nid);
      $chtext = false;
      foreach ($sa as $s) {
        if ($s['chid'] == $chid) {
          $chtext = $s['chtext'];
          break;
        }
      }
      if ($chtext !== false) {
        # new chorder for poll vote
        $chorder = db_result(db_query("SELECT MAX(pc.chorder) + 1 FROM {poll_choices} pc WHERE pc.nid = '%d'", $nid));
        # add the choice
        db_query("INSERT INTO {poll_choices} SET nid = '%d', chtext = '%s', chvotes = '%d', chorder = '%d'", $nid, $chtext, $votes_s[$chid], $chorder);
        # transfer votes
        db_query("INSERT INTO {poll_votes} (nid, uid, chorder) SELECT '%d', psv.uid, '%d' FROM {poll_suggest_votes} psv WHERE psv.chid = '%d'", $nid, $chorder, $chid);
        # delete suggested votes
        db_query("DELETE FROM {poll_suggest_votes} WHERE chid = '%d'", $chid);
        # delete suggested answer
        poll_suggest_remove(array('chid' => $chid));
      }
    }
  }
}


/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function poll_suggest_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'poll_node_form') {
    $form['allowsuggestions'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow suggesting answers'),
      '#default_value' => $form['#node']->allowsuggestions,
    );
    array_push($form['#submit'], 'poll_suggest_allowsuggestions');
  }
}

/**
 * @param $nid
 * @param $value
 */
function poll_suggest_allowsuggestions_set($nid, $value)
{
  db_query("REPLACE INTO {poll_suggest_allow} SET nid = '%d', status = '%d'", $nid, intval($value));
}

/**
 * @param $form
 * @param $form_state
 */
function poll_suggest_allowsuggestions(&$form, &$form_state)
{
  poll_suggest_allowsuggestions_set($form['#node']->nid, $form_state['values']['allowsuggestions']);
}