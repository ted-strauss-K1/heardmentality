<?php

/**
 * @file
 *   Install and related hooks for apachesolr_search.
 */

/**
 * Implements hook_install().
 */
function apachesolr_search_install() {
  // Create tables.
  drupal_install_schema('apachesolr_search');
}

/**
 * Implements hook_enable().
 */
function apachesolr_search_enable() {
  // Make sure the default core search page is installed.
  $search_page = apachesolr_search_page_load('core_search', TRUE);
  if (empty($search_page)) {
    // Add Default search page (core search)
    // This is a duplication from update_7004 but it is intended
    // so future changes are possible without breaking the update
    $settings = array(
      'apachesolr_search_search_type' => 'custom',
      'apachesolr_search_per_page' => 10,
      'apachesolr_search_browse' => 'browse',
      'apachesolr_search_spellcheck' => TRUE,
      'apachesolr_search_not_removable' => TRUE,
      'apachesolr_search_search_box' => TRUE,
    );
    $search_page = new stdClass();
    $search_page->page_id = 'core_search';
    $search_page->label = 'Core Search';
    $search_page->description = 'Core Search';
    $search_page->search_path = 'search/site';
    $search_page->env_id = 'solr';
    $search_page->page_title = 'Site';
    $search_page->settings = $settings;
    apachesolr_search_page_save($search_page);
  }

  $search_page = apachesolr_search_page_load('taxonomy_search', TRUE);
  if (empty($search_page)) {
    // Add a taxonomy search page to the database
    $settings = array(
      'apachesolr_search_search_type' => 'tid',
      'apachesolr_search_per_page' => 10,
      'apachesolr_search_browse' => 'results',
      'apachesolr_search_spellcheck' => FALSE,
      'apachesolr_search_search_box' => FALSE,
    );
    $search_page = new stdClass();
    $search_page->page_id = 'taxonomy_search';
    $search_page->label = 'Taxonomy Search';
    $search_page->description = 'Search all items with given term';
    $search_page->search_path = 'taxonomy/term/%';
    $search_page->env_id = '';
    $search_page->page_title = '%value';
    $search_page->settings = $settings;
    apachesolr_search_page_save($search_page);
  }

  $active = variable_get('search_active_modules', array('node', 'user'));
  $active[] = 'apachesolr_search';
  variable_set('search_active_modules', array_unique($active));
}

/**
 * Implements hook_schema().
 */
function apachesolr_search_schema() {
  $schema = array();

  $schema['apachesolr_search_page'] = array(
    'description' => 'Apache Solr Search search page settings.',
    'export' => array(
      'key' => 'page_id',
      'identifier' => 'searcher',
      'default hook' => 'apachesolr_search_default_searchers',
      'status' => 'apachesolr_search_page_status',
      'api' => array(
        'owner' => 'apachesolr_search',
        'api' => 'apachesolr_search_defaults',
        'minimum_version' => 3,
        'current_version' => 3,
      ),
      'export callback' => 'apachesolr_search_page_settings_export',
    ),
    'fields' => array(
      'page_id' => array(
        'description' => 'The machine readable name of the search page.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The human readable name of the search page.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The description of the search page.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'search_path' => array(
        'description' => 'The path to the search page.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'page_title' => array(
        'description' => 'The title of the search page.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'env_id' => array(
        'description' => 'The machine name of the search environment.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'Serialized storage of general settings.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('page_id'),
    'indexes' => array(
      'env_id' => array('env_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function apachesolr_search_uninstall() {
  $stored = variable_get('apachesolr_index_last', array());
  unset($stored['apachesolr_search']);
  variable_set('apachesolr_index_last', $stored);

  $active = variable_get('search_active_modules', array('node', 'user'));
  $idx = array_search('apachesolr_search', $active);
  if ($idx !== FALSE) {
    unset($active[$idx]);
    variable_set('search_active_modules', $active);
  }
  // Remove variables.
  variable_del('apachesolr_search_spellcheck');
  variable_del('apachesolr_search_mlt_blocks');
  variable_del('apachesolr_search_default_search_page');

  // Remove blocks.
  db_query('DELETE FROM {blocks} WHERE module = "apachesolr_search"');

  // Remove tables.
  drupal_uninstall_schema('apachesolr_search');
}
