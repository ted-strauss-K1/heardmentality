<?php
function quest_lite_perm() {

  return array('Question Lite','Question Save', 'Add Resource' , 'Save Resource','Flag Question','Question Report Percent','Question Report Time','Question Report Map','Question Like','Question Add Tag','Question Ajax');

} // function newmodule_perm
function quest_lite_menu() {	
 
  $quest['qlite/view'] = array(
    'title' => 'Question Lite',
    'page callback' => 'qlite_view',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
 
 
 $quest['qlite/save'] = array(
    'title' => 'Question Lite',
    'page callback' => 'qlite_save',
    'access arguments' => array('Question Save'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
   $quest['qlite/like'] = array(
    'title' => 'Question Like',
    'page callback' => 'qns_like',
    'access arguments' => array('Question Like'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  $quest['qlite/resource'] = array(
    'title' => 'Resources',
    'page callback' => 'add_resources',
    'access arguments' => array('Add Resource'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  
   $quest['qlite/ajaxadd'] = array(
    'title' => 'Resources',
    'page callback' => 'save_resources',
    'access arguments' => array('Save Resource'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
   $quest['qlite/flag'] = array(
    'title' => 'Flag Question',
    'page callback' => 'flag_question',
    'access arguments' => array('Flag Question'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
   $quest['qlite/questionmenu'] = array(
    'title' => 'tab',
    'page callback' => 'tab_list',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
   $quest['qlite/panel'] = array(
    'title' => 'panel',
    'page callback' => 'panel_content',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
   $quest['qlite/flagreport'] = array(
    'title' => 'Flag Report',
    'page callback' => 'flag_report',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  $quest['qlite/suggest'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'suggest_answer',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
   $quest['qlite/answersubmit'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'suggest_answer_save',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
   $quest['qlite/innews'] = array(
    'title' => 'News',
    'page callback' => 'question_news',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
    $quest['qlite/media'] = array(
    'title' => 'Media',
    'page callback' => 'question_media',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
    $quest['qlite/facts'] = array(
    'title' => 'Facts',
    'page callback' => 'question_facts',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  
   $quest['qlite/percent'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'qlite_percent',
    'access arguments' => array('Question Report Percent'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  $quest['qlite/graph'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'qlite_graph',
    'access arguments' => array('Question Report Time'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  $quest['qlite/map'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'qlite_map',
    'access arguments' => array('Question Report Map'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  
    
   $quest['qlite/answervote'] = array(
    'title' => 'Suggest Answer',
    'page callback' => 'answer_vote',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
    $quest['qlite/Details'] = array(
    'title' => 'Question Information',
    'page callback' => 'qusetion_info',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
   $quest['admin/qlite/percentage'] = array(
    'title' => 'Percentage',
    'page callback' => 'percent_info',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  $quest['admin/qlite/percentsave'] = array(
    'title' => 'Percentage',
    'page callback' => 'percent_save',
    'access arguments' => array('Question Lite'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  

  
  $quest['qlite/addtag'] = array(
    'title' => 'Add/Edit Tag ',
    'page callback' => 'retag',
    'access arguments' => array('Question Add Tag'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  
  $quest['qlite/ajax'] = array(
    'title' => 'Add/Edit Tag ',
    'page callback' => 'qfull_ajax',
    'access arguments' => array('Question Ajax'),
	   'type' => MENU_SUGGESTED_ITEM,
    'file' => 'quest_lite.pages.inc',
  );
  
  return $quest;
  
}

 function getAnsweredUsers( $question_id = NULL){
/*   $query = "SELECT pav.uid, sav.uid
			 from suggest_answer_vote sav
			 INNER JOIN possible_answer_vote pav on sav.qid=pav.qid
			 where 1=1 AND pav.qid = '".$question_id."' OR  sav.qid = '".$question_id."'
			 order by  pav.uid";*/
  $query = "SELECT  sav.uid from suggest_answer_vote sav
			where 1=1 AND sav.qid ='".$question_id."' UNION
			SELECT pav.uid
			from possible_answer_vote pav
			where 1=1 AND pav.qid ='".$question_id."'";

   $userids = ExecuteQuery($query, "select");
   if(count($userids)<= 0){
    return $userids;
   }
   else{
   $Ids= array();
   foreach($userids as $userid){
	 $Ids[]= $userid ['uid'];

   }
   $separated = implode(",", $Ids);
   $separated='( '. $separated.')';
/*   $query = "SELECT bt.name as badgename, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
			from profile_badges pb
			INNER JOIN users u on pb.uid=u.uid
			LEFT JOIN badge_types bt on  bt.id = pb.badge_type_id
			WHERE 1=1 AND u.uid  IN".$separated;*/
   $query = "SELECT up.image, pb.uid, pb.badge_type_id,  pb.post_count	,u.name
			from profile_badges pb
			INNER JOIN users u on pb.uid=u.uid
			LEFT JOIN user_profile up on  up.uid = u.uid
			WHERE 1=1 AND u.uid  IN".$separated;
   $profileBadges = ExecuteQuery($query, "select");
   }
   return $profileBadges;


	}
	
		function process_tags($qtag='',$qid='',$edit=''){
			//$param=func_get_args();
			//print_r($param); 
		 global $gSitePath,$user,$gDocPath,$base_root,$base_path;
		switch($edit){
			case 1:
		foreach($qtag as $ins){
				$ins_clean=clean_url($ins);
			 $query=" SELECT * , (SELECT count( * )FROM qtag AS q WHERE t.tid = q.tag_id AND q.qid='$qid' GROUP BY q.tag_id) AS tcnt FROM tagging AS t WHERE t.tag LIKE '$ins_clean' LIMIT 0 , 1 ";
				  $result = ExecuteQuery($query, "select");
				// print_r($result);
				
				
				 if(count($result)>0){
				 	//check same tag already set
				 		if($result[0]['tcnt']<1){					
					db_query("INSERT INTO {qtag} set qid='$qid',tag_id='".$result[0]['tid']."'");
						}
				 }else{
				 
				 	if($result[0]['tcnt']<1){
				 		
			
		$setnew = db_query("INSERT INTO {tagging} set uid='$user->uid',tag='$ins_clean'  ");

        
        $tins = db_last_insert_id('tagging', 'qid');
            $result = db_query("INSERT INTO {qtag} (qid,tag) VALUES (%d,'%s')", $qid,$tins);
					
				 }
				 }
				 
			}
			break;
		default:
			foreach($qtag as $settag){
			$ins_clean=clean_url($settag);		
		  $query = " SELECT count(*) as cnt,tid FROM {tagging} WHERE `tag` LIKE '$ins_clean' LIMIT 0 , 1 ";
          $result_tag = ExecuteQuery($query, "select");
           if($result_tag[0]['cnt']>0){
           	  $result = db_query("INSERT INTO {qtag} (qid,tag_id) VALUES (%d,%d)", $qid, $result_tag[0]['tid']);
           }else{    	
		   
		    $setnew = db_query("INSERT INTO {tagging} set uid='$user->uid',tag='$ins_clean'  ");

        
        $tins = db_last_insert_id('tagging', 'qid');
            $result = db_query("INSERT INTO {qtag} (qid,tag_id) VALUES (%d,%d)", $qid,$tins);
			} 
			
			
				}
			break;
		}
		
		return true;
	}
	
	
	function popular_tag(){
	 $randomtag='';
		 $query = " SELECT tag from {tagging}  ORDER BY rand() limit 0,10";
                $result = ExecuteQuery($query, "select");
			 foreach ($result as $rtag) {
	 	if(!empty($rtag['tag'])){
	 $randomtag.='
                            <div id="tagging-1" class="tagging-suggest-tag processed">
                               '.$rtag['tag'].'
                            </div>
                        ';
                        }
	 }
	 
	return $randomtag;
}
	
	