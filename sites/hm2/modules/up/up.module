<?php

/**
 * Implementation of hook_nodeapi()
 *
 * @param $node
 * @param $op
 * @param null $a3
 * @param null $a4
 */
function up_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'delete' :
      up_cleanup($node->nid, 'node');
      break;
  }
}

/**
 * Implementation of hook_comment()
 *
 * @param $a1
 * @param $op
 */
function up_comment(&$a1, $op)
{
  switch ($op) {
    case 'delete' :
      up_cleanup($a1->cid, 'comment');
      break;
  }
}

/**
 * Remove all the userpoints for that
 *
 * @param $content_id
 * @param $content_type
 */
function up_cleanup($content_id, $content_type)
{
  //
}

/**
 * Get the number of userpoints
 *
 * @param string $uid
 * @param string $operation
 * @param bool $reset
 * @return bool
 */
function up_userpoints_get($uid = false, $operation = '', $reset = false)
{
  static $cache = array();

  if ($uid === false) {
    global $user;
    $uid = $user->uid;
  }

  # if array of uids is passed then return TRUE but cache values
  if (is_array($uid)) {
    $query = "SELECT uid, SUM(points) AS count FROM {userpoints_txn} WHERE uid IN (" . db_placeholders($uid) . ")";
    if (!empty($operation)) {
      $query .= " AND operation = '%s'";
    }
    $uid[] = $operation;
    $result = db_query($query, $uid);
    while ($row = db_fetch_array($result)) {
      $cache[$row['uid']][$operation] = (int)$row['count'];
    }
  } else { # otherwise
    if (!isset($cache[$uid][$operation]) || $reset) {
      if (empty($operation)) {
        $cache[$uid][$operation] = (int)userpoints_get_current_points($uid, 'all');
      } else {
        $cache[$uid][$operation] = (int)db_result(db_query("SELECT SUM(points) FROM {userpoints_txn} WHERE uid = '%d' AND operation = '%s'", $uid, $operation));
      }
    }
    return $cache[$uid][$operation];
  }

  return true;
}

/**
 * Max userpoints per day
 */
define('UP_REPUTATION_PER_DAY', 200);

/**
 * Get the number of userpoints today (!)
 *
 * @param string $uid
 * @param string $operation
 * @return int
 */
function up_userpoints_today($uid = false, $operation = '')
{
  if ($uid === false) {
    global $user;
    $uid = $user->uid;
  }
  $query = "SELECT SUM(points) FROM {userpoints_txn} WHERE uid = '%d' AND time_stamp > CURDATE()";
  if (!empty($operation)) {
    $query .= " AND operation = '%s'";
  }
  return (int)db_result(db_query($query, $uid, $operation));
}

/**
 * Check if operation was made today
 *
 * @param $operation
 * @param string $uid
 * @return bool
 */
function up_check_operation_today($operation, $uid = false)
{
  if ($uid === false) {
    global $user;
    $uid = $user->uid;
  }
  return false != db_result(db_query("SELECT txn_id FROM {userpoints_txn} WHERE uid = '%d' AND time_stamp > CURDATE() AND operation = '%s'", $uid, $operation));
}

/**
 * Implementation of hook_form_alter()
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function up_form_alter(&$form, $form_state, $form_id)
{
  # for "UR-API" module
  if ($form_id == 'user_relationships_ui_request') {
    $form['#submit'][] = 'up_userpoints_follow';
  }
  if ($form_id == 'user_relationships_ui_remove') {
    $form['#submit'][] = 'up_userpoints_unfollow';
  }
}

/**
 * Form user_relationships_ui_request additional submitter
 *
 * @param $form
 * @param $form_state
 */
function up_userpoints_follow(&$form, $form_state)
{
  if (module_exists('rules') && module_exists('UR-API')) {
    global $user;
    $followed = user_load(arg(1));
    rules_invoke_event('up_user_followed', $user, $followed);
  }
}

/**
 * Form user_relationships_ui_remove additional submitter
 *
 * @param $form
 * @param $form_state
 */
function up_userpoints_unfollow(&$form, $form_state)
{
  if (module_exists('rules') && module_exists('UR-API')) {
    global $user;
    $relationship = user_relationships_load(arg(3));
    $followed = user_load($relationship->requestee_id);
    rules_invoke_event('up_user_unfollowed', $user, $followed);
  }
}

// Userpoints for sharing

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function up_menu()
{
  $menu = array();

  $menu['up_share/%node'] = array(
    'page callback' => 'up_share',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * "up_share" callback
 *
 * @param $nid
 */
function up_share($nid)
{
  if (module_exists('rules')) {
    global $user;
    $node = node_load($nid);
    rules_invoke_event('up_user_shared', $user, $node);
  }
}

/**
 * Implementation of hook_init()
 *
 * TODO -- not in init
 */
function up_init()
{
  //
  drupal_add_js(drupal_get_path('module', 'up') . '/up.events.js');
}