<?php

/**
 * Implementation of hook_init()
 */
function moderation_init()
{
  //
}

/**
 * Define permission
 */
define('MODERATION_ADMIN', 'Administer Moderation module');

/**
 * Implementation of hook_perm()
 *
 * @return array
 */
function moderation_perm()
{
  return array(MODERATION_ADMIN);
}

/**
 * Implementation of hook_preprocess_page()
 */
function moderation_preprocess_page(&$vars)
{
  if ('moderation' == arg(0)) {
    drupal_set_subtitle(t('Moderator'));

    if (in_array(arg(1), array('issue', 'argument', 'comment', ))) {
      $type = arg(1);
      $content_id = arg(2);
      switch ($type) {
        case 'issue' :
        case 'argument' :
          $content_type = 'node';
          break;
        case 'comment' :
          $content_type = 'comment';
          break;
        default :
          return;
      }
      $history = moderation_history_get($content_id, $content_type, array(), 10);
      if ('node' == $content_type) {
        $vars['right'] .= theme('moderation_related', $content_id);
      }
      $vars['right'] .= theme('moderation_history', $history);
      $vars['right'] .= theme('moderation_flags');

      # css/js
      drupal_add_js(drupal_get_path("module", "moderation") . "/moderation.js");
      drupal_add_css(drupal_get_path("module", "moderation") . "/moderation.css");
    }

    if ('users' == arg(1)) {
      # css/js
      drupal_add_js(drupal_get_path("module", "moderation") . "/moderation.js");
      drupal_add_css(drupal_get_path("module", "moderation") . "/moderation.css");
    }

    if ('merge' == arg(1)) {
      drupal_set_subtitle(t('Merge Issues'));

      # css/js
      drupal_add_js(drupal_get_path("module", "moderation") . "/moderation.merge.js");
      drupal_add_css(drupal_get_path("module", "moderation") . "/moderation.merge.css");
    }



    # set page template
    array_push($vars['template_files'], 'page_12_4');
  }
}

/**
 * Define variable name to store uids of moderators
 */
define('MODERATION_USERS', 'moderation_users');

/**
 * Check if user has the moderation permissions
 *
 * @param string $uid
 * @return bool
 */
function moderation_check_perm($uid = false)
{
  if (false === $uid) {
    global $user;
    $account = $user;
  } elseif (is_object($uid)) {
    $account = $uid;
  } else {
    $account = user_load($uid);
  }
  $perms = variable_get(MODERATION_USERS, array());
  return user_access(MODERATION_ADMIN, $account) || $perms[$account->uid];
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function moderation_menu()
{
  $menu = array();

  $menu['moderation'] = array(
    'title' => t('Moderation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_issues_form'),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/issues'] = array(
    'title' => t('Issues'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_issues_form'),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'weight' => -2,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/arguments'] = array(
    'title' => t('Arguments'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_arguments_form'),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'weight' => -1,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/comments'] = array(
    'title' => t('Comments'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_comments_form'),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'weight' => 0,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/users'] = array(
    'title' => t('Moderators'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_users_form'),
    'access arguments' => array(MODERATION_ADMIN),
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'file' => 'moderation.pages.inc',
  );

  $menu['moderation/issue/%'] = array(
    'title' => t('Issue'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_issue_view_form', 2),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/argument/%'] = array(
    'title' => t('Argument'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_argument_view_form', 2),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/comment/%'] = array(
    'title' => t('Comment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_comment_view_form', 2),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );
  $menu['moderation/user/%'] = array(
    'page callback' => 'moderation_perms',
    'page arguments' => array(2),
    'access arguments' => array(MODERATION_ADMIN),
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );

  // ahah to add choices
  $menu['moderation/ahah/%'] = array(
    'page callback' => 'moderation_ahah',
    'page arguments' => array(2),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );

  // merge
  $menu['moderation/merge/%/%'] = array(
    'title' => t('Merge Issues'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_merge_form', 2, 3),
    'access callback' => 'moderation_check_perm',
    'type' => MENU_CALLBACK,
    'weight' => -2,
    'file' => 'moderation.merge.inc',
  );

  return $menu;
}

/**
 * Implementation of hook_theme()
 *
 * @return array
 */
function moderation_theme()
{
  $theme = array();

  $theme['moderation_main'] = array(
    'arguments' => array('page' => 'issues'),
    'template' => 'templates/moderation-main',
  );
  $theme['moderation_item'] = array(
    'arguments' => array(
      'entity' => '',
    ),
    'template' => 'templates/moderation-item',
    'preprocess functions' => array('moderation_item_preprocess'),
    'file' => 'moderation.theme.inc',
  );

  // blocks
  $theme['moderation_related'] = array(
    'arguments' => array(
      'content_id' => '',
    ),
    'preprocess functions' => array('moderation_related_preprocess'),
    'template' => 'templates/moderation-related',
    'file' => 'moderation.theme.inc',
  );
  $theme['moderation_history'] = array(
    'arguments' => array(
      'history' => array(),
    ),
    'template' => 'templates/moderation-history',
  );
  $theme['moderation_flags'] = array(
    'arguments' => array(
      'content_type' => '',
      'content_id' => '',
    ),
    'template' => 'templates/moderation-flags',
    'preprocess functions' => array('moderation_flags_preprocess'),
    'file' => 'moderation.theme.inc',
  );

  return $theme;
}

/**
 * @param $content_id
 * @param $content_type
 * @param $change
 * @param array $vars
 * @param bool $uid
 */
function moderation_history_set($content_id, $content_type, $change, $vars = array(), $uid = false) {
  global $language;
  if (false === $uid) {
    global $user;
    $uid = $user->uid;
  }
  db_query("INSERT INTO {moderation_history} SET uid = '%d', status = 1, content_id = '%d', content_type = '%s', language = '%s', type = '%s', vars = '%s', date_added = '%s'", $uid, $content_id, $content_type, $language->language, $change, serialize($vars), date('Y-m-d H:i:s'));
}

/**
 * @param $content_id
 * @param $content_type
 * @param array $p
 */
function moderation_history_del($content_id, $content_type, $p = array()) {
  $query = "UPDATE {moderation_history} SET status = 0 WHERE content_id = '%d' AND content_type = '%s'";
  $params[] = $content_id;
  $params[] = $content_type;
  foreach ($p as $key => $value) {
    if ('!' != $key[0]) {
      $query .= " AND ".$key." = '%s'";
      $params[] = $value;
    } else {
      $key = substr($key, 1);
      $query .= " AND ".$key." <> '%s'";
      $params[] = $value;
    }
  }
  db_query($query, $params);
}

/**
 * @param $content_id
 * @param $content_type
 * @param $p
 * @param bool $count
 * @return array
 */
function moderation_history_get($content_id, $content_type, $p, $count = false) {
  global $language;
  $query = "SELECT * FROM {moderation_history} WHERE status = 1 AND content_id = '%d' AND content_type = '%s' AND language = '%s'";
  $params = array($content_id, $content_type, $language->language);
  foreach ($p as $key => $value) {
    if ('!' != $key[0]) {
      $query .= " AND ".$key." = '%s'";
      $params[] = $value;
    } else {
      $key = substr($key, 1);
      $query .= " AND ".$key." <> '%s'";
    }
  }
  $query .= " ORDER BY date_added DESC";
  if ($count !== false) {
    $query .= " LIMIT " . $count;
  }
  $result = db_query($query, $params);
  $history = array();
  while ($item = db_fetch_array($result)) {
    $item['vars'] = unserialize($item['vars']);
    $history[] = $item;
  }
  return $history;
}

/**
 * Implementation of hook_nodeapi()
 */
function moderation_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
  switch ($op) {
    case 'delete' :
      moderation_history_del($node->nid, 'node');
    break;
  }
}

/**
 * Implementation of hook_comment()
 *
 * @param $a1
 * @param $op
 */
function moderation_comment(&$a1, $op)
{
  switch ($op) {
    case 'delete' :
      moderation_history_del($a1->cid, 'comment');
    break;
  }
}